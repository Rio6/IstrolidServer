//from lib/mtwist.js
// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.MTwist = (function() {
    function MTwist(seed) {
      var k, mti, uint32mul;
      if (seed == null) {
        seed = Math.random() * 4294967295;
      }
      this.randomIntBetween = bind(this.randomIntBetween, this);
      this.randomIntBelow = bind(this.randomIntBelow, this);
      this.random = bind(this.random, this);
      this.randomUint32 = bind(this.randomUint32, this);
      uint32mul = function(n1, n2) {
        var n1High16, n1Low16, n2High16, n2Low16;
        n1Low16 = n1 & 0x0000ffff;
        n1High16 = n1 >>> 16;
        n2Low16 = n2 & 0x0000ffff;
        n2High16 = n2 >>> 16;
        return ((((n1 & 0xffff0000) * n2) >>> 0) + (((n1 & 0x0000ffff) * n2) >>> 0)) >>> 0;
      };
      this.mt = new Array(624);
      this.mt[0] = seed >>> 0;
      for (mti = k = 1; k < 624; mti = ++k) {
        this.mt[mti] = (uint32mul(1812433253, this.mt[mti - 1] ^ (this.mt[mti - 1] >>> 30)) + mti) >>> 0;
      }
      this.mti = mti;
    }

    MTwist.prototype.randomUint32 = function() {
      var i, k, l, y;
      if (this.mti >= 624) {
        for (i = k = 0; k < 227; i = ++k) {
          y = ((this.mt[i] & 0x80000000) | (this.mt[i + 1] & 0x7fffffff)) >>> 0;
          this.mt[i] = (this.mt[i + 397] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;
        }
        for (i = l = 227; l < 623; i = ++l) {
          y = ((this.mt[i] & 0x80000000) | (this.mt[i + 1] & 0x7fffffff)) >>> 0;
          this.mt[i] = (this.mt[i - 227] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;
        }
        y = ((this.mt[623] & 0x80000000) | (this.mt[0] & 0x7fffffff)) >>> 0;
        this.mt[623] = (this.mt[396] ^ (y >>> 1) ^ (y & 1 ? 0x9908b0df : 0)) >>> 0;
        this.mti = 0;
      }
      y = this.mt[this.mti++];
      y = (y ^ (y >>> 11)) >>> 0;
      y = (y ^ ((y << 7) & 0x9d2c5680)) >>> 0;
      y = (y ^ ((y << 15) & 0xefc60000)) >>> 0;
      y = (y ^ (y >>> 18)) >>> 0;
      return y;
    };

    MTwist.prototype.random = function() {
      return this.randomUint32() / 4294967296;
    };

    MTwist.prototype.randomIntBelow = function(maxPlusOne) {
      var bitMask, bitsNeeded, int;
      if (maxPlusOne < 1) {
        throw "Upper bound must be greater than or equal to 1";
      }
      if (maxPlusOne === 1) {
        return 0;
      }
      bitsNeeded = (maxPlusOne - 1).toString(2).length;
      bitMask = (1 << bitsNeeded) - 1;
      while (true) {
        int = this.randomUint32() & bitMask;
        if (int < maxPlusOne) {
          return int;
        }
      }
    };

    MTwist.prototype.randomIntBetween = function(inclusiveMin, inclusiveMax) {
      return inclusiveMin + this.randomIntBelow(inclusiveMax - inclusiveMin + 1);
    };

    MTwist.test = function() {
      var i, iterationFactor, iterations, j, k, l, mtwist, ref, seed;
      seed = 1234567890;
      iterationFactor = 10000;
      for (i = k = 0; k < 1000; i = ++k) {
        mtwist = new MTwist(seed);
        iterations = Math.floor(mtwist.randomUint32() / iterationFactor);
        for (j = l = 0, ref = iterations; 0 <= ref ? l < ref : l > ref; j = 0 <= ref ? ++l : --l) {
          mtwist.randomUint32();
        }
        seed = mtwist.randomUint32();
      }
      return seed === 1240212512;
    };

    return MTwist;

  })();

}).call(this);
;


//from src/maths.js
// Generated by CoffeeScript 1.10.0
(function() {
  var f, m3, m4, q4, v2, v3, v4;

  f = function(n) {
    return Math.round(n * 10000) / 10000;
  };

  window.RAD = Math.PI / 180;

  window.nums = Float64Array;

  window.X = [1, 0, 0];

  window.Y = [0, 1, 0];

  window.Z = [0, 0, 1];

  window.v2 = v2 = {};

  v2.created = 0;

  v2.create = function(a) {
    var d;
    v2.created += 1;
    d = new nums(2);
    if (a != null) {
      d[0] = a[0];
      d[1] = a[1];
    }
    return d;
  };

  v2.zero = function(d) {
    d[0] = 0;
    d[1] = 0;
    return d;
  };

  v2.set = function(a, d) {
    d[0] = a[0];
    d[1] = a[1];
    return d;
  };

  v2.add = function(a, b, d) {
    if (d == null) {
      d = a;
    }
    d[0] = a[0] + b[0];
    d[1] = a[1] + b[1];
    return d;
  };

  v2.sub = function(a, b, d) {
    if (d == null) {
      d = a;
    }
    d[0] = a[0] - b[0];
    d[1] = a[1] - b[1];
    return d;
  };

  v2.neg = function(a, d) {
    if (d == null) {
      d = a;
    }
    d[0] = -a[0];
    d[1] = -a[1];
    return d;
  };

  v2.scale = function(v, n, d) {
    if (d == null) {
      d = v;
    }
    d[0] = v[0] * n;
    d[1] = v[1] * n;
    return d;
  };

  v2.norm = function(a, d) {
    var len, x, y;
    if (d == null) {
      d = a;
    }
    x = a[0];
    y = a[1];
    len = Math.sqrt(x * x + y * y);
    if (len === 0) {
      d[0] = 0;
      d[1] = 0;
      return d;
    } else if (len === 1) {
      d[0] = x;
      d[1] = y;
      return d;
    }
    d[0] = x / len;
    d[1] = y / len;
    return d;
  };

  v2.angle = function(a) {
    a = Math.atan2(a[1], a[0]) + Math.PI / 2;
    while (a > Math.PI) {
      a -= Math.PI * 2;
    }
    while (a < -Math.PI) {
      a += Math.PI * 2;
    }
    return a;
  };

  v2.angleBetween = function(a, b) {
    return Math.atan2(a[1] - b[1], a[0] - b[1]);
  };

  v2.mag = function(v) {
    var x, y;
    x = v[0];
    y = v[1];
    return Math.sqrt(x * x + y * y);
  };

  v2.dot = function(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  };

  v2.direction = function(from, to, d) {
    if (d == null) {
      d = from;
    }
    v2.sub(from, to, d);
    v2.norm(d);
    return d;
  };

  v2.distance = function(from, to) {
    var x, y;
    x = to[0] - from[0];
    y = to[1] - from[1];
    return Math.sqrt(x * x + y * y);
  };

  v2.distanceSq = function(from, to) {
    var x, y;
    x = to[0] - from[0];
    y = to[1] - from[1];
    return x * x + y * y;
  };

  v2.lerp = function(a, b, lerp, d) {
    if (d == null) {
      d = a;
    }
    d[0] = a[0] + lerp * (b[0] - a[0]);
    d[1] = a[1] + lerp * (b[1] - a[1]);
    return d;
  };

  v2.random = function(v) {
    v[0] = Math.random() - .5;
    v[1] = Math.random() - .5;
    return v2.norm(v);
  };

  v2.rotate = function(v, th, d) {
    var cos, sin, v0, v1;
    if (d == null) {
      d = v;
    }
    sin = Math.sin(th);
    cos = Math.cos(th);
    v0 = v[0];
    v1 = v[1];
    d[0] = v0 * cos - v1 * sin;
    d[1] = v0 * sin + v1 * cos;
    return d;
  };

  v2.pointTo = function(d, th) {
    d[0] = Math.cos(th - Math.PI / 2);
    d[1] = Math.sin(th - Math.PI / 2);
    return d;
  };

  v2.str = function(v) {
    return "(" + (f(v[0])) + "," + (f(v[1])) + ")";
  };

  window.v3 = v3 = {};

  v3.create = function(a) {
    var d;
    d = new nums(3);
    if (a != null) {
      d[0] = a[0];
      d[1] = a[1];
      d[2] = a[2];
    }
    return d;
  };

  v3.zero = function(d) {
    d[0] = 0;
    d[1] = 0;
    d[2] = 0;
    return d;
  };

  v3.set = function(a, d) {
    d[0] = a[0];
    d[1] = a[1];
    d[2] = a[2];
    return d;
  };

  v3.add = function(a, b, d) {
    if (d == null) {
      d = a;
    }
    d[0] = a[0] + b[0];
    d[1] = a[1] + b[1];
    d[2] = a[2] + b[2];
    return d;
  };

  v3.sub = function(a, b, d) {
    if (d == null) {
      d = a;
    }
    d[0] = a[0] - b[0];
    d[1] = a[1] - b[1];
    d[2] = a[2] - b[2];
    return d;
  };

  v3.neg = function(a, d) {
    if (d == null) {
      d = a;
    }
    d[0] = -a[0];
    d[1] = -a[1];
    d[2] = -a[2];
    return d;
  };

  v3.scale = function(v, n, d) {
    if (d == null) {
      d = v;
    }
    d[0] = v[0] * n;
    d[1] = v[1] * n;
    d[2] = v[2] * n;
    return d;
  };

  v3.norm = function(a, d) {
    var len, x, y, z;
    if (d == null) {
      d = a;
    }
    x = a[0];
    y = a[1];
    z = a[2];
    len = Math.sqrt(x * x + y * y + z * z);
    if (len === 0) {
      d[0] = 0;
      d[1] = 0;
      d[2] = 0;
      return d;
    } else if (len === 1) {
      d[0] = x;
      d[1] = y;
      d[2] = z;
      return d;
    }
    d[0] = x / len;
    d[1] = y / len;
    d[2] = z / len;
    return d;
  };

  v3.cross = function(a, b, d) {
    var x, y, z;
    if (d == null) {
      d = a;
    }
    x = a[0];
    y = a[1];
    z = a[2];
    d[0] = y * b[2] - z * b[1];
    d[1] = z * b[0] - x * b[2];
    d[2] = x * b[1] - y * b[0];
    return d;
  };

  v3.angle = function(a, b) {
    var cosa, cross, mg, sina, th;
    mg = v3.mag(a) * v3.mag(b);
    cross = v3.cross(a, b, v3.create());
    sina = v3.mag(cross);
    sina /= mg;
    cosa = v3.dot(a, b);
    cosa /= mg;
    th = Math.atan(sina, cosa);
    return th;
  };

  v3.mag = function(v) {
    var x, y, z;
    x = v[0];
    y = v[1];
    z = v[2];
    return Math.sqrt(x * x + y * y + z * z);
  };

  v3.dot = function(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  };

  v3.direction = function(from, to, d) {
    if (d == null) {
      d = from;
    }
    v3.sub(from, to, d);
    v3.norm(d);
    return d;
  };

  v3.distance = function(from, to) {
    var x, y, z;
    x = to[0] - from[0];
    y = to[1] - from[1];
    z = to[2] - from[2];
    return Math.sqrt(x * x + y * y + z * z);
  };

  v3.lerp = function(a, b, lerp, d) {
    if (d == null) {
      d = a;
    }
    d[0] = a[0] + lerp * (b[0] - a[0]);
    d[1] = a[1] + lerp * (b[1] - a[1]);
    d[2] = a[2] + lerp * (b[2] - a[2]);
    return d;
  };

  v3.random = function(v) {
    v[0] = Math.random() - .5;
    v[1] = Math.random() - .5;
    v[2] = Math.random() - .5;
    return v3.norm(v);
  };

  v3.str = function(v) {
    return "(" + (f(v[0])) + "," + (f(v[1])) + "," + (f(v[2])) + ")";
  };

  window.v4 = v4 = {};

  v4.create = function(a) {
    var d;
    d = new nums(4);
    if (a != null) {
      d[0] = a[0];
      d[1] = a[1];
      d[2] = a[2];
      d[3] = a[3];
    }
    return d;
  };

  v4.str = function(v) {
    return "(" + (f(v[0])) + "," + (f(v[1])) + "," + (f(v[2])) + "," + (f(v[3])) + ")";
  };

  window.m3 = m3 = {};

  m3.create = function(m) {
    var d;
    d = new nums(9);
    if (m) {
      d[0] = m[0];
      d[1] = m[1];
      d[2] = m[2];
      d[3] = m[3];
      d[4] = m[4];
      d[5] = m[5];
      d[6] = m[6];
      d[7] = m[7];
      d[8] = m[8];
    }
    return d;
  };

  m3.set = function(m, d) {
    d[0] = m[0];
    d[1] = m[1];
    d[2] = m[2];
    d[3] = m[3];
    d[4] = m[4];
    d[5] = m[5];
    d[6] = m[6];
    d[7] = m[7];
    d[8] = m[8];
    return d;
  };

  m3.identity = function(d) {
    d[0] = 1;
    d[1] = 0;
    d[2] = 0;
    d[3] = 0;
    d[4] = 1;
    d[5] = 0;
    d[6] = 0;
    d[7] = 0;
    d[8] = 1;
    return d;
  };

  m3.transpose = function(m, d) {
    var a01, a02, a12;
    if ((d == null) || m === d) {
      a01 = m[1];
      a02 = m[2];
      a12 = m[5];
      m[1] = m[3];
      m[2] = m[6];
      m[3] = a01;
      m[5] = m[7];
      m[6] = a02;
      m[7] = a12;
      return m;
    }
    d[0] = m[0];
    d[1] = m[3];
    d[2] = m[6];
    d[3] = m[1];
    d[4] = m[4];
    d[5] = m[7];
    d[6] = m[2];
    d[7] = m[5];
    d[8] = m[8];
    return d;
  };

  m3.to_m4 = function(m, d) {
    if (d == null) {
      d = m4.create();
    }
    d[0] = m[0];
    d[1] = m[1];
    d[2] = m[2];
    d[3] = 0;
    d[4] = m[3];
    d[5] = m[4];
    d[6] = m[5];
    d[7] = 0;
    d[8] = m[6];
    d[9] = m[7];
    d[10] = m[8];
    d[11] = 0;
    d[12] = 0;
    d[13] = 0;
    d[14] = 0;
    d[15] = 1;
    return d;
  };

  m3.str = function(m) {
    return '[#{m[0]},#{m[1]},#{m[2]},#{m[3]},#{m[4]},#{m[5]},#{m[6]},#{m[7]},#{m[8]}]';
  };

  window.m4 = m4 = {};

  m4.create = function(m) {
    var d;
    d = new nums(16);
    if (m) {
      d[0] = m[0];
      d[1] = m[1];
      d[2] = m[2];
      d[3] = m[3];
      d[4] = m[4];
      d[5] = m[5];
      d[6] = m[6];
      d[7] = m[7];
      d[8] = m[8];
      d[9] = m[9];
      d[10] = m[10];
      d[11] = m[11];
      d[12] = m[12];
      d[13] = m[13];
      d[14] = m[14];
      d[15] = m[15];
    }
    return d;
  };

  m4.set = function(m, d) {
    d[0] = m[0];
    d[1] = m[1];
    d[2] = m[2];
    d[3] = m[3];
    d[4] = m[4];
    d[5] = m[5];
    d[6] = m[6];
    d[7] = m[7];
    d[8] = m[8];
    d[9] = m[9];
    d[10] = m[10];
    d[11] = m[11];
    d[12] = m[12];
    d[13] = m[13];
    d[14] = m[14];
    d[15] = m[15];
    return d;
  };

  m4.identity = function(d) {
    d[0] = 1;
    d[1] = 0;
    d[2] = 0;
    d[3] = 0;
    d[4] = 0;
    d[5] = 1;
    d[6] = 0;
    d[7] = 0;
    d[8] = 0;
    d[9] = 0;
    d[10] = 1;
    d[11] = 0;
    d[12] = 0;
    d[13] = 0;
    d[14] = 0;
    d[15] = 1;
    return d;
  };

  m4.transpose = function(m, d) {
    var a01, a02, a03, a12, a13, a23;
    if (!d || m === d) {
      a01 = m[1];
      a02 = m[2];
      a03 = m[3];
      a12 = m[6];
      a13 = m[7];
      a23 = m[11];
      m[1] = m[4];
      m[2] = m[8];
      m[3] = m[12];
      m[4] = a01;
      m[6] = m[9];
      m[7] = m[13];
      m[8] = a02;
      m[9] = a12;
      m[11] = m[14];
      m[12] = a03;
      m[13] = a13;
      m[14] = a23;
      return m;
    }
    d[0] = m[0];
    d[1] = m[4];
    d[2] = m[8];
    d[3] = m[12];
    d[4] = m[1];
    d[5] = m[5];
    d[6] = m[9];
    d[7] = m[13];
    d[8] = m[2];
    d[9] = m[6];
    d[10] = m[10];
    d[11] = m[14];
    d[12] = m[3];
    d[13] = m[7];
    d[14] = m[11];
    d[15] = m[15];
    return d;
  };

  m4.determinant = function(m) {
    var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33;
    a00 = m[0];
    a01 = m[1];
    a02 = m[2];
    a03 = m[3];
    a10 = m[4];
    a11 = m[5];
    a12 = m[6];
    a13 = m[7];
    a20 = m[8];
    a21 = m[9];
    a22 = m[10];
    a23 = m[11];
    a30 = m[12];
    a31 = m[13];
    a32 = m[14];
    a33 = m[15];
    return a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 + a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 + a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 + a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 + a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 + a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33;
  };

  m4.inverse = function(m, d) {
    var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, invDet;
    if (d == null) {
      d = m;
    }
    a00 = m[0];
    a01 = m[1];
    a02 = m[2];
    a03 = m[3];
    a10 = m[4];
    a11 = m[5];
    a12 = m[6];
    a13 = m[7];
    a20 = m[8];
    a21 = m[9];
    a22 = m[10];
    a23 = m[11];
    a30 = m[12];
    a31 = m[13];
    a32 = m[14];
    a33 = m[15];
    b00 = a00 * a11 - a01 * a10;
    b01 = a00 * a12 - a02 * a10;
    b02 = a00 * a13 - a03 * a10;
    b03 = a01 * a12 - a02 * a11;
    b04 = a01 * a13 - a03 * a11;
    b05 = a02 * a13 - a03 * a12;
    b06 = a20 * a31 - a21 * a30;
    b07 = a20 * a32 - a22 * a30;
    b08 = a20 * a33 - a23 * a30;
    b09 = a21 * a32 - a22 * a31;
    b10 = a21 * a33 - a23 * a31;
    b11 = a22 * a33 - a23 * a32;
    invDet = 1 / (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);
    d[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
    d[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
    d[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
    d[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
    d[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
    d[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
    d[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
    d[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
    d[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
    d[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
    d[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
    d[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
    d[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
    d[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
    d[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
    d[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
    return d;
  };

  m4.only_rot = function(m, d) {
    if (d == null) {
      d = m4.create();
    }
    d[0] = m[0];
    d[1] = m[1];
    d[2] = m[2];
    d[3] = m[3];
    d[4] = m[4];
    d[5] = m[5];
    d[6] = m[6];
    d[7] = m[7];
    d[8] = m[8];
    d[9] = m[9];
    d[10] = m[10];
    d[11] = m[11];
    d[12] = 0;
    d[13] = 0;
    d[14] = 0;
    d[15] = 1;
    return d;
  };

  m4.to_m3 = function(m, d) {
    if (d == null) {
      d = m3.create();
    }
    d[0] = m[0];
    d[1] = m[1];
    d[2] = m[2];
    d[3] = m[4];
    d[4] = m[5];
    d[5] = m[6];
    d[6] = m[8];
    d[7] = m[9];
    d[8] = m[10];
    return d;
  };

  m4.to_inv_m3 = function(m, d) {
    var a00, a01, a02, a10, a11, a12, a20, a21, a22, b01, b11, b21, det, id;
    a00 = m[0];
    a01 = m[1];
    a02 = m[2];
    a10 = m[4];
    a11 = m[5];
    a12 = m[6];
    a20 = m[8];
    a21 = m[9];
    a22 = m[10];
    b01 = a22 * a11 - a12 * a21;
    b11 = -a22 * a10 + a12 * a20;
    b21 = a21 * a10 - a11 * a20;
    det = a00 * b01 + a01 * b11 + a02 * b21;
    if (det === 0) {
      return null;
    }
    id = 1 / det;
    if (d == null) {
      d = m3.create();
    }
    d[0] = b01 * id;
    d[1] = (-a22 * a01 + a02 * a21) * id;
    d[2] = (a12 * a01 - a02 * a11) * id;
    d[3] = b11 * id;
    d[4] = (a22 * a00 - a02 * a20) * id;
    d[5] = (-a12 * a00 + a02 * a10) * id;
    d[6] = b21 * id;
    d[7] = (-a21 * a00 + a01 * a20) * id;
    d[8] = (a11 * a00 - a01 * a10) * id;
    return d;
  };

  m4.mul = function(m, m2, d) {
    var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b10, b11, b12, b13, b20, b21, b22, b23, b30, b31, b32, b33;
    if (d == null) {
      d = m;
    }
    a00 = m[0];
    a01 = m[1];
    a02 = m[2];
    a03 = m[3];
    a10 = m[4];
    a11 = m[5];
    a12 = m[6];
    a13 = m[7];
    a20 = m[8];
    a21 = m[9];
    a22 = m[10];
    a23 = m[11];
    a30 = m[12];
    a31 = m[13];
    a32 = m[14];
    a33 = m[15];
    b00 = m2[0];
    b01 = m2[1];
    b02 = m2[2];
    b03 = m2[3];
    b10 = m2[4];
    b11 = m2[5];
    b12 = m2[6];
    b13 = m2[7];
    b20 = m2[8];
    b21 = m2[9];
    b22 = m2[10];
    b23 = m2[11];
    b30 = m2[12];
    b31 = m2[13];
    b32 = m2[14];
    b33 = m2[15];
    d[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
    d[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
    d[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
    d[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
    d[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
    d[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
    d[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
    d[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
    d[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
    d[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
    d[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
    d[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
    d[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
    d[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
    d[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
    d[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
    return d;
  };

  m4.mul_v3 = function(m, v, d) {
    var x, y, z;
    if (d == null) {
      d = v;
    }
    x = v[0];
    y = v[1];
    z = v[2];
    d[0] = m[0] * x + m[4] * y + m[8] * z + m[12];
    d[1] = m[1] * x + m[5] * y + m[9] * z + m[13];
    d[2] = m[2] * x + m[6] * y + m[10] * z + m[14];
    return d;
  };

  m4.pos = function(m, v) {
    if (v == null) {
      v = v3.create();
    }
    v[0] = m[12];
    v[1] = m[13];
    v[2] = m[14];
    return v;
  };

  m4.set_pos = function(m, v) {
    m[12] = v[0];
    m[13] = v[1];
    m[14] = v[2];
    return v;
  };

  m4.forward = function(m, v) {
    if (v == null) {
      v = v3.create();
    }
    v[0] = -m[8];
    v[1] = -m[9];
    v[2] = -m[10];
    return v;
  };

  m4.distance = function(a, b) {
    var x, y, z;
    x = a[12] - b[12];
    y = a[13] - b[13];
    z = a[14] - b[14];
    return Math.sqrt(x * x + y * y + z * z);
  };

  m4.translate = function(m, v, d) {
    var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, x, y, z;
    x = v[0];
    y = v[1];
    z = v[2];
    if ((d == null) || m === d) {
      m[12] = m[0] * x + m[4] * y + m[8] * z + m[12];
      m[13] = m[1] * x + m[5] * y + m[9] * z + m[13];
      m[14] = m[2] * x + m[6] * y + m[10] * z + m[14];
      m[15] = m[3] * x + m[7] * y + m[11] * z + m[15];
      return m;
    }
    a00 = m[0];
    a01 = m[1];
    a02 = m[2];
    a03 = m[3];
    a10 = m[4];
    a11 = m[5];
    a12 = m[6];
    a13 = m[7];
    a20 = m[8];
    a21 = m[9];
    a22 = m[10];
    a23 = m[11];
    d[0] = a00;
    d[1] = a01;
    d[2] = a02;
    d[3] = a03;
    d[4] = a10;
    d[5] = a11;
    d[6] = a12;
    d[7] = a13;
    d[8] = a20;
    d[9] = a21;
    d[10] = a22;
    d[11] = a23;
    d[12] = a00 * x + a10 * y + a20 * z + m[12];
    d[13] = a01 * x + a11 * y + a21 * z + m[13];
    d[14] = a02 * x + a12 * y + a22 * z + m[14];
    d[15] = a03 * x + a13 * y + a23 * z + m[15];
    return d;
  };

  m4.scale = function(mat, vec, dest) {
    var x, y, z;
    x = vec[0];
    y = vec[1];
    z = vec[2];
    if ((dest == null) || mat === dest) {
      mat[0] *= x;
      mat[1] *= x;
      mat[2] *= x;
      mat[3] *= x;
      mat[4] *= y;
      mat[5] *= y;
      mat[6] *= y;
      mat[7] *= y;
      mat[8] *= z;
      mat[9] *= z;
      mat[10] *= z;
      mat[11] *= z;
      return mat;
    }
    dest[0] = mat[0] * x;
    dest[1] = mat[1] * x;
    dest[2] = mat[2] * x;
    dest[3] = mat[3] * x;
    dest[4] = mat[4] * y;
    dest[5] = mat[5] * y;
    dest[6] = mat[6] * y;
    dest[7] = mat[7] * y;
    dest[8] = mat[8] * z;
    dest[9] = mat[9] * z;
    dest[10] = mat[10] * z;
    dest[11] = mat[11] * z;
    dest[12] = mat[12];
    dest[13] = mat[13];
    dest[14] = mat[14];
    dest[15] = mat[15];
    return dest;
  };

  m4.create_rot = function(d, angle, axis) {
    var W, X, Y, Z, cosa, sina, xw, xx, xy, xz, yw, yy, yz, zw, zz;
    sina = Math.sin(angle / 2);
    cosa = Math.cos(angle / 2);
    X = axis[0] * sina;
    Y = axis[1] * sina;
    Z = axis[2] * sina;
    W = cosa;
    xx = X * X;
    xy = X * Y;
    xz = X * Z;
    xw = X * W;
    yy = Y * Y;
    yz = Y * Z;
    yw = Y * W;
    zz = Z * Z;
    zw = Z * W;
    d[0] = 1 - 2 * (yy + zz);
    d[1] = 2 * (xy - zw);
    d[2] = 2 * (xz + yw);
    d[4] = 2 * (xy + zw);
    d[5] = 1 - 2 * (xx + zz);
    d[6] = 2 * (yz - xw);
    d[8] = 2 * (xz - yw);
    d[9] = 2 * (yz + xw);
    d[10] = 1 - 2 * (xx + yy);
    d[3] = d[7] = d[11] = d[12] = d[13] = d[14] = 0;
    d[15] = 1;
    return d;
  };

  m4.set_rot_only = function(d, angle, axis) {
    var W, X, Y, Z, cosa, sina, xw, xx, xy, xz, yw, yy, yz, zw, zz;
    sina = Math.sin(angle / 2);
    cosa = Math.cos(angle / 2);
    X = axis[0] * sina;
    Y = axis[1] * sina;
    Z = axis[2] * sina;
    W = cosa;
    xx = X * X;
    xy = X * Y;
    xz = X * Z;
    xw = X * W;
    yy = Y * Y;
    yz = Y * Z;
    yw = Y * W;
    zz = Z * Z;
    zw = Z * W;
    d[0] = 1 - 2 * (yy + zz);
    d[1] = 2 * (xy - zw);
    d[2] = 2 * (xz + yw);
    d[4] = 2 * (xy + zw);
    d[5] = 1 - 2 * (xx + zz);
    d[6] = 2 * (yz - xw);
    d[8] = 2 * (xz - yw);
    d[9] = 2 * (yz + xw);
    d[10] = 1 - 2 * (xx + yy);
    d[3] = d[7] = d[11] = 0;
    d[15] = 1;
    return d;
  };

  m4.rotate = function(mat, angle, axis, dest) {
    var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, b00, b01, b02, b10, b11, b12, b20, b21, b22, c, len, s, t, x, y, z;
    x = axis[0];
    y = axis[1];
    z = axis[2];
    len = Math.sqrt(x * x + y * y + z * z);
    if (len === 0) {
      return null;
    }
    if (len !== 1) {
      x /= len;
      y /= len;
      z /= len;
    }
    s = Math.sin(angle);
    c = Math.cos(angle);
    t = 1 - c;
    a00 = mat[0];
    a01 = mat[1];
    a02 = mat[2];
    a03 = mat[3];
    a10 = mat[4];
    a11 = mat[5];
    a12 = mat[6];
    a13 = mat[7];
    a20 = mat[8];
    a21 = mat[9];
    a22 = mat[10];
    a23 = mat[11];
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c;
    if (dest == null) {
      dest = mat;
    } else if (mat !== dest) {
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    }
    print;
    dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
    dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
    dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
    dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
    dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
    dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
    dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
    dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
    dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
    dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
    dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
    dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
    return dest;
  };

  m4.rotateX = function(mat, angle, dest) {
    var a10, a11, a12, a13, a20, a21, a22, a23, c, s;
    s = Math.sin(angle);
    c = Math.cos(angle);
    a10 = mat[4];
    a11 = mat[5];
    a12 = mat[6];
    a13 = mat[7];
    a20 = mat[8];
    a21 = mat[9];
    a22 = mat[10];
    a23 = mat[11];
    if (dest == null) {
      dest = mat;
    } else if (mat !== dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    }
    dest[4] = a10 * c + a20 * s;
    dest[5] = a11 * c + a21 * s;
    dest[6] = a12 * c + a22 * s;
    dest[7] = a13 * c + a23 * s;
    dest[8] = a10 * -s + a20 * c;
    dest[9] = a11 * -s + a21 * c;
    dest[10] = a12 * -s + a22 * c;
    dest[11] = a13 * -s + a23 * c;
    return dest;
  };

  m4.rotateY = function(mat, angle, dest) {
    var a00, a01, a02, a03, a20, a21, a22, a23, c, s;
    s = Math.sin(angle);
    c = Math.cos(angle);
    a00 = mat[0];
    a01 = mat[1];
    a02 = mat[2];
    a03 = mat[3];
    a20 = mat[8];
    a21 = mat[9];
    a22 = mat[10];
    a23 = mat[11];
    if (dest == null) {
      dest = mat;
    } else if (mat !== dest) {
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    }
    dest[0] = a00 * c + a20 * -s;
    dest[1] = a01 * c + a21 * -s;
    dest[2] = a02 * c + a22 * -s;
    dest[3] = a03 * c + a23 * -s;
    dest[8] = a00 * s + a20 * c;
    dest[9] = a01 * s + a21 * c;
    dest[10] = a02 * s + a22 * c;
    dest[11] = a03 * s + a23 * c;
    return dest;
  };

  m4.rotateZ = function(mat, angle, dest) {
    var a00, a01, a02, a03, a10, a11, a12, a13, c, s;
    s = Math.sin(angle);
    c = Math.cos(angle);
    a00 = mat[0];
    a01 = mat[1];
    a02 = mat[2];
    a03 = mat[3];
    a10 = mat[4];
    a11 = mat[5];
    a12 = mat[6];
    a13 = mat[7];
    if (!dest) {
      dest = mat;
    } else if (mat !== dest) {
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    }
    dest[0] = a00 * c + a10 * s;
    dest[1] = a01 * c + a11 * s;
    dest[2] = a02 * c + a12 * s;
    dest[3] = a03 * c + a13 * s;
    dest[4] = a00 * -s + a10 * c;
    dest[5] = a01 * -s + a11 * c;
    dest[6] = a02 * -s + a12 * c;
    dest[7] = a03 * -s + a13 * c;
    return dest;
  };

  m4.get_hpr = function(m, v) {
    var heading, pitch, roll;
    if (v == null) {
      v = v3.create();
    }
    if (m[1] > 0.998) {
      heading = Math.atan2(m[2], m[10]);
      pitch = Math.PI / 2;
      roll = 0;
    } else if (m[1] < -0.998) {
      heading = Math.atan2(m[2], m[10]);
      pitch = -Math.PI / 2;
      roll = 0;
    } else {
      heading = Math.atan2(-m[8], m[0]);
      pitch = Math.atan2(-m[6], m[5]);
      roll = Math.asin(m[4]);
    }
    v[0] = heading;
    v[1] = pitch;
    v[2] = roll;
    return v;
  };

  m4.set_quat = function(dest, w, x, y, z) {
    var xw, xx, xy, xz, yw, yy, yz, zw, zz;
    xx = x * x;
    xy = x * y;
    xz = x * z;
    xw = x * w;
    yy = y * y;
    yz = y * z;
    yw = y * w;
    zz = z * z;
    zw = z * w;
    dest[0] = 1 - 2 * (yy + zz);
    dest[4] = 2 * (xy - zw);
    dest[8] = 2 * (xz + yw);
    dest[1] = 2 * (xy + zw);
    dest[5] = 1 - 2 * (xx + zz);
    dest[9] = 2 * (yz - xw);
    dest[2] = 2 * (xz - yw);
    dest[6] = 2 * (yz + xw);
    dest[10] = 1 - 2 * (xx + yy);
    return dest;
  };

  m4.frustum = function(left, right, bottom, top, near, far, dest) {
    var fn, rl, tb;
    if (dest == null) {
      dest = m4.create();
    }
    rl = right - left;
    tb = top - bottom;
    fn = far - near;
    dest[0] = (near * 2) / rl;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = 0;
    dest[5] = (near * 2) / tb;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = (right + left) / rl;
    dest[9] = (top + bottom) / tb;
    dest[10] = -(far + near) / fn;
    dest[11] = -1;
    dest[12] = 0;
    dest[13] = 0;
    dest[14] = -(far * near * 2) / fn;
    dest[15] = 0;
    return dest;
  };

  m4.perspective = function(fovy, aspect, near, far, dest) {
    var right, top;
    top = near * Math.tan(fovy * Math.PI / 360.0);
    right = top * aspect;
    return m4.frustum(-right, right, -top, top, near, far, dest);
  };

  m4.ortho = function(left, right, bottom, top, near, far, dest) {
    var fn, rl, tb;
    if (dest == null) {
      dest = m4.create();
    }
    rl = right - left;
    tb = top - bottom;
    fn = far - near;
    dest[0] = 2 / rl;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = 0;
    dest[5] = 2 / tb;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 0;
    dest[9] = 0;
    dest[10] = -2 / fn;
    dest[11] = 0;
    dest[12] = -(left + right) / rl;
    dest[13] = -(top + bottom) / tb;
    dest[14] = -(far + near) / fn;
    dest[15] = 1;
    return dest;
  };

  m4.lookAt = function(eye, center, up, dest) {
    var centerx, centery, centerz, eyex, eyey, eyez, len, upx, upy, upz, x0, x1, x2, y0, y1, y2, z0, z1, z2;
    if (!dest) {
      dest = m4.create();
    }
    eyex = eye[0];
    eyey = eye[1];
    eyez = eye[2];
    upx = up[0];
    upy = up[1];
    upz = up[2];
    centerx = center[0];
    centery = center[1];
    centerz = center[2];
    if (eyex === centerx && eyey === centery && eyez === centerz) {
      return m4.identity(dest);
    }
    z0 = eyex - center[0];
    z1 = eyey - center[1];
    z2 = eyez - center[2];
    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
      x0 = 0;
      x1 = 0;
      x2 = 0;
    } else {
      len = 1 / len;
      x0 *= len;
      x1 *= len;
      x2 *= len;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
      y0 = 0;
      y1 = 0;
      y2 = 0;
    } else {
      len = 1 / len;
      y0 *= len;
      y1 *= len;
      y2 *= len;
    }
    dest[0] = x0;
    dest[1] = y0;
    dest[2] = z0;
    dest[3] = 0;
    dest[4] = x1;
    dest[5] = y1;
    dest[6] = z1;
    dest[7] = 0;
    dest[8] = x2;
    dest[9] = y2;
    dest[10] = z2;
    dest[11] = 0;
    dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    dest[15] = 1;
    return dest;
  };

  m4.to_array = function(mat) {
    return [mat[0], mat[1], mat[2], mat[3], mat[4], mat[5], mat[6], mat[7], mat[8], mat[9], mat[10], mat[11], mat[12], mat[13], mat[14], mat[15]];
  };

  m4.str = function(mat) {
    return [f(mat[0]), f(mat[1]), f(mat[2]), f(mat[3]), "|", f(mat[4]), f(mat[5]), f(mat[6]), f(mat[7]), "|", f(mat[8]), f(mat[9]), f(mat[10]), f(mat[11]), "|", f(mat[12]), f(mat[13]), f(mat[14]), f(mat[15])].join(" ");
  };

  q4 = {};

}).call(this);
;


//from src/hspace.js
// Generated by CoffeeScript 1.10.0
(function() {
  var PRIME, clamp, overlapRectCircle;

  PRIME = 677;

  clamp = function(value, min, max) {
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  };

  overlapRectCircle = function(point, radius, x, y, w, h) {
    var dx, dy;
    dx = point[0] - clamp(point[0], x, x + w);
    dy = point[1] - clamp(point[1], y, y + h);
    return (dx * dx + dy * dy) <= (radius * radius);
  };

  window.HSpace = (function() {
    function HSpace(resolution) {
      this.resolution = resolution;
      this.hash = new Map();
    }

    HSpace.prototype.key = function(pos) {
      return Math.floor(pos[0] / this.resolution) + Math.floor(pos[1] / this.resolution) * PRIME;
    };

    HSpace.prototype.insert = function(thing) {
      var posKey, things;
      posKey = this.key(thing.pos);
      things = this.hash.get(posKey);
      if (things == null) {
        return this.hash.set(posKey, [thing]);
      } else {
        return things.push(thing);
      }
    };

    HSpace.prototype.findInRange = function(point, range, cb) {
      var d, i, j, k, len, posKey, px, py, ref, ref1, ref2, ref3, rx, ry, thing, things, x, y;
      sim.timeStart("findInRange");
      d = Math.floor(range / this.resolution) + 1;
      px = Math.floor(point[0] / this.resolution);
      py = Math.floor(point[1] / this.resolution);
      for (x = i = ref = -d, ref1 = d + 1; ref <= ref1 ? i < ref1 : i > ref1; x = ref <= ref1 ? ++i : --i) {
        for (y = j = ref2 = -d, ref3 = d + 1; ref2 <= ref3 ? j < ref3 : j > ref3; y = ref2 <= ref3 ? ++j : --j) {
          rx = px + x;
          ry = py + y;
          if (overlapRectCircle(point, range, rx * this.resolution, ry * this.resolution, this.resolution, this.resolution)) {
            posKey = rx + ry * PRIME;
            things = this.hash.get(posKey);
            if (things) {
              for (k = 0, len = things.length; k < len; k++) {
                thing = things[k];
                if (cb(thing)) {
                  sim.timeEnd("findInRange");
                  return;
                }
              }
            }
          }
        }
      }
      sim.timeEnd("findInRange");
    };

    return HSpace;

  })();

}).call(this);
;


//from src/zjson.js
// Generated by CoffeeScript 1.10.0

/*
zjson - binary json sirelizer with some strange features

* It does hte basic json to bin and bin to json
* You can Diffs and send thouse instead
* You can add a Strings table
    list wich both ends need to agree on
    usuly used for keys that are present in every msg
 */

(function() {
  var COLLECT_STATS, MAX16, MAX32, MAX8, toHex;

  Number.prototype.isInt = function(n) {
    return n !== "" && !isNaN(n) && Math.round(n) === n;
  };

  Number.prototype.isFloat = function(n) {
    return n !== "" && !isNaN(n) && Math.round(n) !== n;
  };

  MAX8 = 256;

  MAX16 = 256 * 256;

  MAX32 = 256 * 256 * 256 * 256;

  COLLECT_STATS = true;

  window.commonZJsonStrings = {};

  window.commonZJsonStringsGet = function() {
    var k, list;
    list = [];
    for (k in commonZJsonStrings) {
      if (commonZJsonStrings[k] > 2) {
        list.push(k);
      }
    }
    return console.log(list.sort().join("\n"));
  };

  window.commonZJsonBytePattrns = {};

  window.commonZJsonBytePattrnsGet = function() {
    var e, j, k, len, list, ref, results, v;
    list = [];
    for (k in commonZJsonBytePattrns) {
      v = commonZJsonBytePattrns[k];
      list.push([k, v]);
    }
    list = list.sort(function(a, b) {
      return b[1] - a[1];
    });
    ref = list.slice(0, 256);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      e = ref[j];
      results.push(console.log(e[0], e[1]));
    }
    return results;
  };

  window.ZJson = (function() {
    ZJson.prototype.JSON_MARK = 90;

    ZJson.prototype.JSON_DIFF_MARK = 91;

    ZJson.prototype.OBJECT_MARK8 = 0x10;

    ZJson.prototype.OBJECT_MARK16 = 0x11;

    ZJson.prototype.ARRAY_MARK8 = 0x20;

    ZJson.prototype.ARRAY_MARK16 = 0x21;

    ZJson.prototype.ARRAY0_MARK = 0x22;

    ZJson.prototype.ARRAY1_MARK = 0x23;

    ZJson.prototype.ARRAY2_MARK = 0x24;

    ZJson.prototype.ARRAY3_MARK = 0x25;

    ZJson.prototype.ARRAY4_MARK = 0x26;

    ZJson.prototype.STRING_MARK8 = 0x30;

    ZJson.prototype.STRING_MARK16 = 0x31;

    ZJson.prototype.STRING_TABLE_MARK = 0x32;

    ZJson.prototype.NUMBER_MARK8 = 0x40;

    ZJson.prototype.NUMBER_MARK16 = 0x41;

    ZJson.prototype.NUMBER_MARK32 = 0x42;

    ZJson.prototype.NUMBER_MARK32F = 0x43;

    ZJson.prototype.BOOL_TRUE_MARK = 0x50;

    ZJson.prototype.BOOL_FALSE_MARK = 0x51;

    ZJson.prototype.NULL_MARK = 0x52;

    ZJson.prototype.UNDEFINED_MARK = 0x53;

    function ZJson(strTable) {
      var i, j, len, str;
      if (strTable == null) {
        strTable = null;
      }
      this.buffSize = 1024 * 1024;
      this.buffer = new ArrayBuffer(this.buffSize);
      this.dv = new DataView(this.buffer);
      this.str2num = new Map();
      this.num2str = new Map();
      if (strTable) {
        for (i = j = 0, len = strTable.length; j < len; i = ++j) {
          str = strTable[i];
          this.str2num.set(str, i);
          this.num2str.set(i, str);
        }
        if (i > MAX16) {
          throw "Too many strings in the string table";
        }
      }
    }

    ZJson.prototype.dumpDv = function(json) {
      var buf, dv, end, i, j, ref;
      this.i = 0;
      this.dumpNode(json);
      end = "END";
      this.dv.setUint8(this.i, end.charCodeAt(0));
      this.i += 1;
      this.dv.setUint8(this.i, end.charCodeAt(1));
      this.i += 1;
      this.dv.setUint8(this.i, end.charCodeAt(2));
      this.i += 1;
      buf = new ArrayBuffer(this.i);
      dv = new DataView(buf);
      for (i = j = 0, ref = this.i; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        dv.setUint8(i, this.dv.getUint8(i));
      }
      return dv;
    };

    ZJson.prototype.dumpNode = function(json) {
      var e, i, j, k, l, len, length, num, ref, results, results1, results2, v;
      if (json === null) {
        this.dv.setUint8(this.i, this.NULL_MARK);
        this.i += 1;
        return;
      }
      if (json === void 0) {
        this.dv.setUint8(this.i, this.UNDEFINED_MARK);
        this.i += 1;
        return;
      }
      switch (typeof json) {
        case "object":
          if (json.length != null) {
            length = json.length;
            if (length === 0) {
              this.dv.setUint8(this.i, this.ARRAY0_MARK);
              this.i += 1;
            } else if (length === 1) {
              this.dv.setUint8(this.i, this.ARRAY1_MARK);
              this.i += 1;
            } else if (length === 2) {
              this.dv.setUint8(this.i, this.ARRAY2_MARK);
              this.i += 1;
            } else if (length === 3) {
              this.dv.setUint8(this.i, this.ARRAY3_MARK);
              this.i += 1;
            } else if (length === 4) {
              this.dv.setUint8(this.i, this.ARRAY4_MARK);
              this.i += 1;
            } else if (length < MAX8) {
              this.dv.setUint8(this.i, this.ARRAY_MARK8);
              this.i += 1;
              this.dv.setUint8(this.i, length);
              this.i += 1;
            } else if (length < MAX16) {
              this.dv.setUint8(this.i, this.ARRAY_MARK16);
              this.i += 1;
              this.dv.setUint16(this.i, length);
              this.i += 2;
            } else {
              throw "Array size of " + length + " not supproted";
            }
            results = [];
            for (j = 0, len = json.length; j < len; j++) {
              e = json[j];
              results.push(this.dumpNode(e));
            }
            return results;
          } else {
            length = 0;
            for (k in json) {
              v = json[k];
              length += 1;
            }
            if (length < MAX8) {
              this.dv.setUint8(this.i, this.OBJECT_MARK8);
              this.i += 1;
              this.dv.setUint8(this.i, length);
              this.i += 1;
            } else if (length < MAX16) {
              this.dv.setUint8(this.i, this.OBJECT_MARK16);
              this.i += 1;
              this.dv.setUint16(this.i, length);
              this.i += 2;
            } else {
              throw "Object size of " + length + " not supproted";
            }
            results1 = [];
            for (k in json) {
              v = json[k];
              this.dumpNode(k);
              results1.push(this.dumpNode(v));
            }
            return results1;
          }
          break;
        case "number":
          if (Math.round(json) === json && json > 0 && json < 256 * 256 * 256 * 256) {
            if (json < MAX8) {
              this.dv.setUint8(this.i, this.NUMBER_MARK8);
              this.i += 1;
              this.dv.setUint8(this.i, json);
              return this.i += 1;
            } else if (json < MAX16) {
              this.dv.setUint8(this.i, this.NUMBER_MARK16);
              this.i += 1;
              this.dv.setUint16(this.i, json);
              return this.i += 2;
            } else if (json < MAX32) {
              this.dv.setUint8(this.i, this.NUMBER_MARK32);
              this.i += 1;
              this.dv.setUint32(this.i, json);
              return this.i += 4;
            } else {
              throw "Invalid number integer " + json + " not supported";
            }
          } else {
            this.dv.setUint8(this.i, this.NUMBER_MARK32F);
            this.i += 1;
            this.dv.setFloat32(this.i, json);
            return this.i += 4;
          }
          break;
        case "string":
          num = this.str2num.get(json);
          if (num != null) {
            this.dv.setUint8(this.i, this.STRING_TABLE_MARK);
            this.i += 1;
            this.dv.setUint16(this.i, num);
            return this.i += 2;
          } else {
            if (COLLECT_STATS) {
              commonZJsonStrings[json] = (commonZJsonStrings[json] || 0) + 1;
            }
            length = json.length;
            if (length < MAX8) {
              this.dv.setUint8(this.i, this.STRING_MARK8);
              this.i += 1;
              this.dv.setUint8(this.i, json.length);
              this.i += 1;
            } else if (length < MAX16) {
              this.dv.setUint8(this.i, this.STRING_MARK16);
              this.i += 1;
              this.dv.setUint16(this.i, json.length);
              this.i += 2;
            } else {
              throw "String size of " + length + " not supproted";
            }
            results2 = [];
            for (i = l = 0, ref = length; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
              this.dv.setUint8(this.i, json.charCodeAt(i));
              results2.push(this.i += 1);
            }
            return results2;
          }
          break;
        case "boolean":
          if (json === true) {
            this.dv.setUint8(this.i, this.BOOL_TRUE_MARK);
            return this.i += 1;
          } else {
            this.dv.setUint8(this.i, this.BOOL_FALSE_MARK);
            return this.i += 1;
          }
          break;
        default:
          throw "Type " + (typeof json) + " not supported";
      }
    };

    ZJson.prototype.loadDv = function(dv) {
      var json;
      this.i = 0;
      json = this.loadNode(dv);

      /*
      if COLLECT_STATS
           * look at common byte patterns
          bp = commonZJsonBytePattrns
          for i in [0...dv.byteLength]
              for pattern in [1...4]
                  if i + pattern < dv.byteLength
                      arr = []
                      for n in [0...pattern]
                          arr.push(dv.getUint8(i + n))
                      key = arr.join(",")
                      bp[key] = (bp[key] or 0) + 1
       */
      return json;
    };

    ZJson.prototype.loadNode = function(dv) {
      var count, e, i, j, json, k, l, length, m, mark, num, ref, ref1, ref2, v;
      mark = dv.getUint8(this.i);
      this.i += 1;
      switch (mark) {
        case 0:
          throw "Zero mark error";
          break;
        case this.ARRAY_MARK8:
        case this.ARRAY_MARK16:
        case this.ARRAY0_MARK:
        case this.ARRAY1_MARK:
        case this.ARRAY2_MARK:
        case this.ARRAY3_MARK:
        case this.ARRAY4_MARK:
          if (mark === this.ARRAY0_MARK) {
            length = 0;
          } else if (mark === this.ARRAY1_MARK) {
            length = 1;
          } else if (mark === this.ARRAY2_MARK) {
            length = 2;
          } else if (mark === this.ARRAY3_MARK) {
            length = 3;
          } else if (mark === this.ARRAY4_MARK) {
            length = 4;
          } else if (mark === this.ARRAY_MARK8) {
            length = dv.getUint8(this.i);
            this.i += 1;
          } else if (mark === this.ARRAY_MARK16) {
            length = dv.getUint16(this.i);
            this.i += 2;
          } else {
            throw "Arrays mark error" + mark;
          }
          json = [];
          for (count = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; count = 0 <= ref ? ++j : --j) {
            e = this.loadNode(dv);
            json.push(e);
          }
          return json;
        case this.OBJECT_MARK8:
        case this.OBJECT_MARK16:
          if (mark === this.OBJECT_MARK8) {
            length = dv.getUint8(this.i);
            this.i += 1;
          } else if (mark === this.OBJECT_MARK16) {
            length = dv.getUint16(this.i);
            this.i += 2;
          } else {
            throw "Objext mark error";
          }
          json = {};
          for (count = l = 0, ref1 = length; 0 <= ref1 ? l < ref1 : l > ref1; count = 0 <= ref1 ? ++l : --l) {
            k = this.loadNode(dv);
            v = this.loadNode(dv);
            json[k] = v;
          }
          return json;
        case this.STRING_TABLE_MARK:
          num = dv.getUint16(this.i);
          this.i += 2;
          return this.num2str.get(num);
        case this.STRING_MARK8:
        case this.STRING_MARK16:
          if (mark === this.STRING_MARK8) {
            length = dv.getUint8(this.i);
            this.i += 1;
          } else if (mark === this.STRING_MARK16) {
            length = dv.getUint16(this.i);
            this.i += 2;
          } else {
            throw "String mark error";
          }
          json = "";
          for (i = m = 0, ref2 = length; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
            json += String.fromCharCode(dv.getUint8(this.i));
            this.i += 1;
          }
          return json;
        case this.NUMBER_MARK8:
          json = dv.getUint8(this.i);
          this.i += 1;
          return json;
        case this.NUMBER_MARK16:
          json = dv.getUint16(this.i);
          this.i += 2;
          return json;
        case this.NUMBER_MARK32:
          json = dv.getUint32(this.i);
          this.i += 4;
          return json;
        case this.NUMBER_MARK32F:
          json = dv.getFloat32(this.i);
          this.i += 4;
          return json;
        case this.BOOL_TRUE_MARK:
          return true;
        case this.BOOL_FALSE_MARK:
          return false;
        case this.NULL_MARK:
          return null;
        case this.UNDEFINED_MARK:
          return void 0;
        default:
          throw "Mark " + mark + " unkown";
      }
    };

    return ZJson;

  })();

  toHex = function(number, n) {
    var hex;
    if (n == null) {
      n = 4;
    }
    hex = number.toString(16);
    while (hex.length < n) {
      hex = "0" + hex;
    }
    return hex;
  };

  window.hexDisplay = function(dv) {
    var address, ascii, byte, bytes, i, j, r, results;
    i = 0;
    results = [];
    while (i < dv.byteLength) {
      address = toHex(i, 4);
      bytes = [];
      ascii = [];
      for (r = j = 0; j < 16; r = ++j) {
        if (i >= dv.byteLength) {
          bytes.push("  ");
          ascii.push(" ");
        } else {
          byte = dv.getUint8(i);
          bytes.push(toHex(byte, 2));
          if ((20 < byte && byte < 128)) {
            ascii.push(String.fromCharCode(byte));
          } else {
            ascii.push(".");
          }
        }
        i += 1;
      }
      results.push(console.log(address + "   " + bytes.join(" ") + "   " + ascii.join("")));
    }
    return results;
  };

}).call(this);
;


//from src/protocol.js
// Generated by CoffeeScript 1.10.0
(function() {
  window.prot = {};

  prot.commonWords = "1v1\n1v1r\n2v2\n3v3\n@attackTypes enemy @unitTypes within #m\n@attackTypes enemy that is @absoluteTypes then # within #m\n@attackTypes enemy that is @relativeTypes and @relativeTypes within #m\n@attackTypes enemy within #m\n@capTypes Command Points within #m\naction\naddAi\nai\nAi1\nAi3\nAi4\naiRules\nalpha\nAOEWarhead\napm\nArtilleryTurret\nAttack\nAutoTurret\nAvoid #dps danger areas\nAvoid everything\nAvoid over #damage shots\nBackstab\nBattery1x1\nBattery1x2\nBattery2x1\nBattery2x2\nBattleship\nbeta\nBomb\nBomber\nBomber\nBombGun\nbuildQ\nbuildRq\nBulletSpeedMod\nburn\ncapping\ncapps\nCapture\nCarrier\nCarrier\nCircle\ncloak\nCloak Counter Need\nCloaked\nCloakGenerator\ncolor\nCommandPoint\nconnected\nCruiser\nDamageMod\ndead\nDestroyer\nDestroyer\ndir\nDroneBody\nEMPGun\nEMPGun2\nEmpty\nEnemy Army Middle\nEnemy Spawn\nenergy\nEnergyTransfer\nEngine01\nEngine02\nEngine03\nEngine04\nEngine05\nEngine06\nEngine07\nFaction1\nFaction2\nFaction3\nFaction4\nFaction5\nFaction6\nFaction7\nFaster\nField # at priority #\nField # at start\nField # for # of @needTypes at priority #\nField # for # of enemy @unitTypes at priority #\nField # for # of ship in slot # at priority #\nField # when money over # at priority #\nFighter\nfillColor\nFind recharger\nFind units that are out of energy\nFlackTurret\nFlameTurret\nFlee\nFlee enemies\nFollow\nFriendly Army Middle\nFriendly Spawn\nFriendly Spawn\nfullUpdate\nghostCopy\ngoto\nGoto @locationTypes\nGuard\nHAarmor1x2Curved\nHArmor1x1\nHArmor1x1Angle\nHArmor1x1AngleBack\nHArmor1x2\nHArmor1x2Back1\nHArmor1x2Back2\nHArmor1x2Curved2\nHArmor1x2Font1\nHArmor1x2Front2\nHArmor2x1\nHArmor2x1Curved2\nHArmor2x2\nHArmor2x2Angle\nHArmor2x2AngleBack\nHArmor2x2Back1\nHArmor2x2Back2\nHArmor2x2Curved\nHArmor2x2Front1\nHArmor2x2Front2\nHeavyBeamTurret\nHeavyPDTurret\nHold Position\nholdPosition\nhost\nhp\nimage\nimg/debree/acloud01.png\nimg/debree/acloud02.png\nimg/debree/acloud03.png\nimg/debree/acloud04.png\nimg/debree/bigdebree01.png\nimg/debree/bigdebree02.png\nimg/debree/bigdebree03.png\nimg/debree/bigdebree04.png\nimg/debree/bigdebree05.png\nimg/debree/bigdebree06.png\nimg/debree/bigdebree07.png\nimg/debree/bigdebree08.png\nimg/debree/bigdebree09.png\nimg/debree/bigdebree10.png\nimg/debree/bigdebree11.png\nimg/debree/bigdebree12.png\nimg/debree/civ01.png\nimg/debree/civ02.png\nimg/debree/civ03.png\nimg/debree/civ04.png\nimg/debree/civ05.png\nimg/debree/debree01.png\nimg/debree/debree02.png\nimg/debree/debree03.png\nimg/debree/debree04.png\nimg/debree/debree05.png\nimg/debree/debree06.png\nimg/debree/debree07.png\nimg/debree/debree08.png\nimg/debree/debree09.png\nimg/debree/debree10.png\nimg/debree/debree11.png\nimg/debree/debree12.png\nimg/debree/debree13.png\nimg/debree/debree14.png\nimg/debree/debree15.png\nimg/debree/debree16.png\nimg/debree/debree17.png\nimg/debree/debree18.png\nimg/debree/debree19.png\nimg/debree/debree20.png\nimg/debree/debree21.png\nimg/debree/debree22.png\nimg/debree/debree23.png\nimg/debree/debree24.png\nimg/debree/debree25.png\nimg/debree/gcloud01.png\nimg/debree/gcloud02.png\nimg/debree/gcloud03.png\nimg/debree/gcloud04.png\nimg/debree/scloud01.png\nimg/debree/scloud02.png\nimg/debree/scloud03.png\nimg/debree/scloud04.png\nimg/debree/vcloud01.png\nimg/debree/vcloud02.png\nimg/debree/vcloud03.png\nimg/debree/vcloud04.png\nimg/dodads/bigdodad01.png\nimg/dodads/bigdodad02.png\nimg/dodads/bigdodad03.png\nimg/dodads/bigdodad04.png\nimg/dodads/bigdodad05.png\nimg/dodads/meddodad01.png\nimg/dodads/meddodad02.png\nimg/dodads/meddodad03.png\nimg/dodads/meddodad04.png\nimg/point02.png\nimg/rocks/lrock01.png\nimg/rocks/lrock02.png\nimg/rocks/lrock03.png\nimg/rocks/lrock04.png\nimg/rocks/lrock05.png\nimg/rocks/mrock01.png\nimg/rocks/mrock02.png\nimg/rocks/mrock03.png\nimg/rocks/mrock04.png\nimg/rocks/mrock05.png\nimg/rocks/mrock06.png\nimg/rocks/srock01.png\nimg/rocks/srock02.png\nimg/rocks/srock03.png\nimg/rocks/srock04.png\nimg/rocks/srock05.png\nimg/rocks/srock06.png\nimg/rocks/srock07.png\nimg/rocks/srock08.png\nInterceptor\nJumpEngine\nkickPlayer\nkills\nKite\nLess Brawling Value\nLess DPS\nLess expensive\nLess HP\nLess Range\nLetter0\nLetter1\nLetter2\nLetter3\nLetter4\nLetter5\nLetter6\nLetter7\nLetter8\nLetter9\nLetterA\nLetterB\nLetterC\nLetterD\nLetterDot\nLetterE\nLetterF\nLetterG\nLetterH\nLetterI\nLetterJ\nLetterK\nLetterL\nLetterM\nLetterN\nLetterO\nLetterP\nLetterPound\nLetterQ\nLetterR\nLetterS\nLetterT\nLetterU\nLetterV\nLetterW\nLetterX\nLetterY\nLetterZ\nLightBeamTurret\nmessage\nMineTurret\nMissileTurret\nmoney\nmoneyEarned\nMore Arc\nMore Brawling Value\nMore DPS\nMore expensive\nMore HP\nMore Range\nMore Range\nMount10Range\nMount180\nMount270\nMount30\nMount360\nMount360Micro\nMount90\nmouse\nmouseMove\nMove\nmoveOrder\nname\nNo PD\nNot Cloaked\nnumbers\nOverKillAi\nowner\nPad2x2\npartId\nparts\npartTargetId\npartWorking\nPDTurret\nperf\nPlasmaTurret\nplayerJoin\nplayerNumber\nplayers\nplayerSelected\npos\nProtect\nradius\nrallyPoint\nRam\nReactor1x1\nReactor1x2\nReactor2x1\nReactor2x2\nReloaderMod\nRest\nRest\nRingTurret\nRock\nrockColor\nrot\nrunning\nScout\nSelf Destruct\nsend other\nsend players\nsend things\nsend things fields\nsend things parts\nsend things roots\nsend zJson\nserverType\nShadowNArmor1x1\nShadowNArmor1x2\nShadowNArmor2x1\nShadowNArmor2x2\nShadowNArmor2x2Angle\nShapedWarhead\nshield\nShieldGen1x1\nShieldGen2x1\nShieldGen2x2\nside\nsim\nsize\nSlower\nSniperGun\nSolar1x1\nSolar2x2\nSolar3x3\nspacesRebuild\nSpawnPoint\nspec\nsplayers\nspotColor\nSpread to\nstartGame\nStasisField\nstate\nStay at range\nStay in #m range of friendly units\nStay in #m range of slot # units\nStayaway in #m range from slot # units\nstep\nsthings\nStop\nstopOrder\nStripe1x1\nStripe1x1Corner\nStripe1x2\nStripe2x1\nStripe2x2\nStripe2x2Corner\nStripe2x2Round\nStripeDouble2x1\nStripeDouble2x2\nStronger\nSwarmer\nSymbolDecal1\nSymbolDecal10\nSymbolDecal11\nSymbolDecal12\nSymbolDecal13\nSymbolDecal14\nSymbolDecal15\nSymbolDecal16\nSymbolDecal17\nSymbolDecal18\nSymbolDecal19\nSymbolDecal2\nSymbolDecal20\nSymbolDecal21\nSymbolDecal22\nSymbolDecal23\nSymbolDecal24\nSymbolDecal3\nSymbolDecal4\nSymbolDecal5\nSymbolDecal6\nSymbolDecal7\nSymbolDecal8\nSymbolDecal9\nTargetingMod\nTeslaTurret\ntheme\nthingId\nthings\ntimeings\nTorpTurret\ntreeform\nTry to field # every # seconds\ntype\nUArmor1x1\nUArmor1x1Angle\nUArmor1x1AngleBack\nUArmor1x1Notch1\nUArmor1x1Notch2\nUArmor1x1Spike\nUArmor1x2\nUArmor1x2Notch1\nUArmor1x2Notch2\nUArmor2x1\nUArmor2x2\nUnit\nunitsBuilt\nunitsCollide\nvalidBar\nVArmor1x1\nVArmor1x1Angle\nVArmor1x1Corner1\nVArmor1x1Corner2\nVArmor1x1Corner3\nVArmor1x1CornerBack\nVArmor1x1Curve\nVArmor1x1Hook\nVArmor1x2\nVArmor1x2Corner4\nVArmor1x2Curved\nVArmor1x2End\nVArmor1x2IBeam\nVArmor1x2SideBar\nVArmor1x2SideBarFilled\nVArmor2x1Curved\nVArmor2x2\nVArmor2x2Angle\nVArmor2x2Curve\nVArmor2x2Curved\nvel\nwarpIn\nWavePullTurret\nWavePushTurret\nWeaker\nWhen #% of energy, @chargeTypes\nWing1x1Angle\nWing1x1Notch\nWing1x1Round\nWing1x2\nWing2x1\nWing2x2\nwinningSide\nz".split("\n");


  /*
  afk
  waiting
   */

}).call(this);
;


//from src/utils.js
// Generated by CoffeeScript 1.10.0
(function() {
  var stats,
    slice = [].slice,
    hasProp = {}.hasOwnProperty;

  window.print = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return console.log.apply(console, args);
  };

  window.choose = function(list) {
    return list[Math.floor(Math.random() * list.length)];
  };

  window.chooseInt = function(a, b) {
    return Math.floor(a + Math.random() * (b - a));
  };

  window.json = {
    dumps: JSON.stringify,
    loads: JSON.parse
  };

  window.deepCopy = function(src) {
    var i, j, key, len, ret, thing;
    if (Array.isArray(src)) {
      ret = [];
      for (i = j = 0, len = src.length; j < len; i = ++j) {
        thing = src[i];
        ret[i] = deepCopy(thing);
      }
      return ret;
    }
    if (typeof src === 'object') {
      ret = {};
      for (key in src) {
        if (!hasProp.call(src, key)) continue;
        ret[key] = deepCopy(src[key]);
      }
      return ret;
    }
    return src;
  };

  window.deepEq = function(a, b) {
    return JSON.stringify(a) === JSON.stringify(b);
  };

  window.formatTime = function(t) {
    var minutes, seconds;
    t = Math.floor(t);
    seconds = t % 60;
    minutes = Math.floor(t / 60);
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    return minutes + ":" + seconds;
  };

  window.track = function(name, kargs) {
    var xhr;
    if (!kargs) {
      kargs = {};
    }
    console.log("track:", name, JSON.stringify(kargs));
    if (window.location && window.location.href.indexOf("gamedev.html") !== -1) {
      return;
    }
    xhr = new XMLHttpRequest();
    xhr.open("POST", "https://andrelytics.com/track");
    kargs.name = "game_" + name;
    kargs.api_key = "pub_H4TvK8mxcRPextxxIHOhtstH7YRCAHM2";
    kargs.user_iden = typeof commander !== "undefined" && commander !== null ? commander.id : void 0;
    kargs.user_name = typeof commander !== "undefined" && commander !== null ? commander.name : void 0;
    kargs.version = window.VERSION + "." + MINOR_VERSION;
    return xhr.send(JSON.stringify(kargs));
  };

  window.after = function(ms, fn) {
    return setTimeout(fn, ms);
  };

  window.doAfter = function(ms, fn) {
    return setTimeout(fn, ms);
  };

  window.now = function() {
    var n, ref, s;
    if (typeof process !== "undefined" && process !== null) {
      ref = process.hrtime(), s = ref[0], n = ref[1];
      return (s * 1000000 + n / 1000) / 1000;
    } else {
      return performance.now();
    }
  };

  window.ab2str = function(buf) {
    var bufView, i, j, ref, str;
    str = "";
    bufView = new Uint8Array(buf);
    for (i = j = 0, ref = bufView.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      str += String.fromCharCode(bufView[i]);
    }
    return str;
  };

  window.str2ab = function(str) {
    var buf, bufView, i, j, ref;
    buf = new ArrayBuffer(str.length);
    bufView = new Uint8Array(buf);
    for (i = j = 0, ref = str.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      bufView[i] = str.charCodeAt(i);
    }
    return buf;
  };

  window.dv2str = function(dv) {
    var i, j, ref, str;
    str = "";
    for (i = j = 0, ref = dv.byteLength; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      str += String.fromCharCode(dv.getUint8(i));
    }
    return str;
  };

  window.str2dv = function(str) {
    return new DataView(str2ab(str));
  };

  window.strBuff = function(buf) {
    var j, len, n, str, u8;
    str = "";
    u8 = new Uint8Array(buf);
    for (j = 0, len = u8.length; j < len; j++) {
      n = u8[j];
      str += n + " ";
    }
    return str;
  };

  window.randColor = function(a) {
    return [Math.floor(a + (255 - a) * Math.random()), Math.floor(a + (255 - a) * Math.random()), Math.floor(a + (255 - a) * Math.random()), 255];
  };

  window.stats = stats = {
    fps: {},
    net: {},
    sim: {}
  };

  stats.fpsAdd = function(n) {
    if (n == null) {
      n = 1;
    }
    return stats.add(stats.fps, n);
  };

  stats.netAdd = function(n) {
    if (n == null) {
      n = 1;
    }
    return stats.add(stats.net, n);
  };

  stats.simAdd = function(n) {
    if (n == null) {
      n = 1;
    }
    return stats.add(stats.sim, n);
  };

  stats.add = function(frames, n) {
    var sec;
    sec = Math.floor(Date.now() / 1000);
    if (frames[sec] != null) {
      return frames[sec] += n;
    } else {
      return frames[sec] = n;
    }
  };

  stats.draw = function() {
    if (!control.perf) {
      return;
    }
    stats.drawFrames(stats.fps, 10, 60, 160);
    stats.drawFrames(stats.sim, 1, 16, 320);
    return stats.drawFrames(stats.net, 1024 * 10, 1024, 720);
  };

  stats.drawFrames = function(frames, div, max, yadj) {
    var color, j, nFrames, results, sec, sx, sy, x, y;
    sec = Math.floor(Date.now() / 1000);
    results = [];
    for (x = j = 0; j < 31; x = ++j) {
      sx = -x * 16 + window.innerWidth - 20;
      sy = window.innerHeight - yadj;
      nFrames = frames[sec - 30 + x] || 0;
      color = [255, 255, 255, 100];
      results.push((function() {
        var k, ref, results1;
        results1 = [];
        for (y = k = 0, ref = Math.ceil(nFrames / div); 0 <= ref ? k < ref : k > ref; y = 0 <= ref ? ++k : --k) {
          results1.push(baseAtlas.drawSprite("parts/sel1x1.png", [sx, sy - y * 16], [.5, .5], 0, color));
        }
        return results1;
      })());
    }
    return results;
  };

  window.sha1 = function(msg)
{
  fcc = String.fromCharCode;
  function rotl(n,s) { return n<<s|n>>>32-s; };
  function tohex(i) { for(var h="", s=28;;s-=4) { h+=(i>>>s&0xf).toString(16); if(!s) return h; } };
  var H0=0x67452301, H1=0xEFCDAB89, H2=0x98BADCFE, H3=0x10325476, H4=0xC3D2E1F0, M=0x0ffffffff;
  var i, t, W=new Array(80), ml=msg.length, wa=new Array();
  msg += fcc(0x80);
  while(msg.length%4) msg+=fcc(0);
  for(i=0;i<msg.length;i+=4) wa.push(msg.charCodeAt(i)<<24|msg.charCodeAt(i+1)<<16|msg.charCodeAt(i+2)<<8|msg.charCodeAt(i+3));
  while(wa.length%16!=14) wa.push(0);
  wa.push(ml>>>29),wa.push((ml<<3)&M);
  for( var bo=0;bo<wa.length;bo+=16 ) {
    for(i=0;i<16;i++) W[i]=wa[bo+i];
    for(i=16;i<=79;i++) W[i]=rotl(W[i-3]^W[i-8]^W[i-14]^W[i-16],1);
    var A=H0, B=H1, C=H2, D=H3, E=H4;
    for(i=0 ;i<=19;i++) t=(rotl(A,5)+(B&C|~B&D)+E+W[i]+0x5A827999)&M, E=D, D=C, C=rotl(B,30), B=A, A=t;
    for(i=20;i<=39;i++) t=(rotl(A,5)+(B^C^D)+E+W[i]+0x6ED9EBA1)&M, E=D, D=C, C=rotl(B,30), B=A, A=t;
    for(i=40;i<=59;i++) t=(rotl(A,5)+(B&C|B&D|C&D)+E+W[i]+0x8F1BBCDC)&M, E=D, D=C, C=rotl(B,30), B=A, A=t;
    for(i=60;i<=79;i++) t=(rotl(A,5)+(B^C^D)+E+W[i]+0xCA62C1D6)&M, E=D, D=C, C=rotl(B,30), B=A, A=t;
    H0=H0+A&M;H1=H1+B&M;H2=H2+C&M;H3=H3+D&M;H4=H4+E&M;
  }
  return tohex(H0)+tohex(H1)+tohex(H2)+tohex(H3)+tohex(H4);
};

  Array.prototype.last = function() {
    return this[this.length - 1];
  };

}).call(this);
;


//from src/colors.js
// Generated by CoffeeScript 1.10.0
(function() {
  var hex, j, len, ref;

  window.colors = {};

  colors.nice = [];

  colors.niceHex = ["D24D57", "F22613", "D91E18", "96281B", "EF4836", "D64541", "C0392B", "CF000F", "E74C3C", "DB0A5B", "F64747", "F1A9A0", "D2527F", "E08283", "F62459", "E26A6A", "DCC6E0", "663399", "674172", "AEA8D3", "913D88", "9A12B3", "BF55EC", "BE90D4", "8E44AD", "9B59B6", "446CB3", "E4F1FE", "4183D7", "59ABE3", "81CFE0", "52B3D9", "C5EFF7", "22A7F0", "3498DB", "2C3E50", "19B5FE", "336E7B", "22313F", "6BB9F0", "1E8BC3", "3A539B", "34495E", "67809F", "2574A9", "1F3A93", "89C4F4", "4B77BE", "5C97BF", "4ECDC4", "A2DED0", "87D37C", "90C695", "26A65B", "03C9A9", "68C3A3", "65C6BB", "1BBC9B", "1BA39C", "66CC99", "BADA55", "36D7B7", "C8F7C5", "86E2D5", "2ECC71", "16a085", "3FC380", "019875", "03A678", "4DAF7C", "2ABB9B", "00B16A", "1E824C", "049372", "26C281", "F5D76E", "F7CA18", "F4D03F", "e9d460", "FDE3A7", "F89406", "EB9532", "E87E04", "F4B350", "F2784B", "EB974E", "F5AB35", "D35400", "F39C12", "F9690E", "F9BF3B", "F27935", "E67E22", "ececec", "6C7A89", "D2D7D3", "EEEEEE", "BDC3C7", "ECF0F1", "95A5A6", "DADFE1", "ABB7B7", "F2F1EF", "BFBFBF"];

  colors.validate = function(a) {
    var b, i, j, ref;
    b = [0, 0, 0, 0];
    for (i = j = 0; j < 4; i = ++j) {
      if (Number.isInteger(a[i]) && (0 <= (ref = a[i]) && ref < 256)) {
        b[i] = Math.floor(a[i]);
      }
    }
    return b;
  };

  colors.brightness = function(c) {
    return (c[0] + c[1] + c[2]) / 3;
  };

  colors.copy = function(c) {
    return [c[0], c[1], c[2], c[3]];
  };

  colors.blackOrWhite = function(c) {
    if ((c[0] + c[1] + c[2]) / 3 > 128) {
      return [0, 0, 0, 255];
    } else {
      return [255, 255, 255, 255];
    }
  };

  colors.hsl2rgb = function(c) {
    var a, b, g, h, hue2rgb, l, p, q, r, s;
    h = c[0], s = c[1], l = c[2], a = c[3];
    if (s === 0) {
      r = g = b = l;
    } else {
      hue2rgb = function(p, q, t) {
        if (t < 0) {
          t += 1;
        }
        if (t > 1) {
          t -= 1;
        }
        if (t < 1 / 6) {
          return p + (q - p) * 6 * t;
        }
        if (t < 1 / 2) {
          return q;
        }
        if (t < 2 / 3) {
          return p + (q - p) * (2 / 3 - t) * 6;
        }
        return p;
      };
      q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a];
  };

  colors.rgb2hsl = function(c) {
    var a, b, d, g, h, l, max, min, r, s;
    r = c[0], g = c[1], b = c[2], a = c[3];
    r /= 255;
    g /= 255;
    b /= 255;
    max = Math.max(r, g, b);
    min = Math.min(r, g, b);
    l = (max + min) / 2;
    if (max === min) {
      h = s = 0;
    } else {
      d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
      }
      h /= 6;
    }
    return [h, s, l, a];
  };

  colors.fromHex = function(c) {
    var a, b, g, r;
    r = parseInt(c.slice(0, 2), 16);
    g = parseInt(c.slice(2, 4), 16);
    b = parseInt(c.slice(4, 6), 16);
    a = 255;
    return colors.validate([r, g, b, a]);
  };

  colors.toHex = function(c) {
    var chr;
    chr = function(i) {
      if (!i) {
        return "00";
      }
      i = i.toString(16);
      if (i.length === 1) {
        i = "0" + i;
      }
      return i;
    };
    return chr(c[0]) + chr(c[1]) + chr(c[2]);
  };

  colors.cssRgba = function(c) {
    return "rgba(" + (c[0] || 0) + "," + (c[1] || 0) + "," + (c[2] || 0) + "," + (c[3] || 255) + ")";
  };

  ref = colors.niceHex;
  for (j = 0, len = ref.length; j < len; j++) {
    hex = ref[j];
    colors.nice.push(colors.fromHex(hex));
  }

}).call(this);
;


//from src/maps.js
// Generated by CoffeeScript 1.10.0
(function() {
  var blue, bluebrown, chooseNumber, chooseOne, darkness, fadered, genBox, genClouds, genDebree, genDodads, genRocks, genSymetrical, grayblue, greenbrown, greenpurple, lemondarkred, main, moonyellow, pinkpurple, randomVector, redgreen, tanslate, tealorange, tealwhite, whitepurple, yellowcyan, yellowpuce;

  window.mapping = {};

  chooseNumber = function(n) {
    var i, j;
    i = Math.floor(mr.random() * n) + 1;
    j = i.toString();
    if (j.length === 1) {
      return "0" + j;
    }
    return j;
  };

  chooseOne = function(l) {
    return l[Math.floor(mr.random() * l.length)];
  };

  randomVector = function(v) {
    v[0] = mr.random() - .5;
    v[1] = mr.random() - .5;
    return v2.norm(v);
  };

  main = {
    rockColor: [63, 85, 96, 255],
    spotColor: [115, 193, 226, 255],
    fillColor: [123, 63, 68, 255]
  };

  grayblue = {
    rockColor: [127, 140, 141, 255],
    spotColor: [189, 195, 199, 255],
    fillColor: [44, 62, 80, 255]
  };

  blue = {
    rockColor: [211, 241, 240, 255],
    spotColor: [24, 203, 193, 255],
    fillColor: [28, 107, 132, 255]
  };

  fadered = {
    rockColor: [34, 32, 86, 255],
    spotColor: [255, 187, 132, 255],
    fillColor: [150, 28, 22, 225]
  };

  tealwhite = {
    rockColor: [209, 202, 185, 255],
    spotColor: [159, 200, 170, 255],
    fillColor: [85, 134, 120, 255]
  };

  whitepurple = {
    rockColor: [23, 41, 117, 255],
    spotColor: [188, 210, 219, 255],
    fillColor: [106, 86, 133, 255]
  };

  darkness = {
    rockColor: [27, 36, 40, 255],
    spotColor: [202, 222, 232, 255],
    fillColor: [48, 62, 75, 255]
  };

  moonyellow = {
    rockColor: [171, 164, 136, 255],
    spotColor: [228, 211, 159, 255],
    fillColor: [55, 81, 92, 255]
  };

  pinkpurple = {
    rockColor: [181, 154, 146, 255],
    spotColor: [220, 171, 169, 255],
    fillColor: [90, 54, 99, 255]
  };

  greenbrown = {
    rockColor: [50, 36, 40, 255],
    spotColor: [178, 188, 170, 255],
    fillColor: [100, 64, 62, 255]
  };

  bluebrown = {
    rockColor: [123, 109, 141, 255],
    spotColor: [132, 153, 177, 255],
    fillColor: [73, 59, 42, 255]
  };

  tealorange = {
    rockColor: [255, 74, 0, 255],
    spotColor: [68, 206, 197, 255],
    fillColor: [200, 52, 0, 255]
  };

  greenpurple = {
    rockColor: [77, 83, 130, 255],
    spotColor: [140, 186, 128, 255],
    fillColor: [81, 70, 99, 255]
  };

  lemondarkred = {
    rockColor: [193, 188, 106, 255],
    spotColor: [200, 180, 125, 255],
    fillColor: [120, 25, 25, 255]
  };

  tanslate = {
    rockColor: [61, 44, 46, 255],
    spotColor: [173, 144, 136, 255],
    fillColor: [66, 76, 85, 255]
  };

  redgreen = {
    rockColor: [115, 226, 167, 255],
    spotColor: [110, 190, 155, 255],
    fillColor: [170, 130, 150, 255]
  };

  yellowpuce = {
    rockColor: [230, 155, 46, 255],
    spotColor: [210, 190, 99, 255],
    fillColor: [55, 43, 48, 255]
  };

  yellowcyan = {
    rockColor: [228, 207, 116, 255],
    spotColor: [185, 175, 95, 255],
    fillColor: [60, 133, 111, 255]
  };

  mapping.themes = [main, main, grayblue, blue, fadered, tealwhite, whitepurple, darkness, moonyellow, pinkpurple, greenbrown, bluebrown, greenpurple, lemondarkred, tanslate, yellowpuce];

  mapping.generate = function(seed) {
    var a, fillColor, fns, r, spotColor;
    window.mr = new MTwist(seed);
    sim.things = {};
    if (mr.random() < .1) {
      sim.theme = chooseOne(mapping.themes);
    } else {
      a = mr.random();
      spotColor = colors.hsl2rgb([a, .5, .7, 255]);
      fillColor = colors.hsl2rgb([a + mr.random() * .8 - .4, .3, .2, 255]);
      sim.theme = {
        rockColor: spotColor,
        spotColor: spotColor,
        fillColor: fillColor
      };
    }
    if (sim.serverType === "survival") {
      survival.genSurvival();
    } else {
      genSymetrical();
    }
    if (sim.makeRocks) {
      fns = shuffle([genClouds, genDebree, genRocks, genDodads]);
      r = mr.random();
      if (r < .2) {
        fns.pop()();
        fns.pop()();
        return fns.pop()();
      } else if (r < .5) {
        fns.pop()();
        return fns.pop()();
      } else if (r < .9) {
        return fns.pop()();
      } else {
        return "nothing";
      }
    }
  };

  mapping.generateWeaponTest = function() {
    var a, genRing, mainSpawn;
    sim.things = {};
    sim.theme = main;
    mainSpawn = a = new types.SpawnPoint();
    a.side = "alpha";
    a.spawn = "alpha";
    a.pos[0] = 0;
    a.pos[1] = 0;
    sim.things[a.id] = a;
    genRing = (function(_this) {
      return function(pos, radius, n, spec) {
        var i, m, ref, results, u, z;
        z = -mr.random() * 6 - 3;
        results = [];
        for (i = m = 0, ref = n; 0 <= ref ? m < ref : m > ref; i = 0 <= ref ? ++m : --m) {
          u = new types.Unit(spec);
          u.pos = v2.create(pos);
          u.pos[0] += Math.sin(i / n * 2 * Math.PI) * radius * .8;
          u.pos[1] += Math.cos(i / n * 2 * Math.PI) * radius * .8;
          u.side = "beta";
          u.rot = v2.angle(u.pos) + Math.PI;
          results.push(sim.things[u.id] = u);
        }
        return results;
      };
    })(this);
    genRing([0, 0], 1200, 12, 'ExULFRUIERUIExcIExMI');
    genRing([0, 0], 1500, 32, 'ExULFRUIERUIExcIExMI');
    return genRing([0, 0], 1800, 64, 'ExULFRUIERUIExcIExMI');
  };

  mapping.genTower = function() {
    var _, blocks, forts, i, ref, results, spec, thing, towers, u;
    blocks = ['ExULFRUIERUIExcIExMI', 'FBQUExgHGBUJFRAHEBMJEBUJFRgHExAHGBMJ'];
    towers = ['ERQQFxQQEREIFxEIFBcJFBEJERcKFxcKFBQBFBQw', 'FBQDERQQFxQQEREIFxEIFBcJFBEJERcKFxcKFBQy', 'ERQQFBcJFxQQEREIFxEIFBQDERcKFxcKFBESFBQ4', 'ERQQFBcJFxQQEREIFxEIFBQDERcKFxcKFBESFBQ1'];
    forts = ['FBQDGRcKEBQPDxcKDxEIGBQPGREIEhcJEhEJFhcJFhEJFBQ3', 'GREIFBQDEBQPDxcKDxEIGBQPGRcKEhcJEhEJFhcJFhEJFBQz', 'DRAHDRgHGBQ9EBQ/FBgDEBgPGBgPFBEJFBQDGBADFA8JEBADDRQHGxgHGxQHGxAHEBsJGBsJEA0JGA0JEBAvGBAvFBgwFBQ0', 'FAwGGBAPEBQGGBQGHBQGDBQGCBQDFBQDFCADFAgDEBAPEBgPGBgPFBgGFBAGFBwGIBQDBBQBFCQDJBQDFAQBBBQvFCQvJBQvFAQvCBQ0IBQ0FBQ0FAg0FCA0'];
    ref = sim.things;
    results = [];
    for (_ in ref) {
      thing = ref[_];
      if (thing.commandPoint) {
        spec = chooseOne(towers);
      } else {
        continue;
      }
      u = new types.Unit(spec);
      u.pos = v2.create(thing.pos);
      u.side = thing.side;
      u.rot = v2.angle(u.pos) + Math.PI;
      sim.things[u.id] = u;
      results.push((function() {
        var m, results1;
        results1 = [];
        for (i = m = 0; m < 6; i = ++m) {
          if (thing.commandPoint) {
            spec = blocks[0];
          } else {
            continue;
          }
          u = new types.Unit(spec);
          u.pos = v2.create(thing.pos);
          u.pos[0] += Math.sin(i / 3 * Math.PI) * thing.radius * .8;
          u.pos[1] += Math.cos(i / 3 * Math.PI) * thing.radius * .8;
          u.side = thing.side;
          u.rot = Math.PI / 2;
          results1.push(sim.things[u.id] = u);
        }
        return results1;
      })());
    }
    return results;
  };

  genSymetrical = function() {
    var _, a, b, from_center, i, m, mainSpawn, o, pos, ref, ref1, results, t, tooClose;
    mainSpawn = a = new types.SpawnPoint();
    a.side = "alpha";
    a.spawn = "alpha";
    a.pos[0] = -sim.mapScale * 3000;
    a.pos[1] = mr.random() * 3000 - 1500;
    sim.things[a.id] = a;
    b = new types.SpawnPoint();
    b.side = "beta";
    b.spawn = "beta";
    b.pos[0] = sim.mapScale * 3000;
    b.pos[1] = -a.pos[1];
    sim.things[b.id] = b;
    pos = [];
    results = [];
    for (i = m = 0, ref = sim.numComPoints / 2; 0 <= ref ? m < ref : m > ref; i = 0 <= ref ? ++m : --m) {
      a = new types.CommandPoint();
      a.z = -.01;
      if (i === 0) {
        v2.set(mainSpawn.pos, a.pos);
        from_center = v2.mag(a.pos);
        v2.scale(a.pos, (from_center - 1500) / from_center);
      } else {
        for (i = o = 0; o < 10; i = ++o) {
          tooClose = false;
          randomVector(a.pos);
          v2.scale(a.pos, (300 + mr.random() * 2000) * sim.mapScale);
          ref1 = sim.things;
          for (_ in ref1) {
            t = ref1[_];
            if (v2.distance(t.pos, a.pos) < (t.radius + a.radius + 100)) {
              tooClose = true;
              break;
            }
          }
          if (!tooClose) {
            break;
          }
        }
      }
      sim.things[a.id] = a;
      b = new types.CommandPoint();
      b.z = -.01;
      b.pos[0] = -a.pos[0];
      b.pos[1] = -a.pos[1];
      a.side = "alpha";
      b.side = "beta";
      results.push(sim.things[b.id] = b);
    }
    return results;
  };

  genClouds = function() {
    var alpha, c, cloud, clouds, i, len, m, n, o, otherCloud, overlaps, ref, results, s, type;
    if (mr.random() < .3) {
      c = 0;
    } else {
      c = 255;
    }
    alpha = 15 + 20 * mr.random();
    type = chooseOne(["s", "v", "a", "g"]);
    n = Math.PI * sim.mapScale * sim.mapScale * 8;
    clouds = [];
    results = [];
    for (i = m = 0, ref = n * mr.random(); 0 <= ref ? m < ref : m > ref; i = 0 <= ref ? ++m : --m) {
      cloud = new types.Rock();
      cloud.image = "img/debree/" + type + "cloud" + (chooseNumber(4)) + ".png";
      randomVector(cloud.pos);
      v2.scale(cloud.pos, (mr.random() * 3200) * sim.mapScale);
      overlaps = 0;
      for (o = 0, len = clouds.length; o < len; o++) {
        otherCloud = clouds[o];
        if (v2.distance(cloud.pos, otherCloud.pos) < 1200) {
          overlaps += 1;
        }
      }
      if (overlaps > 2) {
        continue;
      }
      cloud.color = v4.create(sim.theme.rockColor);
      cloud.color[0] = c;
      cloud.color[1] = c;
      cloud.color[2] = c;
      cloud.color[3] = alpha;
      s = 4 + mr.random() * 4;
      cloud.size = [s, s];
      cloud.z = (mr.random() - .5) * 200;
      cloud.rot = mr.random() * Math.PI * 2;
      if (mr.random() > .5) {
        cloud.z *= 5;
      }
      sim.things[cloud.id] = cloud;
      results.push(clouds.push(cloud));
    }
    return results;
  };

  genRocks = function() {
    var i, m, ref, results, rock;
    results = [];
    for (i = m = 0, ref = sim.numRocks; 0 <= ref ? m < ref : m > ref; i = 0 <= ref ? ++m : --m) {
      rock = new types.Rock();
      rock.image = chooseOne(["img/rocks/srock01.png", "img/rocks/srock02.png", "img/rocks/srock03.png", "img/rocks/srock04.png", "img/rocks/srock05.png", "img/rocks/srock06.png", "img/rocks/srock07.png", "img/rocks/mrock01.png", "img/rocks/mrock02.png", "img/rocks/mrock03.png", "img/rocks/mrock04.png", "img/rocks/mrock05.png", "img/rocks/mrock06.png", "img/rocks/lrock01.png", "img/rocks/lrock02.png", "img/rocks/lrock03.png", "img/rocks/lrock04.png", "img/rocks/lrock05.png"]);
      randomVector(rock.pos);
      v2.scale(rock.pos, (300 + mr.random() * 3000) * sim.mapScale);
      rock.color = sim.theme.spotColor;
      rock.rot = 2 * Math.PI * mr.random();
      rock.z = (mr.random() - .5) * 200;
      if (rock.z > 0) {
        rock.z += 1;
      }
      results.push(sim.things[rock.id] = rock);
    }
    return results;
  };

  genBox = function() {
    var a, m, results, rock, x, y, z;
    results = [];
    for (x = m = -5; m <= 5; x = ++m) {
      results.push((function() {
        var o, results1;
        results1 = [];
        for (y = o = -5; o <= 5; y = ++o) {
          results1.push((function() {
            var q, results2;
            results2 = [];
            for (z = q = -5; q <= 5; z = ++q) {
              rock = new types.Rock();
              a = 1000;
              rock.pos = [x * a, y * a];
              rock.z = z * 50;
              rock.color = [255, 255, 255, 255];
              rock.image = "img/pip1.png";
              results2.push(sim.things[rock.id] = rock);
            }
            return results2;
          })());
        }
        return results1;
      })());
    }
    return results;
  };

  genDebree = function() {
    var c, clusterCenter, debree, debreeColor, i, m, n, ref, results;
    debreeColor = sim.theme.spotColor;
    n = Math.PI * sim.mapScale * sim.mapScale * 4;
    results = [];
    for (c = m = 0, ref = n * mr.random(); 0 <= ref ? m < ref : m > ref; c = 0 <= ref ? ++m : --m) {
      clusterCenter = v2.create();
      randomVector(clusterCenter);
      v2.scale(clusterCenter, (300 + mr.random() * 3000) * sim.mapScale);
      if (mr.random() < .7) {
        debree = new types.Rock();
        if (mr.random() > .2) {
          debree.image = "img/debree/bigdebree" + (chooseNumber(12)) + ".png";
        } else {
          debree.image = "img/debree/civ" + (chooseNumber(5)) + ".png";
        }
        v2.add(debree.pos, clusterCenter);
        debree.z = (mr.random() - .5) * 200;
        debree.color = debreeColor;
        debree.rot = mr.random() * 2 * Math.PI;
        sim.things[debree.id] = debree;
      }
      results.push((function() {
        var o, ref1, results1;
        results1 = [];
        for (i = o = 0, ref1 = 20 * mr.random(); 0 <= ref1 ? o < ref1 : o > ref1; i = 0 <= ref1 ? ++o : --o) {
          debree = new types.Rock();
          debree.image = "img/debree/debree" + (chooseNumber(25)) + ".png";
          randomVector(debree.pos);
          v2.scale(debree.pos, mr.random() * 600);
          v2.add(debree.pos, clusterCenter);
          debree.z = (mr.random() - .5) * 200;
          debree.color = debreeColor;
          debree.rot = mr.random() * 2 * Math.PI;
          results1.push(sim.things[debree.id] = debree);
        }
        return results1;
      })());
    }
    return results;
  };

  genDodads = function() {
    var _, chooseDodad, dodadColor, genRing, ref, results, single, thing;
    chooseDodad = function() {
      return chooseOne(["img/dodads/bigdodad01.png", "img/dodads/bigdodad02.png", "img/dodads/bigdodad03.png", "img/dodads/bigdodad04.png", "img/dodads/bigdodad05.png", "img/dodads/meddodad01.png", "img/dodads/meddodad02.png", "img/dodads/meddodad03.png", "img/dodads/meddodad04.png"]);
    };
    dodadColor = sim.theme.spotColor;
    genRing = (function(_this) {
      return function(pos, radius) {
        var dodad, i, image, level, m, ref, results, z;
        image = chooseDodad();
        z = -mr.random() * 6 - 3;
        results = [];
        for (level = m = 0, ref = mr.random() * 4; 0 <= ref ? m < ref : m > ref; level = 0 <= ref ? ++m : --m) {
          results.push((function() {
            var o, results1;
            results1 = [];
            for (i = o = 0; o < 6; i = ++o) {
              dodad = new types.Rock();
              dodad.image = image;
              dodad.color = dodadColor;
              dodad.pos = v2.create(pos);
              dodad.pos[0] += Math.sin(i / 3 * Math.PI) * radius * .8;
              dodad.pos[1] += Math.cos(i / 3 * Math.PI) * radius * .8;
              dodad.rot = (6 - i) / 3 * Math.PI + Math.PI / 2;
              dodad.z = z - level * 10;
              results1.push(sim.things[dodad.id] = dodad);
            }
            return results1;
          })());
        }
        return results;
      };
    })(this);
    single = (function(_this) {
      return function(pos) {
        var dodad, image;
        image = chooseDodad();
        dodad = new types.Rock();
        dodad.image = image;
        dodad.color = dodadColor;
        dodad.pos = v2.create(pos);
        dodad.rot = mr.random() * 2 * Math.PI;
        dodad.z = -2 + mr.random();
        return sim.things[dodad.id] = dodad;
      };
    })(this);
    ref = sim.things;
    results = [];
    for (_ in ref) {
      thing = ref[_];
      if (mr.random() < .5) {
        continue;
      }
      if (!(thing.spawn || thing.commandPoint)) {
        continue;
      }
      if (mr.random() < 0.5) {
        results.push(genRing(thing.pos, thing.radius * 3));
      } else {
        results.push(single(thing.pos));
      }
    }
    return results;
  };

  mapping.save = function(name) {
    var k, len, m, map, n, num, p, player, ref, ref1, ref2, spec, thing;
    p = function(pos) {
      return [Math.floor(pos[0]), Math.floor(pos[1])];
    };
    map = {};
    map.name = name;
    map.players = {};
    ref = sim.players;
    for (k in ref) {
      player = ref[k];
      map.players[player.id] = {
        name: player.name,
        buildBar: player.buildBar,
        aiRules: player.aiRules,
        color: player.color,
        side: player.side
      };
    }
    map.things = [];
    ref1 = sim.things;
    for (k in ref1) {
      thing = ref1[k];
      if (thing.unit) {
        num = -1;
        ref2 = player.buildBar;
        for (n = m = 0, len = ref2.length; m < len; n = ++m) {
          spec = ref2[n];
          if (simpleEquals(spec, thing.spec)) {
            num = n;
          }
        }
        map.things.push(["unit", p(thing.pos), thing.side, thing.owner, num, thing.rot]);
      } else if (thing.spawn) {
        map.things.push(["spawnPoint", p(thing.pos), thing.side]);
      } else if (thing.commandPoint) {
        map.things.push(["commandPoint", p(thing.pos), thing.side]);
      }
    }
    console.log(name + " =\n" + csonify(map, 1));
    localStorage["map_" + name] = JSON.stringify(map);
  };

  mapping.load = function(name) {
    var base, id, len, m, map, owner, p, player, ref, ref1, results, thing;
    map = JSON.parse(localStorage["map_" + name]);
    if (window.network != null) {
      if (typeof (base = window.network).close === "function") {
        base.close();
      }
    }
    bubbles.clear();
    window.intp = new Interpolator();
    window.sim = new Sim();
    sim.local = true;
    intp.local = true;
    sim.start();
    window.network = new Local();
    ui.mode = "battle";
    ref = map.players;
    for (id in ref) {
      p = ref[id];
      player = sim.playerJoin({}, id, p.name, p.color, p.buildBar, p.aiRules);
      player.side = p.side;
      player.connected = true;
      player.ready = true;
    }
    sim.things = {};
    ref1 = map.things;
    results = [];
    for (m = 0, len = ref1.length; m < len; m++) {
      p = ref1[m];
      console.log(p);
      if (p[0] === "spawnPoint") {
        thing = new types.SpawnPoint();
        thing.spawn = p[2];
      } else if (p[0] === "commandPoint") {
        thing = new types.CommandPoint();
      } else if (p[0] === "unit") {
        owner = map.players[p[3]];
        thing = new types.Unit(owner.buildBar[p[4]]);
        thing.owner = p[3];
        thing.number = p[4];
        thing.rot = p[5] || 0;
      }
      v2.set(p[1], thing.pos);
      thing.side = p[2];
      results.push(sim.things[thing.id] = thing);
    }
    return results;
  };

}).call(this);
;


//from src/sim.js
// Generated by CoffeeScript 1.10.0
(function() {
  var DEBUG, _offset, _pos, _vel, isArray,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DEBUG = 1;

  window.VERSION = 51;

  window.MINOR_VERSION = 1;

  _pos = v2.create();

  _vel = v2.create();

  _offset = v2.create();

  window.rand = function() {
    return Math.random() - 0.5;
  };

  window.rid = function() {
    return Math.random().toString(32).slice(2);
  };

  window.choose = function(list) {
    return list[Math.floor(Math.random() * list.length)];
  };

  window.shuffle = function(list) {
    var e, l, len1, ref, results;
    ref = ((function() {
      var len1, m, results1;
      results1 = [];
      for (m = 0, len1 = list.length; m < len1; m++) {
        e = list[m];
        results1.push([Math.random(), e]);
      }
      return results1;
    })()).sort();
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      e = ref[l];
      results.push(e[1]);
    }
    return results;
  };

  window.types = {};

  isArray = function(a) {
    if (Array.isArray(a)) {
      return true;
    }
    if (a instanceof Float64Array) {
      return true;
    }
    return false;
  };

  window.simpleEquals = function(a, b) {
    var e, i, k, l, len1, v;
    if (a === b) {
      return true;
    }
    if (a === null || b === null) {
      return false;
    }
    if (a === void 0 || b === void 0) {
      return false;
    }
    if (typeof a !== typeof b) {
      return false;
    }
    if (isArray(a) && isArray(b)) {
      if (a.length !== b.length) {
        return false;
      }
      for (i = l = 0, len1 = a.length; l < len1; i = ++l) {
        e = a[i];
        if (!simpleEquals(e, b[i])) {
          return false;
        }
      }
      return true;
    }
    if (typeof a === "object") {
      for (k in a) {
        v = a[k];
        if (!simpleEquals(v, b[k])) {
          return false;
        }
      }
      return true;
    }
    return false;
  };

  window.otherSide = function(side) {
    if (side === "alpha") {
      return "beta";
    } else if (side === "beta") {
      return "alpha";
    } else {
      return "alpha";
    }
  };

  window.Sim = (function() {
    Sim.prototype.ticksPerSec = 16;

    Sim.prototype.defaultMoney = 2000;

    Sim.prototype.gainsMoney = true;

    Sim.prototype.makeRocks = true;

    Sim.prototype.state = "waiting";

    Sim.prototype.serverType = "clanwars";

    Sim.prototype.lastId = 0;

    Sim.prototype.costLimit = 1000;

    Sim.prototype.aiTestMode = false;

    Sim.prototype.nGamesPlayed = 0;

    Sim.prototype.validTypes = {
      "clanwars": "clanwars"
    };

    Sim.prototype.say = function(message) {
      if (typeof server !== "undefined" && server !== null) {
        return server.say(message);
      } else if (this.local) {
        return chat.lines.push({
          text: message,
          color: "FFFFFF",
          name: "Server",
          server: true,
          channel: "local",
          time: Date.now()
        });
      } else {
        return print(message);
      }
    };

    Sim.prototype.nid = function() {
      var id;
      id = this.lastId;
      this.lastId += 1;
      return id;
    };

    function Sim() {
      this.victoryConditions = bind(this.victoryConditions, this);
      this.local = false;
      this.players = [];
      this.step = 0;
      this.timeDelta = 0;
      this.winningSide = null;
      this.numBattles = 0;
      this.unitSpaces = {};
      this.projSpaces = {};
      this.zJson = new window.ZJson(prot.commonWords);
    }

    Sim.prototype.start = function() {
      if (!this.cwRecieved) {
        this.say("Clanwars server timed out");
        return;
      }
      var key, p, ref;
      this.net = {};
      this.step = 0;
      this.timeDelta = 0;
      this.winningSide = null;
      this.lastId = 0;
      this.counting = 0;
      this.generateMap();
      if (this.players == null) {
        this.players = {};
      } else {
        ref = this.players;
        for (key in ref) {
          p = ref[key];
          if (p && p.connected) {
            p.reset();
            this.validateBuildBar(p);
          }
        }
      }
      this.winningSide = null;
      this.state = "starting";
      this.regenerateMap();
      this.captures = 0;
      this.deaths = 0;
      this.nGamesPlayed += 1;
      this.clearNetState();
      if (this.serverType === "survival") {
        return survival.start(this);
      }
    };

    Sim.prototype.configGame = function(p, config) {
        this.startGame(p);
    };

    Sim.prototype.playersPerTeam = function() {
      if (this.serverType.slice(0, 3) === "1v1") {
        return 1;
      }
      if (this.serverType === "2v2") {
        return 2;
      }
      if (this.serverType === "3v3") {
        return 3;
      }
      return 3;
    };

    Sim.prototype.generateMap = function(mapScale, numComPoints, mapSeed) {
      this.mapScale = mapScale != null ? mapScale : 1.5;
      this.numComPoints = numComPoints != null ? numComPoints : 8;
      this.mapSeed = mapSeed;
      this.numRocks = 60 * this.mapScale;
      return this.regenerateMap();
    };

    Sim.prototype.regenerateMap = function() {
      return mapping.generate(this.mapSeed);
    };

    Sim.prototype.playerJoin = function(_, pid, name, color, buildBar, aiRules, ai, update) {
      var dcIndex, i, l, len1, len2, m, p, player, ref, ref1;
      if (ai == null) {
        ai = false;
      }
      if (update == null) {
        update = true;
      }
      print("playerJoin", pid, name, color);
      ref = this.players;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        p = ref[l];
        if (p.id === pid) {
          player = p;
          break;
        }
      }
      if (!player) {
        player = new Player(pid);
        player.streek = 0;
        if (this.local) {
          player.side = "alpha";
        } else {
          player.side = "spectators";
        }
        dcIndex = null;
        ref1 = this.players;
        for (i = m = 0, len2 = ref1.length; m < len2; i = ++m) {
          p = ref1[i];
          if (!p.connected && p.side === "spectators") {
            dcIndex = i;
          }
        }
        if (dcIndex === null) {
          player.number = this.players.length;
          this.players.push(player);
        } else {
          player.number = dcIndex;
          this.players[dcIndex] = player;
        }
        if (this.local) {
          this.clearNetState();
        }
      } else if (update) {
        this.clearNetState();
      }
      this.playerEdit(_, pid, name, color, buildBar, aiRules, ai);
      return player;
    };

    Sim.prototype.playerEdit = function(_, pid, name, color, buildBar, aiRules, ai) {
      var canEditShips, i, l, len1, m, o, p, player, ref;
      ref = this.players;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        p = ref[l];
        if (p.id === pid) {
          player = p;
          break;
        }
      }
      player.name = name;
      player.color = colors.validate(color);
      player.color[3] = 255;
      player.ai = ai;
      player.aiRules = aiRules;
      if (!player.buildBar) {
        player.buildBar = (function() {
          var m, results;
          results = [];
          for (i = m = 0; m < 10; i = ++m) {
            results.push([]);
          }
          return results;
        })();
      }
      if (!player.validBar) {
        player.validBar = (function() {
          var m, results;
          results = [];
          for (i = m = 0; m < 10; i = ++m) {
            results.push(false);
          }
          return results;
        })();
      }
      player.connected = true;
      if (this.serverType === "1v1t" && this.state !== "waiting" && player.side !== "spectators") {
        for (i = m = 0; m < 10; i = ++m) {
          if (json.dumps(player.buildBar[i]) !== json.dumps(buildBar[i]) && player.side !== "spectators") {
            print("---");
            print(json.dumps(player.buildBar[i]));
            print(json.dumps(buildBar[i]));
          }
        }
        canEditShips = false;
      } else {
        canEditShips = true;
      }
      if (canEditShips) {
        for (i = o = 0; o < 10; i = ++o) {
          player.buildBar[i] = buildBar[i] || null;
        }
        this.validateBuildBar(player);
      }
      player.actions += 1;
      return player;
    };

    Sim.prototype.switchSide = function(player, side) {
      if (!player) {
        return;
      }
      if (player.kickTime > now() - 15000) {
        return;
      }
      if (side !== "spectators") {
        side = "alpha";
      }
      if (this.state !== "waiting") {
        return;
      }
      player.side = side;
      if (side === "spectators") {
        player.streek = 0;
      }
      return player.lastActiveTime = Date.now();
    };

    Sim.prototype.whoIsHost = function() {
      var haveHost, l, len1, len2, m, p, ref, ref1, results;
      haveHost = false;
      ref = this.players;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        p = ref[l];
        if (p.host === true) {
          if (!p.connected || p.side === "spectators") {
            p.host = false;
            haveHost = false;
            break;
          } else {
            haveHost = true;
            break;
          }
        }
      }
      if (!haveHost) {
        ref1 = this.players;
        results = [];
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          p = ref1[m];
          if (!p.ai && p.connected && p.side !== "spectators") {
            p.host = true;
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    Sim.prototype.addAi = function(player, name, side, aiBuildBar) {
      var l, len1, numAi, p, ref, total;
      print("addAI", name, side);
      if (!this.local) {
        if (this.noAIPlayers) {
          return;
        }
        if (this.serverType === "1v1r") {
          return;
        }
        if (this.serverType === "1v1") {
          return;
        }
        if (this.numInTeam(side) >= this.playersPerTeam()) {
          print("enough players in team");
          return;
        }
        if (this.state !== "waiting") {
          return;
        }
        total = this.playersPerTeam() * 2;
        numAi = 0;
        ref = this.players;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          p = ref[l];
          if (p.ai && p.connected && p.side !== "spectators") {
            numAi += 1;
          }
        }
        if (numAi === total - 1) {
          print("All players can't be AI");
          return;
        }
      }
      return ais.useAiFleet(name, side, aiBuildBar);
    };

    Sim.prototype.kickPlayer = function(p, number) {
      var player;
      if (this.state !== "waiting") {
        return;
      }
      if (!p.host) {
        return;
      }
      player = this.players[number];
      if (player) {
        player.side = "spectators";
        player.kickTime = now();
        if (player.ai) {
          player.connected = false;
        }
        return this.say(p.name + " kicked " + player.name);
      }
    };

    Sim.prototype.kickAllAis = function() {
      var l, len1, player, ref, results;
      if (this.aiTestMode) {
        return;
      }
      ref = this.players;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        player = ref[l];
        if (player.ai) {
          player.connected = false;
          results.push(player.side = "spectators");
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Sim.prototype.startGame = function(player, real) {
      if (real == null) {
        real = false;
      }
      if (!player.host) {
        print("A non-host player is trying to start game.");
        return;
      }
      if (this.state !== "waiting") {
        print("Trying to start a game when a game is already in progress. State:", this.state);
        return;
      }
      if (!this.canStart(true)) {
        return;
      }

      for (let player of this.players) {
        if (player.side !== "spectators") {
          player.side = "alpha";
        }
      }

      this.cwRecieved = false;
      getCWBattleData(this.players).then(data => {
        for (let i = 0; i < data.sides.length; i++) {
          for (let pdata of data.sides[i].users) {
            let player = this.players.find(p => !p.ai
              && p.side !== "spectators" && p.name === pdata.username);

            if (!player) {
              this.say("Player " + pdata.username + " not in game");
              this.countDown = 0;
              return;
            }

            player.side = (i === 0) ? "alpha" : "beta";
            player.money = pdata.money;
          }
        }

        this.say("Starting battle " + data.id);
        this.cwRecieved = true;
      }).catch(e => {
        if (e.message) {
          this.say(e.message);
        } else {
          this.say("Could not start game");
        }
        this.countDown = 0;
      });

      this.say("Game is about to start!");
      return this.countDown = 16 * 6;
    };

    Sim.prototype.canStart = function(sayStyff) {
      if (sayStyff == null) {
        sayStyff = false;
      }
      if (this.numInTeam("alpha") < 1) {
        if (sayStyff) {
          this.say("Game does not have enough players.");
        }
        return false;
      }
      return true;
    };

    Sim.prototype.validateBuildBar = function(player) {
      var i, l, len1, ref, spec;
      ref = player.buildBar;
      for (i = l = 0, len1 = ref.length; l < len1; i = ++l) {
        spec = ref[i];
        player.validBar[i] = validSpec(player, spec);
      }
    };

    Sim.prototype.moveOrder = function(player, points, additive, orderId) {
      var l, len1, n, ref, results, u;
      if (!player) {
        return;
      }
      if (this.aiOnly) {
        return;
      }
      player.actions += 1;
      n = 0;
      ref = player.selection;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        u = ref[l];
        if ((u != null) && u.owner === player.number && !u.dead) {
          u.giveOrder({
            id: orderId,
            type: "Move",
            dest: points[n],
            range: 0
          }, additive);
          n += 1;
          if (n === points.length) {
            n = points.length - 1;
          }
          results.push(u.underPlayerControl = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Sim.prototype.followOrder = function(player, unitId, additive, orderId) {
      var l, len1, ref, results, u;
      if (!player) {
        return;
      }
      if (this.aiOnly) {
        return;
      }
      player.actions += 1;
      ref = player.selection;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        u = ref[l];
        if (u.owner === player.number) {
          u.giveOrder({
            id: orderId,
            type: "Follow",
            targetId: unitId,
            noFinish: true
          }, additive);
          results.push(u.underPlayerControl = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Sim.prototype.stopOrder = function(player, additive) {
      var l, len1, ref, results, u;
      if (!player) {
        return;
      }
      if (this.aiOnly) {
        return;
      }
      player.actions += 1;
      ref = player.selection;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        u = ref[l];
        if (u.owner === player.number) {
          results.push(u.stopAndClearOrders());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Sim.prototype.holdPositionOrder = function(player, additive) {
      var l, len1, len2, m, ref, ref1, results, someHolding, u;
      if (!player) {
        return;
      }
      if (this.aiOnly) {
        return;
      }
      player.actions += 1;
      someHolding = false;
      ref = player.selection;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        u = ref[l];
        if (u.owner === player.number && u.holdPosition) {
          someHolding = true;
          break;
        }
      }
      ref1 = player.selection;
      results = [];
      for (m = 0, len2 = ref1.length; m < len2; m++) {
        u = ref1[m];
        if (u.owner === player.number) {
          if (someHolding) {
            results.push(u.holdPosition = false);
          } else {
            results.push(u.holdPosition = !u.holdPosition);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Sim.prototype.selfDestructOrder = function(player, additive) {
      var l, len1, ref, results, u;
      if (!player) {
        return;
      }
      if (this.aiOnly) {
        return;
      }
      player.actions += 1;
      ref = player.selection;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        u = ref[l];
        if (u.owner === player.number) {
          results.push(u.selfDestruct());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Sim.prototype.setRallyPoint = function(player, point) {
      if (!player) {
        return;
      }
      return player.rallyPoint = point;
    };

    Sim.prototype.buildUnit = function(pid, number, pos) {
      var _, _where, l, len1, player, ref, ref1, spec, totalUnits, u, unit, w;
      player = this.players[pid];
      if (!player) {
        return;
      }
      if (!player.validBar[number]) {
        return;
      }
      totalUnits = 0;
      ref = this.things;
      for (_ in ref) {
        u = ref[_];
        if (u.unit && u.owner === player.number) {
          totalUnits += 1;
        }
      }
      if (totalUnits >= 100) {
        return;
      }
      spec = player.buildBar[number];
      if (player.money < specCost(spec)) {
        return;
      }
      player.actions += 1;
      unit = new types.Unit(spec);
      unit.owner = player.number;
      unit.side = player.side;
      unit.color = player.color.slice(0);
      unit.number = number;
      player.money -= unit.cost;
      this.things[unit.id] = unit;
      if (pos) {
        v2.set(pos, unit.pos);
        unit.rot = v2.angle(unit.pos) + Math.PI;
        ref1 = unit.weapons;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          w = ref1[l];
          w.rot = unit.rot;
        }
      }
      if (player.rallyPoint != null) {
        _where = [0, 0];
        v2.sub(player.rallyPoint, unit.pos, _where);
        unit.rot = v2.angle(_where);
      }
      return unit;
    };

    Sim.prototype.placeUnit = function(pid, name, pos) {
      var cls, player;
      player = this.players[pid];
      if (!player) {
        return;
      }
      cls = types[name];
      if (this.canBuildHere(pos, player.side, cls)) {
        return this.buildUnit(pid, name, pos);
      }
    };

    Sim.prototype.buildRq = function(player, name, number) {
      var i, l, len, m, n, ref, ref1;
      if (!player) {
        return;
      }
      if (number > 0) {
        for (i = l = 0, ref = number; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
          player.buildQ.push(name);
        }
      } else if (number < 0) {
        len = player.buildQ.length;
        for (i = m = ref1 = len - 1; ref1 <= -1 ? m < -1 : m > -1; i = ref1 <= -1 ? ++m : --m) {
          if (player.buildQ[i] === name) {
            player.buildQ[i] = null;
            number += 1;
            if (number === 0) {
              break;
            }
          }
        }
        player.buildQ = (function() {
          var len1, o, ref2, results;
          ref2 = player.buildQ;
          results = [];
          for (o = 0, len1 = ref2.length; o < len1; o++) {
            n = ref2[o];
            if (n !== null) {
              results.push(n);
            }
          }
          return results;
        })();
      }
    };

    Sim.prototype.findSpawnPoint = function(side) {
      var _, ref, unit;
      ref = this.things;
      for (_ in ref) {
        unit = ref[_];
        if (unit.spawn === side) {
          return unit;
        }
      }
    };

    Sim.prototype.canBuildHere = function(pos, side, cls) {
      var _, dist, inRange, ref, unit;
      inRange = false;
      ref = this.things;
      for (_ in ref) {
        unit = ref[_];
        if (unit.unit || unit.commandPoint) {
          dist = v2.distance(pos, unit.pos);
          if (unit.unit) {
            if (dist < unit.radius + cls.prototype.radius) {
              return false;
            }
          }
          if (unit.commandPoint) {
            if (unit.side === side && dist < unit.radius) {
              inRange = true;
            }
          }
        }
      }
      return inRange;
    };

    Sim.prototype.mouseMove = function(player, pos, action) {
      if (!player) {
        return;
      }
      player.lastActiveTime = Date.now();
      v2.set(pos, player.mouse);
      return player.action = action;
    };

    Sim.prototype.playerSelected = function(player, selection) {
      var id, l, len1, ref, ref1, results, t, u;
      if (!player) {
        return;
      }
      ref = player.selection;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        u = ref[l];
        if (u.owner === player.number) {
          u.underPlayerControl = false;
        }
      }
      player.selection = [];
      ref1 = this.things;
      results = [];
      for (id in ref1) {
        t = ref1[id];
        results.push((function() {
          var len2, m, results1;
          results1 = [];
          for (m = 0, len2 = selection.length; m < len2; m++) {
            id = selection[m];
            if (t.id === id) {
              results1.push(player.selection.push(t));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
      return results;
    };

    Sim.prototype.surrender = function(player) {
      if (!player) {
        return;
      }
      if (this.winningSide) {
        return;
      }
      if (this.state !== "running") {
        return;
      }
      if (player.side === "beta") {
        this.winningSide = "alpha";
      } else if (player.side === "alpha") {
        this.winningSide = "beta";
      } else {
        return;
      }
      this.say(player.name + " surrenders");
      return this.endOfGame();
    };

    Sim.prototype.checkAfkPlayers = function() {
      var l, len1, player, ref, results;
      ref = this.players;
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        player = ref[l];
        if (player.ai) {
          if (player.side !== "spectators") {
            player.afk = false;
            results.push(player.connected = true);
          } else {
            results.push(void 0);
          }
        } else if (!player.connected) {
          results.push(player.afk = true);
        } else if (player.lastActiveTime < Date.now() - 1000 * 60 * 10) {
          if (this.serverType !== "1v1r") {
            results.push(player.afk = true);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(player.afk = false);
        }
      }
      return results;
    };

    Sim.prototype.numInTeam = function(side) {
      var l, len1, num, player, ref;
      num = 0;
      ref = this.players;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        player = ref[l];
        if (player.side === side) {
          num += 1;
        }
      }
      return num;
    };

    Sim.prototype.startingSim = function() {
      if (this.state === "starting") {
        this.state = "running";
      }
      if (this.state === "ended") {
        this.state = "waiting";
      }
      if (this.countDown > 0) {
        this.countDown -= 1;
        if (!this.canStart(true)) {
          this.state = "waiting";
          this.countDown = 0;
          return;
        }
        if (this.countDown === 0) {
          this.start();
        }
      }
      if (this.state === "waiting" && this.serverType === "1v1r" && this.canStart() && !this.countDown) {
        this.say("Challenger appears, game is about to start!");
        return this.countDown = 16 * 6;
      }
    };

    Sim.prototype.simulate = function() {
      var id, l, len1, len2, m, player, ref, ref1, ref2, ref3, ref4, ref5, t, thing;
      this.timeStart("sim");
      this.step += 1;
      this.startingSim();
      this.checkAfkPlayers();
      this.whoIsHost();
      this.timeIt("spacesRebuild", (function(_this) {
        return function() {
          return _this.spacesRebuild();
        };
      })(this));
      this.units = [
        (function() {
          var ref, results;
          ref = this.things;
          results = [];
          for (id in ref) {
            t = ref[id];
            if (t.unit) {
              results.push(t);
            }
          }
          return results;
        }).call(this)
      ];
      this.bullets = [
        (function() {
          var ref, results;
          ref = this.things;
          results = [];
          for (id in ref) {
            t = ref[id];
            if (t.bullet) {
              results.push(t);
            }
          }
          return results;
        }).call(this)
      ];
      this.commandPoint = [
        (function() {
          var ref, results;
          ref = this.things;
          results = [];
          for (id in ref) {
            t = ref[id];
            if (t.bullet) {
              results.push(t);
            }
          }
          return results;
        }).call(this)
      ];
      this.timeStart("death");
      ref = this.things;
      for (id in ref) {
        thing = ref[id];
        if (thing.dead) {
          if (typeof thing.postDeath === "function") {
            thing.postDeath();
          }
          delete this.things[id];
        }
      }
      this.timeEnd("death");
      this.timeStart("tick");
      ref1 = this.things;
      for (id in ref1) {
        thing = ref1[id];
        if (typeof thing.tick === "function") {
          thing.tick();
        }
      }
      this.timeEnd("tick");
      this.timeStart("move");
      ref2 = this.things;
      for (id in ref2) {
        thing = ref2[id];
        if (typeof thing.move === "function") {
          thing.move();
        }
      }
      this.timeEnd("move");
      this.timeIt("unitsCollide", (function(_this) {
        return function() {
          return _this.unitsCollide();
        };
      })(this));
      if (this.state === "running" || this.serverType === "sandbox") {
        ref3 = this.players;
        for (l = 0, len1 = ref3.length; l < len1; l++) {
          player = ref3[l];
          if (player.side === "alpha" || player.side === "beta") {
            player.tick();
          }
        }
      }
      ref4 = this.players;
      for (m = 0, len2 = ref4.length; m < len2; m++) {
        player = ref4[m];
        if (this.state !== "running" && player.afk) {
          player.side = "spectators";
        }
        if (player.side === null) {
          player.side = "spectators";
        }
      }
      if (this.serverType === "survival") {
        survival.simulate(this);
        survival.victoryConditions(this);
      } else {
        this.victoryConditions();
        if (typeof this.extra === "function") {
          this.extra();
        }
        if ((ref5 = this.galaxyStar) != null) {
          if (typeof ref5.tick === "function") {
            ref5.tick();
          }
        }
      }
      return this.timeEnd("sim");
    };

    Sim.prototype.spacesRebuild = function() {
      var _, ref, results, t;
      this.unitSpaces = {
        'alpha': new HSpace(500),
        'beta': new HSpace(500)
      };
      this.bulletSpaces = {
        'alpha': new HSpace(100),
        'beta': new HSpace(100)
      };
      ref = this.things;
      results = [];
      for (_ in ref) {
        t = ref[_];
        if (t.dead) {
          continue;
        }
        if (t.unit) {
          this.unitSpaces[t.side].insert(t);
        }
        if (t.bullet) {
          results.push(this.bulletSpaces[t.side].insert(t));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Sim.prototype.victoryConditions = function() {
      var capped, cappedArr, id, k, l, len1, player, ref, ref1, stillThere, thing;
      if (this.state !== "running") {
        return;
      }
      capped = {};
      ref = this.things;
      for (id in ref) {
        thing = ref[id];
        if (thing.commandPoint) {
          capped[thing.side] = (capped[thing.side] || 0) + 1;
        }
      }
      cappedArr = (function() {
        var results;
        results = [];
        for (k in capped) {
          results.push(k);
        }
        return results;
      })();
      if (cappedArr.length === 0) {
        return;
      }
      if (cappedArr.length === 1 && cappedArr[0] !== 'neutral') {
        this.winningSide = cappedArr[0];
      }
      if (this.winningSide) {
        this.endOfGame();
        return;
      }
      if (!this.local && !this.aiTestMode) {
        stillThere = false;
        ref1 = this.players;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          player = ref1[l];
          if (!player.ai && player.connected && !player.afk && player.side !== "spectators") {
            stillThere = true;
          }
        }
        if (!stillThere) {
          this.say("Every one left. Ending game.");
          this.winningSide = false;
          this.endOfGame();
        } else if (this.step > 16 * 60 * 30) {
          this.winningSide = false;
          this.endOfGame();
        }
      }
    };

    Sim.prototype.endOfGame = function() {
      var l, len1, player, ref;
      if (this.winningSide) {
        this.say(this.winningSide + " has won!");
      } else {
        this.say("Game ends in a draw!");
      }
      this.numBattles += 1;
      if (this.numBattles > 100) {
        this.awaitRestart = true;
      }
      if (typeof this.sendGameReport === "function") {
        this.sendGameReport();
      }
      if (this.serverType === "1v1r") {
        ref = this.players;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          player = ref[l];
          if (player.side !== "spectators") {
            if (player.side === this.winningSide) {
              player.streek += 1;
              if (player.streek === 1) {
                this.say(player.name + " wins a battle");
              } else {
                this.say(player.name + " wins " + player.streek + " battles");
              }
              player.host = true;
            } else {
              player.side = "spectators";
              player.host = false;
              player.streek = 0;
              if (this.winningSide) {
                this.say(player.name + " lost and was kicked");
              }
              player.kickTime = now();
            }
          }
        }
      }
      if (this.serverType === "survival") {
        survival.endOfGame(this);
      }
      return this.state = "ended";
    };

    Sim.prototype.unitsCollide = function() {
      var _push, distance, force, i, j, k, l, len1, missles, n, ratio, results, t, u, u2, units;
      n = this.step % 2;
      units = (function() {
        var ref, results;
        ref = this.things;
        results = [];
        for (k in ref) {
          t = ref[k];
          if (t.unit && !t.fixed && t.active) {
            results.push(t);
          }
        }
        return results;
      }).call(this);
      units.sort(function(a, b) {
        return a.pos[n] - b.pos[n];
      });
      this.axisSort = n;
      this.axisSortedUnits = units;
      missles = (function() {
        var ref, results;
        ref = this.things;
        results = [];
        for (k in ref) {
          t = ref[k];
          if (t.missile) {
            results.push(t);
          }
        }
        return results;
      }).call(this);
      missles.sort(function(a, b) {
        return a.pos[n] - b.pos[n];
      });
      this.axisSortedMissles = missles;
      results = [];
      for (i = l = 0, len1 = units.length; l < len1; i = ++l) {
        u = units[i];
        results.push((function() {
          var m, results1;
          results1 = [];
          for (j = m = -4; m <= 4; j = ++m) {
            u2 = units[i + j];
            if (j !== 0 && u2) {
              v2.sub(u.pos, u2.pos, _offset);
              distance = v2.mag(_offset);
              if (distance < .001) {
                _offset = [0, -1];
                distance = 1;
              }
              if (distance < u.radius + u2.radius) {
                force = (u.radius + u2.radius) - distance;
                ratio = u2.mass / (u.mass + u2.mass);
                _push = v2.create();
                v2.scale(_offset, ratio * force / distance * .02, _push);
                v2.add(u.pos, _push);
                v2.scale(_offset, -(1 - ratio) * force / distance * .02, _push);
                results1.push(v2.add(u2.pos, _push));
              } else {
                results1.push(void 0);
              }
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
      return results;
    };

    Sim.prototype.thingFields = ["onOrderId", "holdPosition", "hp", "energy", "shield", "cloak", "burn", "dead", "radius", "size", "rot", "image", "warpIn", "jump", "side", "owner", "capping", "aoe", "damage", "life", "maxLife", "turretNum", "targetPos", "hitPos"];

    Sim.prototype.playerFields = ["name", "side", "afk", "host", "money", "connected", "dead", "color", "mouse", "action", "buildQ", "validBar", "ai", "apm", "capps", "kills", "unitsBuilt", "moneyEarned", "rallyPoint"];

    Sim.prototype.simFields = ["serverType", "step", "theme", "state", "winningSide", "countDown"];

    Sim.prototype.send = function() {
      var _, changes, data, e, f, i, id, l, len1, len2, len3, len4, len5, len6, len7, len8, m, o, p, packet, part, partId, player, predictable, q, r, ref, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, send, splayers, sthings, t, targetId, thing, v, x, y, z;
      this.timeStart("send");
      this.timeStart("things");
      sthings = [];
      ref = this.things;
      for (id in ref) {
        thing = ref[id];
        changes = [];
        changes.push(["thingId", thing.id]);
        if (thing.net == null) {
          thing.net = s = {};
          changes.push(["name", thing.constructor.name]);
          changes.push(["spec", thing.spec]);
          changes.push(["color", thing.color]);
          changes.push(["z", thing.z]);
        } else if (thing["static"]) {
          continue;
        } else {
          s = thing.net;
        }
        ref1 = this.thingFields;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          f = ref1[l];
          v = thing[f];
          if ((v != null) && !simpleEquals(s[f], v)) {
            if (isArray(v)) {
              if (s.length !== v.length) {
                s[f] = new Array(v.length);
              }
              for (i = m = 0, len2 = v.length; m < len2; i = ++m) {
                e = v[i];
                s[f][i] = e;
              }
            } else {
              s[f] = v;
            }
            changes.push([f, v]);
          }
        }
        predictable = false;
        if ((s.vel != null) && (s.pos != null)) {
          v2.add(s.pos, s.vel, _pos);
          if (v2.distance(_pos, thing.pos) < .1) {
            v2.set(_pos, s.pos);
            predictable = true;
          }
        }
        if (!predictable) {
          if (s.vel == null) {
            s.vel = v2.create();
          }
          if (s.pos == null) {
            s.pos = v2.create();
          }
          v2.set(thing.vel, s.vel);
          v2.set(thing.pos, s.pos);
          changes.push(["vel", thing.vel]);
          changes.push(["pos", thing.pos]);
        }
        if (s.targetId !== ((ref2 = thing.target) != null ? ref2.id : void 0)) {
          s.targetId = (ref3 = thing.target) != null ? ref3.id : void 0;
          changes.push(["targetId", s.targetId]);
        }
        if (s.originId !== ((ref4 = thing.origin) != null ? ref4.id : void 0)) {
          s.originId = (ref5 = thing.origin) != null ? ref5.id : void 0;
          changes.push(["originId", s.originId]);
        }
        if (s.followId !== ((ref6 = thing.follow) != null ? ref6.id : void 0)) {
          s.followId = (ref7 = thing.follow) != null ? ref7.id : void 0;
          changes.push(["followId", s.followId]);
        }
        if (this.local) {
          if (s.message !== thing.message) {
            s.message = thing.message;
            changes.push(["message", s.message]);
          }
        }
        if (thing.parts != null) {
          ref8 = thing.parts;
          for (partId = o = 0, len3 = ref8.length; o < len3; partId = ++o) {
            part = ref8[partId];
            changes.push(["partId", partId]);
            s = part.net;
            if (!s) {
              part.net = s = {};
            }
            if ((part.working != null) && s.working !== part.working) {
              changes.push(["partWorking", part.working]);
              s.working = part.working;
            }
            if (part.weapon) {
              targetId = ((ref9 = part.target) != null ? ref9.id : void 0) || 0;
              if (s.targetId !== targetId) {
                changes.push(["partTargetId", targetId]);
                s.targetId = targetId;
              }
            }
            if (changes[changes.length - 1][0] === "partId") {
              changes.pop();
            }
          }
        }
        if (changes.length > 1) {
          sthings.push(changes);
        }
      }
      this.timeEnd("things");
      this.timeStart("players");
      splayers = [];
      ref10 = this.players;
      for (q = 0, len4 = ref10.length; q < len4; q++) {
        player = ref10[q];
        changes = [];
        changes.push(["playerNumber", player.number]);
        if (player.net == null) {
          player.net = s = {};
        } else {
          s = player.net;
        }
        ref11 = this.playerFields;
        for (r = 0, len5 = ref11.length; r < len5; r++) {
          f = ref11[r];
          v = player[f];
          if ((v != null) && !simpleEquals(s[f], v)) {
            if (isArray(v)) {
              if (s.length !== v.length) {
                s[f] = new Array(v.length);
              }
              for (i = x = 0, len6 = v.length; x < len6; i = ++x) {
                e = v[i];
                s[f][i] = e;
              }
            } else {
              s[f] = v;
            }
            changes.push([f, v]);
          }
        }
        if (changes.length > 1) {
          splayers.push(changes);
        }
      }
      this.timeEnd("players");
      this.timeStart("other");
      data = {};
      s = this.net;
      if (!s) {
        this.net = s = {};
      }
      ref12 = this.simFields;
      for (y = 0, len7 = ref12.length; y < len7; y++) {
        f = ref12[y];
        if (!simpleEquals(s[f], this[f])) {
          data[f] = this[f];
          s[f] = this[f];
        }
      }
      if (splayers.length > 0) {
        data.players = splayers;
      }
      if (sthings.length > 0) {
        data.things = sthings;
      }
      if (this.fullUpdate) {
        data.fullUpdate = true;
        this.fullUpdate = false;
      }
      if (this.step % 16 === 0) {
        send = false;
        ref13 = this.players;
        for (z = 0, len8 = ref13.length; z < len8; z++) {
          player = ref13[z];
          if (player.name === "treeform" && player.connected) {
            send = true;
          }
        }
        if (send) {
          data.perf = {
            numbers: {
              things: ((function() {
                var results;
                results = [];
                for (t in this.things) {
                  results.push(t);
                }
                return results;
              }).call(this)).length,
              sthings: sthings.length,
              players: ((function() {
                var aa, len9, ref14, results;
                ref14 = this.players;
                results = [];
                for (aa = 0, len9 = ref14.length; aa < len9; aa++) {
                  p = ref14[aa];
                  results.push(p);
                }
                return results;
              }).call(this)).length,
              splayers: splayers.length,
              units: ((function() {
                var ref14, results;
                ref14 = this.things;
                results = [];
                for (_ in ref14) {
                  t = ref14[_];
                  if (t.unit) {
                    results.push(t);
                  }
                }
                return results;
              }).call(this)).length,
              bullets: ((function() {
                var ref14, results;
                ref14 = this.things;
                results = [];
                for (_ in ref14) {
                  t = ref14[_];
                  if (t.bullet) {
                    results.push(t);
                  }
                }
                return results;
              }).call(this)).length,
              others: ((function() {
                var ref14, results;
                ref14 = this.things;
                results = [];
                for (_ in ref14) {
                  t = ref14[_];
                  if (!t.bullet && !t.unit) {
                    results.push(t);
                  }
                }
                return results;
              }).call(this)).length
            },
            timeings: this.timeings
          };
        }
        this.timeings = {};
      }
      this.timeEnd("other");
      this.timeStart("zJson");
      packet = this.zJson.dumpDv(data);
      this.timeEnd("zJson");
      this.timeEnd("send");
      return packet;
    };

    Sim.prototype.clearNetState = function() {
      var id, l, len1, len2, m, part, player, ref, ref1, ref2, results, thing;
      this.fullUpdate = true;
      delete this.net;
      ref = this.things;
      for (id in ref) {
        thing = ref[id];
        delete thing.net;
        if (thing.parts != null) {
          ref1 = thing.parts;
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            part = ref1[l];
            delete part.net;
          }
        }
      }
      ref2 = this.players;
      results = [];
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        player = ref2[m];
        results.push(delete player.net);
      }
      return results;
    };

    Sim.prototype.timeings = {};

    Sim.prototype.timeStarts = {};

    Sim.prototype.timePath = [];

    Sim.prototype.timeStart = function(what) {
      this.timePath.push(what);
      return this.timeStarts[this.timePath.join(">")] = now();
    };

    Sim.prototype.timeEnd = function(what) {
      var delta, key;
      key = this.timePath.join(">");
      if (this.timePath.pop() !== what) {
        throw "timeEnd does not match timeStart";
      }
      delta = now() - this.timeStarts[key];
      if (this.timeings[key] == null) {
        return this.timeings[key] = delta;
      } else {
        return this.timeings[key] += delta;
      }
    };

    Sim.prototype.timeIt = function(what, fn) {
      var ret;
      this.timeStart(what);
      ret = fn();
      this.timeEnd(what);
      return ret;
    };

    Sim.prototype.timeReport = function() {
      var bar, i, k, l, ref, ref1, v;
      ref = this.timeings;
      for (k in ref) {
        v = ref[k];
        bar = "";
        for (i = l = 0, ref1 = v; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
          bar += "*";
        }
        print(bar, k, v);
      }
      return this.timeings = {};
    };

    return Sim;

  })();

}).call(this);
;


//from src/survival.js
// Generated by CoffeeScript 1.10.0
(function() {
  window.survival = {};

  survival.firstWave = 10;

  survival.waveFreq = 30;

  survival.numComPoints = 12;

  survival.startAIMoney = 1500;

  survival.waveAIMoneyMul = 500;

  survival.waveAIPow = 1.2;

  survival.start = function(sim) {
    var key, p, ref, results;
    sim.waveNum = 0;
    sim.say("Get ready. First wave in " + survival.firstWave + "s!");
    ref = sim.players;
    results = [];
    for (key in ref) {
      p = ref[key];
      if (p && p.connected) {
        if (p.side === 'beta') {
          p.money = 1;
          p.moneyRatio = 0;
          p.gainsMoney = 0;
        }
        if (p.side === 'alpha') {
          p.money = 2000;
          p.moneyRatio = 1;
          results.push(p.gainsMoney = 1);
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  survival.endOfGame = function(sim) {
    var key, p, ref, results;
    sim.say("The survivors survived " + sim.waveNum + " waves!");

    /*
     * Remove ships in the case there are too many and cause lag
    for id, object of sim.things
        if object.unit
            object.selfDestruct()
     */
    ref = sim.players;
    results = [];
    for (key in ref) {
      p = ref[key];
      if (p && p.connected) {
        if (p.moneyRatio === 0) {
          results.push(p.moneyRatio = 1);
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  survival.canStart = function(sim) {
    return sim.numInTeam("alpha") > 0 && sim.numInTeam("beta") > 0;
  };

  survival.simulate = function(sim) {
    var aiMoney, betaPlayerCount, j, len, p, ref;
    if (sim.state === 'running') {
      if (((sim.step / 16) - survival.firstWave) % survival.waveFreq === 0) {
        sim.waveNum += 1;
        aiMoney = Math.floor(survival.startAIMoney + Math.pow(survival.waveAIPow, sim.waveNum) * survival.waveAIMoneyMul);
        sim.say("Spawning wave " + sim.waveNum + "! Strength: " + aiMoney);
        betaPlayerCount = sim.players.filter(function(p) {
          return p.side === 'beta';
        }).length;
        ref = sim.players;
        for (j = 0, len = ref.length; j < len; j++) {
          p = ref[j];
          if (p.side === "beta") {
            p.money = Math.round(aiMoney);
          }
        }
      }
    }
  };

  survival.victoryConditions = function(sim) {
    var capped, cappedArr, id, j, k, len, player, ref, ref1, stillThere, thing;
    if (sim.state !== "running") {
      return;
    }
    capped = {};
    ref = sim.things;
    for (id in ref) {
      thing = ref[id];
      if (thing.commandPoint) {
        capped[thing.side] = (capped[thing.side] || 0) + 1;
      }
    }
    cappedArr = (function() {
      var results;
      results = [];
      for (k in capped) {
        results.push(k);
      }
      return results;
    })();
    if (cappedArr.length === 0) {
      return;
    }
    if (cappedArr.length === 1 && cappedArr[0] === "beta") {
      sim.winningSide = cappedArr[0];
    }
    if (sim.winningSide) {
      sim.endOfGame();
      return;
    }
    if (!sim.local && !sim.aiTestMode) {
      stillThere = false;
      ref1 = sim.players;
      for (j = 0, len = ref1.length; j < len; j++) {
        player = ref1[j];
        if (!player.ai && player.connected && !player.afk && player.side !== "spectators") {
          stillThere = true;
        }
      }
      if (!stillThere) {
        sim.say("Every one left. Ending game.");
        sim.winningSide = false;
        sim.endOfGame();
      }
    }
  };

  survival.genSurvival = function() {
    var cp, i, j, ref, results, spawn, th;
    spawn = new types.SpawnPoint();
    spawn.side = "alpha";
    spawn.spawn = "alpha";
    spawn.pos = v2.create([0, 0]);
    sim.things[spawn.id] = spawn;
    cp = function(r, th, side) {
      var point;
      point = new types.CommandPoint();
      point.z = -.01;
      point.pos[0] = Math.cos(th) * r * sim.mapScale;
      point.pos[1] = Math.sin(th) * r * sim.mapScale;
      point.side = side;
      return sim.things[point.id] = point;
    };
    results = [];
    for (i = j = 0, ref = survival.numComPoints; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      th = i * Math.PI * 2 / survival.numComPoints;
      if (i % 2 === 0) {
        results.push(cp(1320, th, "beta"));
      } else {
        results.push(cp(960, th, "alpha"));
      }
    }
    return results;
  };

  survival.rqUnit = function(sim, number, slot) {
    var pos, th;
    th = Math.random() * Math.PI * 2;
    pos = v2.scale(v2.pointTo([], th), 2000 * sim.mapScale);
    return sim.buildUnit(number, slot, pos);
  };

}).call(this);
;


//from src/interpolator.js
// Generated by CoffeeScript 1.10.0
(function() {
  var diffVec,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  diffVec = v2.create();

  window.Interpolator = (function(superClass) {
    extend(Interpolator, superClass);

    Interpolator.prototype.sound = true;

    Interpolator.prototype.fast = false;

    function Interpolator() {
      this.think = bind(this.think, this);
      this.step = 0;
      this.smoothStep;
      this.advanceStep;
      this.firstUpdate = true;
      this.things = {};
      this.players = [];
      this.particles = {};
      this.trails = {};
      this.avgFrame = 9;
      this.lastFrame = 0;
      this.stepTime = now();
      this.t = now();
      this.avgDt = 1 / 60;
      this.avgTime = 1000 / 16;
      this.allMessages = [];
      this.dataQ = [];
      this.wait = 0;
      this.prevWait = 2;
      this.state = "waiting";
      this.pref = {};
      this.zJson = new window.ZJson(prot.commonWords);
    }

    Interpolator.prototype.gameStarted = function() {
      if (!commander) {
        return;
      }
      this.players = [];
      this.things = {};
      this.particles = {};
      this.trails = {};
      this.winningSide = null;
      track("start");
      if (!sim.galaxyStar && !sim.local) {
        if (commander.side !== "spectators") {
          ui.go("battle");
        }
        if (ui.mode === "battleroom" || ui.mode === "quickscore") {
          ui.go("battle");
        }
      }
      return commander.selection = [];
    };

    Interpolator.prototype.focusMap = function() {
      var _, dist, maxDist, ref, thing;
      maxDist = 0;
      ref = sim.things;
      for (_ in ref) {
        thing = ref[_];
        dist = v2.mag(thing.pos);
        if (dist > maxDist) {
          maxDist = dist;
        }
      }
      battleMode.focus = [0, 0];
      return battleMode.zoom = maxDist / 1000;
    };

    Interpolator.prototype.gameEnded = function() {
      actionMixer.reset();
      if (!sim.local) {
        if (commander.side !== "spectators") {
          ui.go("quickscore");
        }
        if (ui.mode === "battle") {
          ui.go("quickscore");
        }
      }
      return this.uploadReplay();
    };

    Interpolator.prototype.drawThingsList = function() {
      var _, particle, ref, ref1, ref2, thing, things;
      things = [];
      ref = this.things;
      for (_ in ref) {
        thing = ref[_];
        things.push(thing);
      }
      ref1 = this.particles;
      for (_ in ref1) {
        particle = ref1[_];
        things.push(particle);
      }
      ref2 = this.trails;
      for (_ in ref2) {
        particle = ref2[_];
        things.push(particle);
      }
      return things;
    };

    Interpolator.prototype.draw = function() {
      var ai, color, i, j, l, len, len1, len2, len3, m, o, p, player, q, ref, ref1, ref2, thing, things;
      this.advance();
      if (typeof sim !== "undefined" && sim !== null ? sim.ais : void 0) {
        ref = sim.ais;
        for (j = 0, len = ref.length; j < len; j++) {
          ai = ref[j];
          ai.draw();
        }
      }
      things = this.drawThingsList();
      things.sort(function(a, b) {
        return a.z - b.z;
      });
      for (l = 0, len1 = things.length; l < len1; l++) {
        thing = things[l];
        thing.draw();
      }
      color = [0, 0, 0, 0];
      ref1 = this.players;
      for (o = 0, len2 = ref1.length; o < len2; o++) {
        player = ref1[o];
        if (!player) {
          continue;
        }
        if (player.name !== (typeof commander !== "undefined" && commander !== null ? commander.name : void 0) && player.side !== "spectators" && player.side !== "dead" && player.connected) {
          if (player.mouse[0] !== 0 && player.mouse[1] !== 0 && player._mouse) {
            m = [0, 0];
            color = [player.color[0], player.color[1], player.color[2], 255];
            v2.lerp(player._mouse, player.mouse, this.smoothFactor, m);
            player.mouseTrail.push(m);
            while (player.mouseTrail.length > 10) {
              player.mouseTrail.shift();
            }
            ref2 = player.mouseTrail;
            for (i = q = 0, len3 = ref2.length; q < len3; i = ++q) {
              p = ref2[i];
              color[3] = 255 / (10 - i + 1);
              baseAtlas.drawSprite("img/pip1.png", p, [1, 1], 0, color);
            }
            if (player.action) {
              baseAtlas.drawSprite("img/pip1.png", m, [2, 2], 0, player.color);
            }
          }
        }
        if (player.name === (typeof commander !== "undefined" && commander !== null ? commander.name : void 0)) {
          player.selection = commander.selection;
          player.draw();
        }
      }

      /*  * uncomment this to debug
      for _, t of intp.things
          #baseAtlas.drawSprite("img/pip1.png", t._pos2,  [1,1], 0, [0,255,0,100])
          #baseAtlas.drawSprite("img/pip1.png", t._pos, [1,1], 0, [255,0,0,100])
          if t.unit
              for p in t.testIntp
                  baseAtlas.drawSprite("img/pip1.png", p, [.2,.2], 0, [255,0,0,100])
              #for p in t.testStep
               *    baseAtlas.drawSprite("img/pip1.png", p, [.4,.4], 0, [0,255,0,100])
       */
    };

    Interpolator.prototype.advance = function() {
      if (this.fast) {
        return this.advanceSnap();
      } else {
        return this.advanceSmooth();
      }
    };

    Interpolator.prototype.advanceSnap = function() {
      var i, id, j, len, ref, ref1, thing, weapon;
      this.t = now();
      this.smoothFactor = 1;
      ref = this.things;
      for (id in ref) {
        thing = ref[id];
        v2.set(thing._pos, thing.pos);
        thing.rot = thing._rot;
        if (thing.weapons != null) {
          ref1 = thing.weapons;
          for (i = j = 0, len = ref1.length; j < len; i = ++j) {
            weapon = ref1[i];
            weapon.rot = weapon._rot;
          }
        }
      }
      return null;
    };

    Interpolator.prototype.advanceSmooth = function() {
      var a, angleDiff, difference, expectedLastStep, i, id, j, jumpDiff, len, part, ref, ref1, ref2, thing, timeLastStep;
      this.t = now();

      /*  * uncomment this to debug
       * instant
      if @dataQ.length > 0
          @process(@dataQ.pop())
       */
      if (this.dataQ.length > 0) {
        timeLastStep = this.t - this.stepTime;
        expectedLastStep = 1000 / 16;
        difference = timeLastStep / expectedLastStep;
        if (difference > 1 - this.dataQ.length * .1) {
          this.process(this.dataQ.pop());
        }
      }

      /*  * uncomment this to debug
       * high jitter
      if @dataQ.length > 16
          timeLastStep = @t - @stepTime
          expectedLastStep = 1000/16
          faster = 0
          if @dataQ.length > 16
              faster = (@dataQ.length-16)
          console.log "difference", timeLastStep, expectedLastStep, @dataQ.length, faster
          if timeLastStep > expectedLastStep - faster
              @process(@dataQ.pop())
       */
      this.lastFrame += 1;
      a = this.lastFrame / this.avgFrame;
      this.smoothFactor = a;
      this.smoothStep = this.step + a;
      if (a > 1) {
        a = 1;
      }
      if (a < 0) {
        a = 0;
      }
      if (this.smoothFactor > 10) {
        this.smoothFactor = 10;
      }
      ref = this.things;
      for (id in ref) {
        thing = ref[id];
        thing.pos[0] = thing._pos2[0] + (thing._pos[0] - thing._pos2[0]) * a;
        thing.pos[1] = thing._pos2[1] + (thing._pos[1] - thing._pos2[1]) * a;
        angleDiff = angleBetween(thing._rot2, thing._rot);
        thing.rot = thing._rot2 + angleDiff * a;
        if (thing.parts != null) {
          ref1 = thing.parts;
          for (i = j = 0, len = ref1.length; j < len; i = ++j) {
            part = ref1[i];
            angleDiff = angleBetween(part._rot2, part._rot);
            part.rot = part._rot2 + angleDiff * a;
          }
        }
        if (thing.jump != null) {
          jumpDiff = thing._jump2 - thing._jump;
          thing.jump = thing._jump + jumpDiff * a;
        }
      }
      ref2 = this.particles;
      for (id in ref2) {
        thing = ref2[id];
        thing.pos[0] = thing._pos2[0] + (thing._pos[0] - thing._pos2[0]) * a;
        thing.pos[1] = thing._pos2[1] + (thing._pos[1] - thing._pos2[1]) * a;
        angleDiff = angleBetween(thing._rot2, thing._rot);
        thing.rot = thing._rot2 + angleDiff * a;
      }
      return null;
    };

    Interpolator.prototype.replay = "off";

    Interpolator.prototype.recordReplay = function() {
      this.replay = "recording";
      return this.replayFrames = [];
    };

    Interpolator.prototype.uploadReplay = function() {
      var data, frame;
      if (this.replay === "recording") {
        this.replay = "off";
        data = JSON.stringify((function() {
          var j, len, ref, results;
          ref = this.replayFrames;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            frame = ref[j];
            results.push(dv2str(frame));
          }
          return results;
        }).call(this));
        localStorage.replay = data;
      }
    };

    Interpolator.prototype.playReplay = function() {
      var data, frame;
      this.players = [];
      this.things = {};
      this.particles = {};
      this.winningSide = null;
      this.replay = "playing";
      this.replayStep = 0;
      data = localStorage.replay;
      this.replayFrames = (function() {
        var j, len, ref, results;
        ref = JSON.parse(data);
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          frame = ref[j];
          results.push(str2dv(frame));
        }
        return results;
      })();
      return this.local = false;
    };

    Interpolator.prototype.recv = function(data) {
      this.dataQ.unshift(data);
      while (this.dataQ.length > 32) {
        this.process(this.dataQ.pop());
      }
      return stats.simAdd();
    };

    Interpolator.prototype.think = function() {};

    Interpolator.prototype.debugDraw = function() {
      var j, l, ref, ref1, results, x;
      for (x = j = 0, ref = this.prevWait; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
        baseAtlas.drawSprite("img/pip1.png", [20 + x * 40 - window.innerWidth, window.innerHeight - 120], [1, 1], 0, [0, 0, 0, 255]);
      }
      results = [];
      for (x = l = 0, ref1 = this.dataQ.length; 0 <= ref1 ? l < ref1 : l > ref1; x = 0 <= ref1 ? ++l : --l) {
        results.push(baseAtlas.drawSprite("img/pip1.png", [20 + x * 40 - window.innerWidth, window.innerHeight - 120], [1, 1], 0, [255, 255, 255, 255]));
      }
      return results;
    };

    Interpolator.prototype.process = function(data) {
      var _, dt, id, j, k, kv, l, len, len1, len2, len3, len4, len5, len6, len7, len8, n, newObj, newThing, number, o, p, part, player, q, r, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, selection, t, thing, trail, u, unit, v, w, y, z;
      if (this.replay === "recording") {
        this.replayFrames.push(packet);
      }
      t = now();
      dt = t - this.stepTime;
      this.avgTime = this.avgTime * .9 + dt * .1;
      this.stepTime = t;
      this.avgFrame = this.avgFrame * .9 + this.lastFrame * .1;
      this.lastFrame = 0;
      if (intp.players.length === 0 && !data.fullUpdate && commander) {
        print("waiting for full update");
        return;
      }
      intp.advanceStep = 0;
      if (data.fullUpdate) {
        intp.step = data.step;
      } else if (data.step != null) {
        if (intp.step + 1 === data.step) {
          intp.step += 1;
          intp.advanceStep = 1;
        } else {
          print("Over step, what about full update?");
          return;
        }
      }
      if (data.winningSide) {
        intp.winningSide = data.winningSide;
        onecup.refresh();
      }
      if (data.state) {
        intp.state = data.state;
        onecup.refresh();
      }
      if (intp.state === "starting") {
        this.gameStarted();
      }
      if (intp.state === "ended") {
        console.log("ended");
        this.gameEnded();
      }
      if (data.serverType) {
        intp.serverType = data.serverType;
        onecup.refresh();
      }
      if (data.theme) {
        intp.theme = data.theme;
      }
      if (intp.countDown === 5 * 16 && !sim.local) {
        onecup.refresh();
      }
      if (data.countDown != null) {
        intp.countDown = data.countDown;
        if (intp.countDown % 16 === 0 && intp.state === "waiting") {
          onecup.refresh();
        }
      }
      designMode.locked = intp.serverType === "1v1t" && intp.state === "running" && commander.side !== "spectators";
      if (data.perf) {
        intp.perf = data.perf;
        if (control.perf) {
          onecup.refresh();
        }
      }
      ref = intp.things;
      for (_ in ref) {
        thing = ref[_];
        v2.add(thing._pos, thing.vel);
        v2.set(thing.pos, thing._pos2);
        thing._rot2 = thing.rot;
        if (thing.parts != null) {
          ref1 = thing.parts;
          for (j = 0, len = ref1.length; j < len; j++) {
            part = ref1[j];
            part._rot2 = part.rot;
          }
        }
      }
      ref2 = intp.players;
      for (l = 0, len1 = ref2.length; l < len1; l++) {
        player = ref2[l];
        player._mouse = player.mouse;
      }
      if (data.things) {
        ref3 = data.things;
        for (o = 0, len2 = ref3.length; o < len2; o++) {
          t = ref3[o];
          thing = null;
          part = null;
          newObj = false;
          for (q = 0, len3 = t.length; q < len3; q++) {
            kv = t[q];
            k = kv[0], v = kv[1];
            switch (k) {
              case "thingId":
                thing = intp.things[v];
                if (!thing) {
                  thing = {
                    dummy: true
                  };
                  newObj = true;
                }
                thing.id = v;
                part = null;
                newObj = false;
                break;
              case "spec":
                if (thing.dummy) {
                  newThing = new types[thing.name](v);
                  newThing.id = thing.id;
                  newThing.name = thing.name;
                  intp.things[newThing.id] = newThing;
                  thing = newThing;
                  newObj = true;
                }
                break;
              case "pos":
                if (newObj || (thing._pos == null)) {
                  thing.pos = v2.create(v);
                  thing._pos = v2.create(thing.pos);
                  thing._pos2 = v2.create(thing.pos);
                } else {
                  v2.set(v, thing._pos);
                }
                break;
              case "rot":
                if (newObj) {
                  thing.rot = v;
                  thing._rot = thing.rot;
                  thing._rot2 = thing.rot;
                  if (thing.weapons) {
                    ref4 = thing.weapons;
                    for (r = 0, len4 = ref4.length; r < len4; r++) {
                      w = ref4[r];
                      w.rot = thing.rot;
                      w._rot = thing.rot;
                      w._rot2 = thing.rot;
                    }
                  }
                } else {
                  thing._rot = v;
                }
                break;
              case "jump":
                thing._jump = thing._jump2 || v;
                thing.jump = thing._jump2 = v;
                break;
              case "dead":
                thing.dead = v;
                if (thing.dead) {
                  if (typeof thing.createDebree === "function") {
                    thing.createDebree();
                  }
                }
                break;
              case "partId":
                if (thing.parts) {
                  part = thing.parts[v];
                  newObj = false;
                } else {
                  part = {};
                }
                break;
              case "partWorking":
                part.working = v;
                break;
              case "partTargetId":
                part.targetId = v;
                break;
              case "orders":
                thing.orders = v;
                if (thing.preOrders) {
                  thing.preOrders = thing.preOrders.filter(function(order) {
                    return order.step + 16 * 5 < sim.step;
                  });
                }
                break;
              default:
                thing[k] = v;
            }
          }
        }
      }
      if (data.players) {
        ref5 = data.players;
        for (s = 0, len5 = ref5.length; s < len5; s++) {
          p = ref5[s];
          player = null;
          for (u = 0, len6 = p.length; u < len6; u++) {
            kv = p[u];
            k = kv[0], v = kv[1];
            if (k === "playerNumber") {
              while (intp.players.length <= v) {
                intp.players.push(new Player());
              }
              player = intp.players[v];
              player.number = v;
            } else {
              player[k] = v;
            }
            if ((k === "buildQ" || k === "validBar") && commander.name === player.name) {
              onecup.refresh();
            }
          }
        }
      }
      ref6 = intp.things;
      for (_ in ref6) {
        thing = ref6[_];
        if (thing.targetId) {
          thing.target = intp.things[thing.targetId];
        }
        if (thing.originId) {
          thing.origin = intp.things[thing.originId];
        }
      }
      ref7 = this.things;
      for (id in ref7) {
        thing = ref7[id];
        if (typeof thing.clientTick === "function") {
          thing.clientTick();
        }
        if (thing.dead) {
          delete this.things[id];
        }
      }
      ref8 = this.players;
      for (number = y = 0, len7 = ref8.length; y < len7; number = ++y) {
        player = ref8[number];
        if ((typeof commander !== "undefined" && commander !== null) && (player != null ? player.ai : void 0) === false && commander.name === (player != null ? player.name : void 0)) {
          if (player.side) {
            commander.side = player.side;
          }
          if (player.money) {
            commander.money = player.money;
          }
          if (player.selection) {
            commander.selection = player.selection;
          }
          if (player.buildQ) {
            commander.buildQ = player.buildQ;
          }
          if (player.validBar) {
            commander.validBar = player.validBar;
          }
          if (player.rallyPoint) {
            commander.rallyPoint = player.rallyPoint;
          }
          commander.number = number;
          if (player.host != null) {
            commander.host = player.host;
          }
        }
        if (!player.name) {
          player.name = "no name";
        }
        if (!player.side) {
          player.side = "spectators";
        }
        if (!player.color) {
          player.color = [255, 0, 0, 255];
        }
      }
      ref9 = this.particles;
      for (id in ref9) {
        thing = ref9[id];
        if (thing.dead) {
          delete this.particles[id];
          continue;
        }
        if (!thing._pos) {
          thing._pos = v2.create(thing.pos);
        }
        if (!thing._pos2) {
          thing._pos2 = v2.create(thing.pos);
        }
        v2.set(thing.pos, thing._pos2);
        thing._rot2 = thing.rot;
        if (this.advanceStep === 1) {
          if (typeof thing.tick === "function") {
            thing.tick();
          }
          if (typeof thing.move === "function") {
            thing.move();
          }
        }
        v2.set(thing.pos, thing._pos);
        thing._rot = thing.rot;
      }
      ref10 = this.trails;
      for (id in ref10) {
        trail = ref10[id];
        if (trail.trail.length === 0 && (this.things[trail.parentId] == null)) {
          delete this.trails[id];
        }
      }
      if (this.state === "starting") {
        this.focusMap();
        this.state = "running";
        onecup.refresh();
      }
      if (this.state === "ended") {
        this.state = "waiting";
        onecup.refresh();
        if (this.winningSide === false) {
          playSound("sounds/drone/draw.wav");
        } else if (this.winningSide === (typeof commander !== "undefined" && commander !== null ? commander.side : void 0)) {
          playSound("sounds/drone/victory.wav");
        } else {
          playSound("sounds/drone/defeat.wav");
        }
        onecup.refresh();
      }
      if ((ref11 = onecup.lookup("#money-text")) != null) {
        ref11.innerHTML = buildBar.moneyText();
      }
      if ((ref12 = onecup.lookup("#money-income")) != null) {
        ref12.innerHTML = buildBar.moneyIncomeText();
      }
      buildBar.updateUnitBubble();
      if (typeof commander !== "undefined" && commander !== null ? commander.selection : void 0) {
        selection = [];
        ref13 = commander.selection;
        for (n = z = 0, len8 = ref13.length; z < len8; n = ++z) {
          unit = ref13[n];
          thing = this.things[unit.id];
          if (thing) {
            selection.push(thing);
          }
        }
        commander.selection = selection;
      }
      if (localStorage.useAi === "true" && localStorage.aiGrid === "true") {
        if (ui.mode === "battle" && (typeof commander !== "undefined" && commander !== null ? (ref14 = commander.selection) != null ? ref14.length : void 0 : void 0) > 0) {
          return onecup.refresh();
        }
      }
    };

    return Interpolator;

  })(window.Sim);

}).call(this);
;


//from src/things.js
// Generated by CoffeeScript 1.10.0

/*
General Game Objects live here
 */

(function() {
  var Explosion, _color, _focus, _offset, _pos, _size, _vec, anitSideColor, sideColor,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _pos = v2.create();

  _vec = v2.create();

  window.drawAllArcs = function(unit) {
    var arc, cur, i, j, l, len, n, pos, range, ref, ref1, ref2, results, th, w, x, y;
    ref = unit.weapons;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      w = ref[j];
      range = w.range;
      arc = w.arc;
      cur = Math.PI * range * 2;
      n = Math.floor(cur / 40 * arc / 360);
      for (i = l = ref1 = -n, ref2 = n; ref1 <= ref2 ? l < ref2 : l > ref2; i = ref1 <= ref2 ? ++l : --l) {
        th = i / (n * 2) * arc / 180 * Math.PI + unit.rot + Math.PI;
        x = Math.sin(-th) * range;
        y = Math.cos(-th) * range;
        pos = [w.worldPos[0] + x, w.worldPos[1] + y];
        baseAtlas.drawSprite("img/arrow02.png", pos, [.25, .25], th + Math.PI, [255, 0, 0, 255]);
      }
      if (w.minRange > 0) {
        cur = Math.PI * w.minRange * 2;
        n = Math.floor(cur / 40 * arc / 360);
        results.push((function() {
          var m, ref3, ref4, results1;
          results1 = [];
          for (i = m = ref3 = -n, ref4 = n; ref3 <= ref4 ? m < ref4 : m > ref4; i = ref3 <= ref4 ? ++m : --m) {
            th = i / (n * 2) * arc / 180 * Math.PI + unit.rot + Math.PI;
            x = Math.sin(-th) * w.minRange;
            y = Math.cos(-th) * w.minRange;
            pos = [w.worldPos[0] + x, w.worldPos[1] + y];
            results1.push(baseAtlas.drawSprite("img/arrow02.png", pos, [.25, .25], th, [255, 0, 0, 255]));
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  window.drawDottedCircle = function(pos, radius, color) {
    var i, j, n, ref, results, th, x, y;
    n = 40;
    results = [];
    for (i = j = 0, ref = 2 * n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      th = i / n * 2 * Math.PI;
      x = Math.sin(th) * radius;
      y = Math.cos(th) * radius;
      results.push(baseAtlas.drawSprite("img/map/spawnSlice.png", [pos[0] + x, pos[1] + y], [Math.min(radius / 500, .4), radius / 1000], -th + Math.PI / 2, color));
    }
    return results;
  };

  window.players = {};

  window.Player = (function() {
    Player.prototype.gainsMoney = true;

    Player.prototype.ready = false;

    Player.prototype.actions = 0;

    Player.prototype.apm = 0;

    Player.prototype.capps = 0;

    Player.prototype.kills = 0;

    Player.prototype.unitsBuilt = 0;

    Player.prototype.moneyEarned = 0;

    Player.prototype.moneyRatio = 1;

    Player.prototype.aiRules = null;

    Player.prototype.host = false;

    Player.prototype.ai = false;

    function Player(id1) {
      this.id = id1;
      this.side = this.id;
      this.color = randColor(200);
      this.reset();
    }

    Player.prototype.reset = function() {
      var n;
      this.money = sim.defaultMoney;
      this.mouse = [0, 0];
      this.rallyPoint = [0, 0];
      this.selection = [];
      this.buildQ = [];
      this.validBar = (function() {
        var j, results;
        results = [];
        for (n = j = 0; j < 10; n = ++j) {
          results.push(true);
        }
        return results;
      })();
      this.actions = 0;
      this.apm = 0;
      this.capps = 0;
      this.kills = 0;
      this.unitsBuilt = 0;
      this.moneyEarned = 0;
      return this.mouseTrail = [];
    };

    Player.prototype.earnMoney = function(amount) {
      amount *= this.moneyRatio;
      this.money += amount;
      return this.moneyEarned += amount;
    };

    Player.prototype.tick = function() {
      if (sim.step % 16 === 0) {
        if (this.gainsMoney && sim.gainsMoney) {
          this.earnMoney(10);
        }
        this.apm = this.actions / (sim.step / 16 / 60);
      }
      if (this.aiRules) {
        sim.timeIt("ai", (function(_this) {
          return function() {
            return doPlayerAIRules(_this);
          };
        })(this));
      }
      return this.wave();
    };

    Player.prototype.wave = function() {
      var build, i, j, len, n, ref, slot, waitTime;
      waitTime = 16 * 2;
      if (sim.step > waitTime && sim.step % 16 === 0) {
        build = false;
        ref = this.buildQ;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          slot = ref[i];
          if (this.rqUnit(slot)) {
            this.buildQ[i] = null;
            build = true;
          } else {
            break;
          }
        }
        if (build) {
          return this.buildQ = (function() {
            var l, len1, ref1, results;
            ref1 = this.buildQ;
            results = [];
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              n = ref1[l];
              if (n !== null) {
                results.push(n);
              }
            }
            return results;
          }).call(this);
        }
      }
    };

    Player.prototype.rqUnit = function(slot) {
      var spawn, unit;
      if (sim.serverType === 'survival' && this.side === 'beta') {
        unit = survival.rqUnit(sim, this.number, slot);
      } else {
        spawn = sim.findSpawnPoint(this.side);
        if (spawn) {
          unit = sim.buildUnit(this.number, slot, spawn.pos);
          if (unit) {
            v2.random(unit.pos);
            v2.scale(unit.pos, 100 + Math.random() * (spawn.radius - 100));
            v2.add(unit.pos, spawn.pos);
          }
        }
      }
      if (unit) {
        this.unitsBuilt += 1;
        if (this.rallyPoint[0] !== 0 && this.rallyPoint[1] !== 0) {
          unit.setOrder({
            type: "Move",
            dest: this.rallyPoint,
            rally: true
          });
        }
        return unit;
      }
      return null;
    };

    Player.prototype.draw = function() {
      var angle, arc, arcRad, color, cur, drawIt, i, j, len, n, other, range, ref, ref1, ref2, results, t, th, x, y;
      if (!ui.show) {
        return;
      }
      if ((ref = sim.galaxyStar) != null) {
        if (typeof ref.draw === "function") {
          ref.draw();
        }
      }
      if (battleMode.rallyPlacing) {
        baseAtlas.drawSprite("img/unitBar/rallyPoint.png", battleMode.mouse, [1, 1], 0);
      } else if (commander.rallyPoint && commander.rallyPoint[0] !== 0 && commander.rallyPoint[1] !== 0) {
        baseAtlas.drawSprite("img/unitBar/rallyPoint.png", commander.rallyPoint, [1, 1], 0);
      }
      if (!this.selection) {
        return;
      }
      ref1 = this.selection;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        t = ref1[j];
        if (t.dead) {
          continue;
        }
        color = this.color;
        if (typeof t.drawSelection === "function") {
          t.drawSelection(color);
        }
        if (this.selection.length === 1) {
          if (t.weapons) {
            drawAllArcs(t);
          }
          if (t.jump > t.minJump) {
            results.push(drawDottedCircle(t.pos, t.jump, [0, 0, 0, 125]));
          } else {
            results.push(void 0);
          }
        } else {
          if (((ref2 = t.weapons) != null ? ref2.length : void 0) > 0) {
            range = t.weaponRange;
            arc = t.weaponArc;
            cur = Math.PI * range * 2;
            n = Math.floor(cur / 80 * arc / 360);
            results.push((function() {
              var l, len1, m, ref3, ref4, ref5, results1;
              results1 = [];
              for (i = l = ref3 = -n, ref4 = n; ref3 <= ref4 ? l < ref4 : l > ref4; i = ref3 <= ref4 ? ++l : --l) {
                th = i / (n * 2) * arc / 180 * Math.PI + t.rot + Math.PI;
                x = Math.sin(-th) * range;
                y = Math.cos(-th) * range;
                _pos[0] = t.pos[0] + x;
                _pos[1] = t.pos[1] + y;
                drawIt = true;
                ref5 = this.selection;
                for (m = 0, len1 = ref5.length; m < len1; m++) {
                  other = ref5[m];
                  if (other.unit && other.id !== t.id && other.owner === t.owner) {
                    if ((other.weapons != null) && other.weapons.length > 0) {
                      v2.sub(_pos, other.pos, _vec);
                      if (v2.mag(_vec) < other.weaponRange) {
                        angle = v2.angle(_vec);
                        arcRad = other.weaponArc / 180 * Math.PI;
                        if (Math.abs(angleBetween(angle, other.rot)) < arcRad / 2) {
                          drawIt = false;
                          break;
                        }
                      }
                    }
                  }
                }
                if (drawIt) {
                  results1.push(baseAtlas.drawSprite("img/arrow02.png", _pos, [.5, .5], th + Math.PI, [255, 0, 0, 255]));
                } else {
                  results1.push(void 0);
                }
              }
              return results1;
            }).call(this));
          } else {
            results.push(void 0);
          }
        }
      }
      return results;
    };

    return Player;

  })();

  _color = [0, 0, 0, 0];

  window.Trail = (function() {
    function Trail(parentId, trailSize, trailTime, color1, z) {
      this.parentId = parentId;
      this.trailSize = trailSize;
      this.trailTime = trailTime;
      this.color = color1;
      if (typeof intp === "undefined" || intp === null) {
        return;
      }
      this.trail = [];
      this.id = sim.nid();
      intp.trails[this.id] = this;
      this.z = z - 0.0001;
    }

    Trail.prototype.grow = function(pos) {
      if (typeof intp === "undefined" || intp === null) {
        return;
      }
      if (this.trail.length === 0 || v2.distance(this.trail[this.trail.length - 1][0], pos) > 2) {
        return this.trail.push([[pos[0], pos[1]], intp.smoothStep]);
      }
    };

    Trail.prototype.draw = function() {
      var alive, j, len, p, ref, ref1, results, s, t;
      while (this.trail.length > 0 && intp.smoothStep - this.trail[0][1] > this.trailTime) {
        this.trail.shift();
      }
      _color[0] = 155 + this.color[0] / 255 * 100;
      _color[1] = 155 + this.color[1] / 255 * 100;
      _color[2] = 155 + this.color[2] / 255 * 100;
      _color[3] = 0;
      s = this.trailSize;
      ref = this.trail;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        ref1 = ref[j], p = ref1[0], t = ref1[1];
        alive = (intp.smoothStep - t) / this.trailTime;
        if (alive < 1 && alive > 0) {
          _color[3] = 255 - 255 * alive;
        } else {
          _color[3] = 0;
        }
        results.push(baseAtlas.drawSprite("img/fire02.png", p, [s, s], 0, _color));
      }
      return results;
    };

    return Trail;

  })();

  window.Particle = (function() {
    Particle.prototype.image = null;

    Particle.prototype.size = [.1, .1];

    Particle.prototype.maxLife = 60;

    Particle.prototype.radius = 1;

    function Particle() {
      this.id = sim.nid();
      this.color = [255, 255, 255, 255];
      this.life = 0;
      this.dead = false;
      this.z = Math.random();
      this.pos = v2.create();
      this.vel = v2.create();
      this._pos = v2.create();
      this._pos2 = v2.create();
      this.rot = 0;
      if (this.sound) {
        playSound(this.sound, this.soundVolume);
      }
    }

    Particle.prototype.move = function() {
      if (this.dead) {
        return;
      }
      v2.add(this.pos, this.vel);
      this.life += 1;
      if (this.life > this.maxLife) {
        return this.dead = true;
      }
    };

    Particle.prototype.draw = function() {
      if (this.dead) {
        return;
      }
      return baseAtlas.drawSprite(this.image, this.pos, this.size, this.rot, this.color);
    };

    return Particle;

  })();

  Explosion = (function(superClass) {
    extend(Explosion, superClass);

    function Explosion() {
      return Explosion.__super__.constructor.apply(this, arguments);
    }

    Explosion.prototype.image = "img/unitBar/pip1.png";

    Explosion.prototype.maxLife = 30;

    Explosion.prototype.radius = 2;

    Explosion.prototype.sound = "sounds/weapons/thud2.wav";

    Explosion.prototype.soundVolume = .1;

    Explosion.prototype.draw = function() {
      var fade, s;
      if (this.dead) {
        return;
      }
      fade = this.life / this.maxLife;
      s = .1 + fade * fade * this.radius;
      this.color[3] = (1 - fade) * 255;
      return baseAtlas.drawSprite(this.image, this.pos, [s, s], this.rot, this.color);
    };

    return Explosion;

  })(Particle);

  window.Bullet = (function(superClass) {
    extend(Bullet, superClass);

    Bullet.prototype.image = "img/unitBar/pip1.png";

    Bullet.prototype.damage = 1;

    Bullet.prototype.speed = 10;

    Bullet.prototype.size = [1, 1];

    Bullet.prototype.bullet = true;

    Bullet.prototype.radius = 10;

    Bullet.prototype.hitsMultiple = false;

    Bullet.prototype.hitExplosion = "HitExplosion";

    Bullet.prototype.side = null;

    Bullet.prototype.hitsCloak = false;

    function Bullet() {
      Bullet.__super__.constructor.call(this);
      actionMixer.action += .05;
    }

    Bullet.prototype.applyDamage = function() {
      return this.dead = true;
    };

    Bullet.prototype.move = function() {
      if (this.dead) {
        return;
      }
      v2.add(this.pos, this.vel);
      return this.life += 1;
    };

    Bullet.prototype.tick = function() {
      var exp;
      if (this.life > this.maxLife) {
        this.dead = true;
        return;
      }
      if (this.explode === false) {
        this.dead = true;
        return;
      }
      this.scan();
      if (this.dead) {
        exp = new types[this.hitExplosion]();
        exp.z = 1000;
        exp.pos = [this.pos[0], this.pos[1]];
        if (this.t !== null) {
          v2.add(exp.pos, v2.scale(this.vel, this.t));
        }
        exp.vel = [0, 0];
        exp.rot = 0;
        exp.radius = 0.75;
        return sim.things[exp.id] = exp;
      }
    };

    Bullet.prototype.scan = function() {
      sim.unitSpaces[otherSide(this.side)].findInRange(this.pos, this.radius + this.speed + 500, (function(_this) {
        return function(unit) {
          if (_this.collide(unit)) {
            _this.hitUnit(unit);
            if (_this.hitsMultiple) {
              return false;
            }
            return true;
          }
          return false;
        };
      })(this));
      if (this.hitsMissiles) {
        return sim.bulletSpaces[otherSide(this.side)].findInRange(this.pos, this.radius + this.speed + 100, (function(_this) {
          return function(missle) {
            if (missle.missile && _this.collide(missle)) {
              _this.hitMissle(missle);
              if (_this.hitsMultiple) {
                return false;
              }
              return true;
            }
            return false;
          };
        })(this));
      }
    };

    Bullet.prototype.hitUnit = function(thing) {
      thing.applyDamage(this.damage);
      if (this.energyDamage) {
        thing.applyEnergyDamage(this.energyDamage);
      }
      if (!this.hitsMultiple) {
        return this.dead = true;
      }
    };

    Bullet.prototype.hitMissle = function(thing) {
      thing.life = thing.maxLife;
      return thing.explode = false;
    };

    Bullet.prototype._collide = function(thing) {
      var distance, speed;
      distance = v2.distance(this.pos, thing.pos);
      speed = v2.mag(thing.vel) + v2.mag(this.vel);
      return distance < thing.radius;
    };

    Bullet.prototype.collide = function(thing) {
      var c, distance, r, speed, t1, t2, ta, tb, tc, v;
      if (!this.hitsCloak && thing.cloak && thing.cloaked()) {
        return false;
      }
      distance = v2.distance(this.pos, thing.pos);
      if (distance < thing.radius + this.radius) {
        return true;
      }
      speed = v2.mag(thing.vel) + v2.mag(this.vel);
      if (distance > thing.radius + this.radius + speed) {
        return false;
      }
      this.t = null;
      c = [0, 0];
      v2.sub(this.pos, thing.pos, c);
      v = [0, 0];
      v2.sub(this.vel, thing.vel, v);
      r = this.radius + thing.radius;
      ta = -(c[0] * v[0] + c[1] * v[1]);
      tb = Math.sqrt(r * r * (v[0] * v[0] + v[1] * v[1]) - Math.pow(c[0] * v[1] - c[1] * v[0], 2));
      tc = v[0] * v[0] + v[1] * v[1];
      t1 = (ta - tb) / tc;
      t2 = (ta + tb) / tc;
      if (t1 > 0 && t1 < t2) {
        this.t = t1;
      }
      if (t2 > 0 && t2 < t1) {
        this.t = t2;
      }
      if (this.t !== null) {
        return this.t > 0 && this.t < 1;
      }
      return false;
    };

    Bullet.prototype.__collide = function(thing) {
      var distance, j, len, part, ref, speed;
      if (!this.hitsCloak && thing.cloak && thing.cloaked()) {
        return false;
      }
      speed = v2.mag(thing.vel) + v2.mag(this.vel);
      if (distance > thing.radius + this.radius + speed) {
        return false;
      }
      distance = v2.distance(this.pos, thing.pos);
      if (distance < thing.radius + this.radius) {
        ref = thing.parts;
        for (j = 0, len = ref.length; j < len; j++) {
          part = ref[j];
          distance = v2.distance(this.pos, part.worldPos) - this.radius - 10;
          if (distance < 0) {
            return true;
          }
        }
      }
      return false;
    };

    return Bullet;

  })(Particle);

  _offset = v2.create();

  window.LaserBullet = (function(superClass) {
    extend(LaserBullet, superClass);

    function LaserBullet() {
      return LaserBullet.__super__.constructor.apply(this, arguments);
    }

    LaserBullet.prototype.image = "img/laser01.png";

    LaserBullet.prototype.size = [1, 1];

    LaserBullet.prototype.color = [179, 207, 255, 255];

    LaserBullet.prototype.speed = 2000;

    LaserBullet.prototype.damage = 2.5;

    LaserBullet.prototype.maxLife = 3;

    LaserBullet.prototype.drawLength = 437;

    LaserBullet.prototype.move = function() {};

    LaserBullet.prototype.tick = function() {
      if (this.dead) {
        return;
      }
      this.life += 1;
      if (this.life > this.maxLife) {
        return this.dead = true;
      }
    };

    LaserBullet.prototype.draw = function() {
      var d, rot, w;
      if (this.target) {
        v2.set(this.target.pos, this.targetPos);
      }
      if (this.origin) {
        w = this.origin.weapons[this.turretNum || 0];
        if (w) {
          v2.set(w.worldPos, this.pos);
        }
      }
      v2.sub(this.targetPos, this.pos, _offset);
      rot = v2.angle(_offset);
      d = v2.mag(_offset) / this.drawLength;
      v2.scale(_offset, .5);
      v2.add(_offset, this.pos);
      if (w) {
        w.rot = rot;
      }
      return baseAtlas.drawSprite(this.image, _offset, [this.size[0], d], rot, this.color);
    };

    return LaserBullet;

  })(Bullet);

  types.FlackExplosion = (function(superClass) {
    extend(FlackExplosion, superClass);

    function FlackExplosion() {
      return FlackExplosion.__super__.constructor.apply(this, arguments);
    }

    FlackExplosion.prototype.image = "img/fire02.png";

    FlackExplosion.prototype.maxLife = 3;

    FlackExplosion.prototype.radius = 2;

    FlackExplosion.prototype.sound = "sounds/weapons/thud1.wav";

    FlackExplosion.prototype.soundVolume = .1;

    FlackExplosion.prototype.draw = function() {
      var fade, s;
      if (this.dead) {
        return;
      }
      fade = this.life / this.maxLife;
      s = this.radius / 2;
      this.color[3] = (1 - Math.pow(fade, 2)) * 80;
      return baseAtlas.drawSprite(this.image, this.pos, [s, s], this.rot, this.color);
    };

    return FlackExplosion;

  })(Explosion);

  window.AoeBullet = (function(superClass) {
    extend(AoeBullet, superClass);

    function AoeBullet() {
      return AoeBullet.__super__.constructor.apply(this, arguments);
    }

    AoeBullet.prototype.image = "img/unitBar/pip1.png";

    AoeBullet.prototype.size = [1, 1];

    AoeBullet.prototype.color = [100, 100, 100, 255];

    AoeBullet.prototype.speed = 30;

    AoeBullet.prototype.aoe = 50;

    AoeBullet.prototype.damage = 3;

    AoeBullet.prototype.explode = true;

    AoeBullet.prototype.explodeClass = "AoeExplosion";

    AoeBullet.prototype.move = function() {
      if (this.dead) {
        return;
      }
      return v2.add(this.pos, this.vel);
    };

    AoeBullet.prototype.tick = function() {
      var exp;
      this.life += 1;
      if (this.life > this.maxLife) {
        this.dead = true;
        if (this.explode) {
          exp = new types[this.explodeClass]();
          exp.z = 1000;
          exp.pos = [this.hitPos[0], this.hitPos[1]];
          exp.vel = [0, 0];
          exp.rot = 0;
          exp.aoe = this.aoe;
          exp.side = this.side;
          exp.damage = this.damage;
          return sim.things[exp.id] = exp;
        }
      }
    };

    return AoeBullet;

  })(Bullet);

  window.StraightMissile = (function(superClass) {
    extend(StraightMissile, superClass);

    function StraightMissile() {
      return StraightMissile.__super__.constructor.apply(this, arguments);
    }

    StraightMissile.prototype.trailSize = .1;

    StraightMissile.prototype.trailTime = 94;

    StraightMissile.prototype.draw = function() {
      if (!this.trail) {
        this.trail = new Trail(this.id, this.trailSize, this.trailTime, this.color, this.z);
      }
      this.trail.grow(this.pos);
      this.trail.z = this.z - 0.0001;
      return StraightMissile.__super__.draw.call(this);
    };

    return StraightMissile;

  })(Bullet);

  window.TrackingMissile = (function(superClass) {
    extend(TrackingMissile, superClass);

    function TrackingMissile() {
      return TrackingMissile.__super__.constructor.apply(this, arguments);
    }

    TrackingMissile.prototype.image = "img/unitBar/pip1.png";

    TrackingMissile.prototype.size = [1, 1];

    TrackingMissile.prototype.color = [0, 0, 0, 255];

    TrackingMissile.prototype.speed = 15;

    TrackingMissile.prototype.damage = 8;

    TrackingMissile.prototype.radius = 10;

    TrackingMissile.prototype.missile = true;

    TrackingMissile.prototype.trailSize = .1;

    TrackingMissile.prototype.trailTime = 94;

    TrackingMissile.prototype.draw = function() {
      if (!this.trail) {
        this.trail = new Trail(this.id, this.trailSize, this.trailTime, this.color, this.z);
      }
      this.trail.grow(this.pos);
      this.trail.z = this.z - 0.0001;
      return TrackingMissile.__super__.draw.call(this);
    };

    TrackingMissile.prototype.move = function() {
      if (this.dead) {
        return;
      }
      if (this.target && !this.target.dead && !this.target.cloaked()) {
        v2.sub(this.target.pos, this.pos, this.vel);
        v2.norm(this.vel);
        v2.scale(this.vel, this.speed);
      }
      v2.add(this.pos, this.vel);
      this.rot = v2.angle(this.vel);
      return this.life += 1;
    };

    TrackingMissile.prototype.tick = function() {
      var exp;
      if (this.life > this.maxLife) {
        this.dead = true;
        return;
      }
      sim.unitSpaces[otherSide(this.side)].findInRange(this.pos, this.radius + this.speed + 500, (function(_this) {
        return function(unit) {
          if (_this.collide(unit)) {
            _this.hitUnit(unit);
            return true;
          }
          return false;
        };
      })(this));
      if (this.dead) {
        exp = new types.HitExplosion();
        exp.z = 1000;
        exp.pos = [this.pos[0], this.pos[1]];
        exp.vel = [0, 0];
        exp.rot = 0;
        exp.radius = .5;
        return sim.things[exp.id] = exp;
      }
    };

    return TrackingMissile;

  })(Bullet);

  types.Debree = (function(superClass) {
    extend(Debree, superClass);

    function Debree() {
      return Debree.__super__.constructor.apply(this, arguments);
    }

    Debree.prototype.image = null;

    Debree.prototype.maxLife = 16 * 5;

    Debree.prototype.radius = 2;

    Debree.prototype.size = [1, 1];

    Debree.prototype.tick = function() {
      return this.rot += this.vrot;
    };

    Debree.prototype.draw = function() {
      var fade;
      if (this.dead) {
        return;
      }
      fade = this.life / this.maxLife;
      this.color[3] = Math.floor((1 - fade) * 255);
      return baseAtlas.drawSprite(this.image, this.pos, this.size, this.rot, this.color);
    };

    return Debree;

  })(Particle);

  types.HitExplosion = (function(superClass) {
    extend(HitExplosion, superClass);

    HitExplosion.prototype.image = "img/fire02.png";

    HitExplosion.prototype.maxLife = 30;

    HitExplosion.prototype.radius = 2;

    HitExplosion.prototype.sound = "sounds/weapons/thud1.wav";

    HitExplosion.prototype.soundVolume = .1;

    function HitExplosion() {
      this.frame = 0;
      this.hitImage = "parts/hit" + (choose([1, 2, 3, 4, 5])) + ".png";
      this.rot = Math.random() * Math.PI * 2;
      HitExplosion.__super__.constructor.call(this);
      actionMixer.action += .5;
    }

    HitExplosion.prototype.draw = function() {
      var fade, s;
      if (this.dead) {
        return;
      }
      fade = this.life / this.maxLife;
      s = .1 + fade * fade * this.radius;
      this.color[3] = (1 - fade) * 255;
      baseAtlas.drawSprite(this.image, this.pos, [s, s], this.rot, this.color);
      if (this.frame < 4) {
        s = 1;
        this.color[3] = 255 / (1 + this.frame);
        baseAtlas.drawSprite(this.hitImage, this.pos, [s, s], this.rot, this.color);
      }
      return this.frame += 1;
    };

    return HitExplosion;

  })(Explosion);

  types.SmallHitExplosion = (function(superClass) {
    extend(SmallHitExplosion, superClass);

    SmallHitExplosion.prototype.sound = "sounds/weapons/thud4.wav";

    function SmallHitExplosion() {
      this.frame = 0;
      this.hitImage = "parts/hitAuto" + (choose([1, 2, 3])) + ".png";
      this.rot = Math.random() * Math.PI * 2;
      SmallHitExplosion.__super__.constructor.call(this);
      actionMixer.action += .5;
    }

    SmallHitExplosion.prototype.draw = function() {
      var s;
      if (this.dead) {
        return;
      }
      if (this.frame < 4) {
        s = 1;
        this.color[3] = 255 / (1 + this.frame);
        baseAtlas.drawSprite(this.hitImage, this.pos, [s, s], this.rot, this.color);
      }
      return this.frame += 1;
    };

    return SmallHitExplosion;

  })(Explosion);

  types.RingHitExplosion = (function(superClass) {
    extend(RingHitExplosion, superClass);

    RingHitExplosion.prototype.image = "img/fire02.png";

    RingHitExplosion.prototype.maxLife = 30;

    function RingHitExplosion() {
      RingHitExplosion.__super__.constructor.call(this);
      this.frame = 0;
    }

    RingHitExplosion.prototype.draw = function() {
      var deb, j, n;
      RingHitExplosion.__super__.draw.call(this);
      if (this.frame === 0) {
        for (n = j = 1; j < 5; n = ++j) {
          deb = new types.Debree();
          deb.image = "parts/fireSpinPart" + n + ".png";
          deb.z = this.z + rand() * .01;
          deb.pos = [0, 0];
          deb.vel = [0, 0];
          v2.set(this.pos, deb.pos);
          deb.vel[0] = 60 * rand();
          deb.vel[1] = 60 * rand();
          deb.rot = 0;
          deb.vrot = rand();
          deb.maxLife = 16;
          deb._pos = v2.create(deb.pos);
          deb._pos2 = v2.create(deb.pos);
          deb.rot = deb.rot;
          deb._rot = deb.rot;
          deb._rot2 = deb.rot;
          intp.particles[deb.id] = deb;
        }
      }
      return this.frame += 1;
    };

    return RingHitExplosion;

  })(Explosion);

  types.ShipExplosion = (function(superClass) {
    extend(ShipExplosion, superClass);

    ShipExplosion.prototype.image = "img/fire02.png";

    ShipExplosion.prototype.maxLife = 15;

    ShipExplosion.prototype.radius = 2;

    ShipExplosion.prototype.sound = "sounds/weapons/explode1.wav";

    ShipExplosion.prototype.soundVolume = .1;

    function ShipExplosion() {
      ShipExplosion.__super__.constructor.call(this);
      actionMixer.action += .5;
    }

    ShipExplosion.prototype.draw = function() {
      var fade, s;
      if (this.dead) {
        return;
      }
      fade = this.life / this.maxLife;
      s = Math.pow(this.radius, 1.3) / 100;
      this.color[3] = (1 - fade) * 255;
      return baseAtlas.drawSprite(this.image, this.pos, [s, s], this.rot, this.color);
    };

    return ShipExplosion;

  })(Explosion);

  types.AoeExplosion = (function(superClass) {
    extend(AoeExplosion, superClass);

    function AoeExplosion() {
      return AoeExplosion.__super__.constructor.apply(this, arguments);
    }

    AoeExplosion.prototype.image = "img/point02.png";

    AoeExplosion.prototype.maxLife = 10;

    AoeExplosion.prototype.radius = 2;

    AoeExplosion.prototype.sound = "sounds/weapons/thud3.wav";

    AoeExplosion.prototype.soundVolume = .5;

    AoeExplosion.prototype.damage = 0;

    AoeExplosion.prototype.aoe = 0;

    AoeExplosion.prototype.tick = function() {
      if (!this.damaged) {
        this.damaged = true;
        return sim.unitSpaces[otherSide(this.side)].findInRange(this.pos, this.aoe + 500, (function(_this) {
          return function(unit) {
            var distance, fallOff;
            distance = Math.max(v2.distance(_this.pos, unit.pos) - unit.radius, 0);
            if (distance < _this.aoe) {
              fallOff = 1 - distance / _this.aoe;
              if (typeof unit.applyDamage === "function") {
                unit.applyDamage(_this.damage * fallOff);
              }
              if (_this.energyDamage > 1) {
                if (typeof unit.applyEnergyDamage === "function") {
                  unit.applyEnergyDamage(_this.energyDamage * fallOff);
                }
              }
              if (_this.burnAmount > 1) {
                if (typeof unit.applyBurnAmount === "function") {
                  unit.applyBurnAmount(_this.burnAmount * fallOff);
                }
              }
            }
            return false;
          };
        })(this));
      }
    };

    AoeExplosion.prototype.draw = function() {
      var fade, s;
      if (this.dead) {
        return;
      }
      fade = Math.min(1, this.life / this.maxLife);
      s = this.aoe / 512 * this.radius;
      this.color[3] = (1 - fade) * 50;
      return baseAtlas.drawSprite(this.image, this.pos, [s, s], this.rot, this.color);
    };

    return AoeExplosion;

  })(Explosion);

  types.FrameExplosion = (function(superClass) {
    extend(FrameExplosion, superClass);

    FrameExplosion.prototype.image = "img/fx/fire1/f#.png";

    FrameExplosion.prototype.nFrames = 8;

    FrameExplosion.prototype.maxLife = 16;

    FrameExplosion.prototype.radius = 2;

    FrameExplosion.prototype.sound = "sounds/weapons/explode1.wav";

    FrameExplosion.prototype.soundVolume = .1;

    function FrameExplosion() {
      FrameExplosion.__super__.constructor.call(this);
    }

    FrameExplosion.prototype.draw = function() {
      var fade, frame, image, intFrame, s, tweenFrame;
      if (this.dead) {
        return;
      }
      fade = this.life / this.maxLife;
      s = 3;
      this.color = [255, 255, 255, 210];
      if (this.loopFrames) {
        frame = this.life % this.nFrames + 1;
        intFrame = Math.floor(frame);
        image = this.image.replace("#", intFrame);
        return baseAtlas.drawSprite(image, this.pos, [s, s], this.rot, this.color);
      } else {
        frame = (this.life / this.maxLife) * this.nFrames + 1;
        intFrame = Math.floor(frame);
        if (intFrame < this.nFrames) {
          tweenFrame = frame - intFrame;
          image = this.image.replace("#", intFrame);
          return baseAtlas.drawSprite(image, this.pos, [s, s], this.rot, this.color);
        }
      }
    };

    return FrameExplosion;

  })(Explosion);

  _focus = v2.create();

  _size = v2.create();

  types.Rock = (function() {
    Rock.prototype.image = "img/unitBar/pip1.png";

    Rock.prototype.size = [1, 1];

    Rock.prototype["static"] = true;

    Rock.prototype.maxHP = 1000;

    function Rock() {
      this.image = "img/rocks/srock01.png";
      if (typeof sim !== "undefined" && sim !== null) {
        this.color = sim.theme.fillColor;
      }
      this.id = sim.nid();
      this.dead = false;
      this.hp = this.maxHP;
      this.pos = v2.create([0, 0]);
      this.vel = v2.create([0, 0]);
      this.rot = 0;
      this.size = v2.create([1, 1]);
    }

    Rock.prototype.move = function() {};

    Rock.prototype.draw = function() {
      return baseAtlas.drawSprite(this.image, this.pos, [this.size[0], -this.size[0]], this.rot, this.color, this.z);
    };

    return Rock;

  })();

  sideColor = function(side) {
    var color, mySide;
    mySide = typeof commander !== "undefined" && commander !== null ? commander.side : void 0;
    if (mySide !== "beta") {
      mySide = "alpha";
    }
    if (mySide === side) {
      color = [230, 230, 230, 255];
    } else {
      color = [20, 20, 20, 255];
    }
    return color;
  };

  anitSideColor = function(side) {
    var color, mySide;
    mySide = typeof commander !== "undefined" && commander !== null ? commander.side : void 0;
    if (mySide === "spectators") {
      mySide = "alpha";
    }
    if (mySide !== side) {
      color = [230, 230, 230, 255];
    } else {
      color = [20, 20, 20, 255];
    }
    return color;
  };

  types.CommandPoint = (function() {
    CommandPoint.prototype.image = "img/point02.png";

    CommandPoint.prototype.sliceImage = "img/map/slice02.png";

    CommandPoint.prototype.maxHP = 1000;

    CommandPoint.prototype.size = [1, 1];

    CommandPoint.prototype.maxHP = 1000;

    CommandPoint.prototype.radius = 250;

    CommandPoint.prototype.commandPoint = true;

    CommandPoint.prototype.capping = 0;

    CommandPoint.prototype.maxCapp = 10;

    function CommandPoint() {
      this.id = sim.nid();
      this.dead = false;
      this.z = .01;
      this.hp = this.maxHP;
      this.pos = v2.create(0, 0);
      this.vel = [0, 0];
      this.rot = 0;
      this.color = [255, 255, 255, 255];
      this.side = "neutral";
      this.capping = 0;
    }

    CommandPoint.prototype.tick = function() {
      var _, distance, id, j, k, len, p, player, playerOnPoint, ref, ref1, results, sides, thing;
      if (sim.state !== "running") {
        return;
      }
      if (sim.step % 16 === 0) {
        if (this.side !== null) {
          ref = sim.players;
          for (_ in ref) {
            p = ref[_];
            if (p && p.side === this.side) {
              if (p.gainsMoney && sim.gainsMoney) {
                p.earnMoney(1);
              }
            }
          }
        }
        sides = {};
        playerOnPoint = [];
        ref1 = sim.things;
        for (id in ref1) {
          thing = ref1[id];
          if (thing.unit && thing.canCapture) {
            distance = v2.distance(this.pos, thing.pos);
            if (distance < this.radius) {
              sides[thing.side] = true;
              player = sim.players[thing.owner];
              if (player) {
                playerOnPoint.push(player);
              }
            }
          }
        }
        sides = (function() {
          var results;
          results = [];
          for (k in sides) {
            results.push(k);
          }
          return results;
        })();
        if (sides.length === 1 && this.side !== sides[0]) {
          this.capping += 1;
          if (this.capping >= this.maxCapp) {
            this.side = sides[0];
            sim.captures += 1;
            this.capping = 0;
            this.bonus(this.side, 100);
            results = [];
            for (j = 0, len = playerOnPoint.length; j < len; j++) {
              p = playerOnPoint[j];
              results.push(p.capps += 1);
            }
            return results;
          }
        } else {
          if (this.capping > 0) {
            return this.capping -= 1;
          }
        }
      }
    };

    CommandPoint.prototype.bonus = function(side, amount) {
      var _, p, ref, results;
      ref = sim.players;
      results = [];
      for (_ in ref) {
        p = ref[_];
        if (p.side === this.side) {
          if (p.gainsMoney && sim.gainsMoney) {
            results.push(p.earnMoney(amount));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    CommandPoint.prototype.draw = function() {
      var color, i, j, ref, results, th, x, y;
      if (sim.theme) {
        color = sideColor(this.side);
        baseAtlas.drawSprite(this.image, this.pos, this.size, this.rot, color);
        if (this.capping > 0) {
          color = anitSideColor(this.side);
          results = [];
          for (i = j = 0, ref = this.maxCapp; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            if (this.capping < i) {
              break;
            }
            th = (i / this.maxCapp) * 2 * Math.PI;
            x = this.pos[0] + Math.sin(th) * (this.radius + 50);
            y = this.pos[1] + Math.cos(th) * (this.radius + 50);
            results.push(baseAtlas.drawSprite(this.sliceImage, [x, y], [1, 1], Math.PI - th, color));
          }
          return results;
        }
      }
    };

    return CommandPoint;

  })();

  types.SpawnPoint = (function() {
    SpawnPoint.prototype.image = "";

    SpawnPoint.prototype.sliceImage = "img/map/spawnSlice.png";

    SpawnPoint.prototype.maxHP = 1000;

    SpawnPoint.prototype.size = [1, 1];

    SpawnPoint.prototype.maxHP = 1000;

    SpawnPoint.prototype["static"] = true;

    SpawnPoint.prototype.radius = 400;

    SpawnPoint.prototype.spawn = true;

    SpawnPoint.prototype.side = null;

    function SpawnPoint() {
      this.id = sim.nid();
      this.dead = false;
      this.z = .01;
      this.hp = this.maxHP;
      this.pos = v2.create(0, 0);
      this.vel = [0, 0];
      this.rot = 0;
      this.color = [255, 255, 255, 255];
      this.side = "neutral";
    }

    SpawnPoint.prototype.draw = function() {
      var color, i, j, max, ref, results, th, to, x, y;
      if (!sim.theme) {
        return;
      }
      color = sideColor(this.side);
      max = 20;
      to = ((sim.step - 8) / (16 * 2)) * 20;
      results = [];
      for (i = j = 0, ref = max; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (to < i) {
          break;
        }
        th = (i / max) * 2 * Math.PI;
        x = this.pos[0] + Math.sin(th) * (this.radius + 50);
        y = this.pos[1] + Math.cos(th) * (this.radius + 50);
        results.push(baseAtlas.drawSprite(this.sliceImage, [x, y], [1, 1], Math.PI / 2 - th, color));
      }
      return results;
    };

    return SpawnPoint;

  })();

}).call(this);
;


//from src/unit.js
// Generated by CoffeeScript 1.10.0
(function() {
  var _color, _offset, _pipPos, _vel, _where, legacyParts,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.thumb_cache = {};

  window.turnAngle = function(a, b, speed) {
    var turn;
    speed = speed;
    turn = b - a;
    if (turn > Math.PI) {
      a += 2 * Math.PI;
    } else if (turn < -Math.PI) {
      a -= 2 * Math.PI;
    }
    turn = b - a;
    if (turn < speed && turn > -speed) {
      return b;
    }
    if (turn > speed) {
      turn = speed;
    }
    if (turn < -speed) {
      turn = -speed;
    }
    return a + turn;
  };

  window.angleBetween = function(a, b) {
    var turn;
    turn = b - a;
    while (turn > Math.PI) {
      turn -= 2 * Math.PI;
    }
    while (turn < -Math.PI) {
      turn += 2 * Math.PI;
    }
    return turn;
  };

  _pipPos = v2.create();

  types.Unit = (function() {
    Unit.prototype.name = "";

    Unit.prototype.canCapture = true;

    Unit.prototype.multiShoot = false;

    Unit.prototype.unit = true;

    Unit.prototype.maxHP = 10;

    Unit.prototype.buildHP = 0;

    Unit.prototype.buildSpeed = 10;

    Unit.prototype.buildRadius = 500;

    Unit.prototype.radius = 60;

    Unit.prototype.fixed = false;

    Unit.prototype.maxSpeed = 100;

    Unit.prototype.turnSpeed = 1;

    Unit.prototype.cloak = 0;

    Unit.prototype.burn = 0;

    Unit.prototype.jump = 0;

    Unit.prototype.minJump = 50;

    Unit.prototype.limitBonus = 0;

    Unit.prototype.cost = 100;

    Unit.prototype.image = null;

    Unit.prototype.size = [1, 1];

    Unit.prototype.building = false;

    Unit.prototype.gotoMode = null;

    Unit.prototype.target = null;

    Unit.prototype.holdPosition = false;

    Unit.prototype.stopFriction = 0.9;

    Unit.prototype.underPlayerControl = false;

    Unit.prototype.orders = null;

    function Unit(spec1) {
      this.spec = spec1;
      this.closestUncloaked = bind(this.closestUncloaked, this);
      this.closestEnemy = bind(this.closestEnemy, this);
      if (this.spec === null) {
        this.spec = [];
      }
      this.id = typeof sim !== "undefined" && sim !== null ? sim.nid() : void 0;
      this.side = 0;
      this.color = [255, 0, 0, 255];
      this.z = Math.random();
      this.center = v2.create();
      this.parts = [];
      this.weapons = [];
      this.fromSpec(this.spec);
      this.dead = false;
      this.pos = v2.create();
      this.vel = v2.create();
      this.active = true;
      this.rot = 0;
      this.warpIn = 0;
      this.testIntp = [];
      this.testStep = [];
      this.orders = [];
      this.preOrders = [];
      this.closestEnemiesCache = null;
      this.closestFriendsCache = null;
      this.closestEnemyBulletsCache = null;
    }

    Unit.prototype.fromSpec = function(spec) {
      var data, i, j, l, len, len1, len2, len3, len4, len5, n, o, p, part, partNum, q, reachRange, ref, ref1, ref2, ref3, ref4, ref5, results, stasisRange, thrust, w, x;
      this.cost = 0;
      this.hp = 5;
      this.jumpDistance = 0;
      this.jumpCount = 0;
      this.speed = 0;
      this.turnSpeed = 1;
      this.mass = 0;
      this.energy = 0;
      this.baseGenEnergy = 2.5;
      this.genEnergy = this.baseGenEnergy;
      this.storeEnergy = 0;
      this.genShield = 0;
      this.shield = 0;
      this.cloak = 0;
      this.radius = 20;
      this.weaponArc = 0;
      this.minArc = 0;
      this.maxRange = 0;
      thrust = 0;
      data = fromShort(spec);
      this.name = data.name || "";
      this.aiRules = data.aiRules || [];
      ref = data.parts;
      for (partNum = j = 0, len = ref.length; j < len; partNum = ++j) {
        p = ref[partNum];
        if (!window.parts[p.type]) {
          continue;
        }
        part = new window.parts[p.type];
        part.unit = this;
        part.pos = v2.create(p.pos);
        part.dir = p.dir || 0;
        part.partNum = partNum;
        if (part.weapon) {
          this.weapons.push(part);
        }
        if (p.ghostCopy) {
          part.ghostCopy = true;
        }
        this.parts.push(part);
        this.cost += part.cost || 0;
        this.hp += part.hp || 0;
        thrust += part.thrust || 0;
        this.mass += part.mass;
        this.turnSpeed += part.turnSpeed || 0;
        this.genEnergy += part.genEnergy || 0;
        this.storeEnergy += part.storeEnergy || 0;
        this.genShield += part.genShield || 0;
        this.shield += part.shield || 0;
        this.jumpCount += part.jumpCount || 0;
        this.limitBonus += part.limitBonus || 0;
        if (part.arc && this.weaponArc < part.arc) {
          this.weaponArc = part.arc;
        }
        if (part.arc && (this.minArc === 0 || this.minArc > part.arc)) {
          this.minArc = part.arc;
        }
        if (p.type === "EnergyTransfer") {
          if (part.range > this.maxRange) {
            this.maxRange = part.range;
          }
        }
        if (p.type === "StasisField") {
          stasisRange = part.range + v2.distance(part.pos, this.center) + 100;
          if (stasisRange > this.maxRange) {
            this.maxRange = stasisRange;
          }
        }
      }
      this.maxHP = this.hp;
      this.energy = this.storeEnergy;
      this.turnSpeed = this.turnSpeed / this.mass;
      this.maxSpeed = thrust / this.mass * 9;
      this.maxShield = this.shield;
      this.damageRatio = 1;
      this.jumpDistance = this.jump = Math.min(1, 41 * this.jumpCount / this.mass) * 600;
      this.computeCenter();
      ref1 = this.parts;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        part = ref1[l];
        if (typeof part.init === "function") {
          part.init();
        }
      }
      this.computeRadius();
      this.weaponRange = 0;
      this.weaponDPS = 0;
      this.weaponDamage = 0;
      ref2 = this.weapons;
      for (n = 0, len2 = ref2.length; n < len2; n++) {
        w = ref2[n];
        w.applyBuffs();
        w.reloadTime = Math.ceil(w.reloadTime);
        if (w.reloadTime < 1) {
          w.reloadTime = 1;
        }
        if (w.range > this.weaponRange) {
          this.weaponRange = w.range;
        }
        reachRange = w.range + v2.distance(w.pos, this.center);
        if (reachRange > this.maxRange) {
          this.maxRange = reachRange;
        }
        w.dps = w.damage / w.reloadTime;
        this.weaponDamage += w.damage;
        this.weaponDPS += w.dps;
      }
      this.weapons.sort(function(a, b) {
        return b.dps - a.dps;
      });
      this.mainWeapon = this.weapons[0];
      ref3 = this.weapons;
      for (i = o = 0, len3 = ref3.length; o < len3; i = ++o) {
        w = ref3[i];
        w.turretNum = i;
      }
      this.moveEnergy = 0;
      ref4 = this.parts;
      for (q = 0, len4 = ref4.length; q < len4; q++) {
        part = ref4[q];
        if (part.thrust > 0) {
          this.moveEnergy += part.useEnergy;
        }
      }
      this.fireEnergy = 0;
      ref5 = this.parts;
      results = [];
      for (x = 0, len5 = ref5.length; x < len5; x++) {
        part = ref5[x];
        if (part.fireEnergy > 0) {
          results.push(this.fireEnergy += part.fireEnergy);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Unit.prototype.toSpecObj = function() {
      var j, len, part, partSpec, ref, specParts;
      specParts = [];
      ref = this.parts;
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        partSpec = {
          pos: [part.pos[0], part.pos[1]],
          type: part.constructor.name,
          dir: part.dir
        };
        if (this.ghostCopy || part.ghostCopy) {
          partSpec.ghostCopy = true;
          if (part.decal) {
            continue;
          }
        }
        specParts.push(partSpec);
      }
      return {
        parts: specParts,
        name: this.name,
        aiRules: this.aiRules
      };
    };

    Unit.prototype.toSpec = function() {
      return toShort(this.toSpecObj());
    };

    Unit.prototype.computeCenter = function() {
      var ix, iy, j, len, mass, part, ref;
      ix = 0;
      iy = 0;
      mass = 0;
      ref = this.parts;
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        mass += part.mass;
        ix += part.mass * part.pos[0];
        iy += part.mass * part.pos[1];
      }
      if (mass > 0) {
        this.center[0] = ix / mass;
        return this.center[1] = iy / mass;
      } else {
        this.center[0] = 0;
        return this.center[1] = 0;
      }
    };

    Unit.prototype.computeRadius = function() {
      var j, len, part, radius, ref, v;
      v = v2.create();
      ref = this.parts;
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        if (!(!part.decal)) {
          continue;
        }
        v2.set(part.pos, v);
        v2.sub(v, this.center);
        radius = v2.mag(v);
        if (radius > this.radius) {
          this.radius = radius;
        }
      }
      if (this.radius > 500) {
        return this.radius = 500;
      }
    };

    Unit.prototype.applyDamage = function(d) {
      this.shield -= d;
      if (this.shield < 0) {
        this.hp += this.shield;
        return this.shield = 0;
      }
    };

    Unit.prototype.applyEnergyDamage = function(d) {
      return this.energy -= d;
    };

    Unit.prototype.applyBurnAmount = function(d) {
      this.maxBurn = (this.hp + this.shield) * 1.0;
      if (this.burn < this.maxBurn) {
        this.burn += d;
        if (this.burn > this.maxBurn) {
          return this.burn = this.maxBurn;
        }
      }
    };

    Unit.prototype.postDeath = function() {
      var j, len, part, ref;
      ref = this.parts;
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        if (typeof part.postDeath === "function") {
          part.postDeath();
        }
      }
      return sim.deaths += 1;
    };

    Unit.prototype.createDebree = function() {
      var exp, j, len, part, ref, results;
      ref = this.parts;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        if (Math.random() < .5 || part.decal) {
          continue;
        }
        exp = new types.Debree();
        if (part.stripe) {
          exp.image = "parts/gray-" + part.image;
        } else {
          exp.image = "parts/" + part.image;
        }
        exp.z = this.z + rand() * .01;
        exp.pos = [0, 0];
        part.computeWorldPos();
        v2.set(part.worldPos, exp.pos);
        v2.set(this.vel, exp.vel);
        exp.vel[0] += (part.worldPos[0] - this.pos[0]) * .1 + rand();
        exp.vel[1] += (part.worldPos[1] - this.pos[1]) * .1 + rand();
        exp.rot = this.rot;
        exp.vrot = rand();
        results.push(intp.particles[exp.id] = exp);
      }
      return results;
    };

    Unit.prototype.gotoAndStop = function(goto) {
      return this.setOrder({
        type: "Move",
        dest: goto,
        noStop: true
      });
    };

    Unit.prototype.gotoNoStop = function(goto) {
      return this.setOrder({
        type: "Move",
        dest: goto,
        noStop: true
      });
    };

    Unit.prototype.cloaked = function() {
      return this.cloakFade > 0;
    };

    Unit.prototype.tick = function() {
      var burnTick, cloakOn, cloakRange, exp, j, l, len, len1, len2, n, part, ref, ref1, ref2, ref3, speed, target;
      ref = this.parts;
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        part.computeWorldPos();
      }
      this.slowed = false;
      if (this.warpIn < 1) {
        this.warpIn += 1 / 16;
      } else {
        this.warpIn = 1;
      }
      this.closestEnemiesCache = null;
      this.closestFriendsCache = null;
      this.closestEnemyBulletsCache = null;
      this.cloakFade = 0;
      if (this.cloak > 0) {
        speed = v2.mag(this.vel);
        if (speed > 1) {
          this.cloak -= 0.20 / 16 * this.mass;
        }
        if (sim.step % 16 === 0) {
          this.cloak -= 0.01 * this.mass;
        }
        cloakOn = this.mass * .5;
        if (this.cloak > cloakOn) {
          cloakRange = this.mass - cloakOn;
          this.cloakFade = (this.cloak - cloakOn) / cloakRange;
        }
      }
      if (this.cloak > 0) {
        target = this.closestEnemy();
        if (target && v2.distance(target.pos, this.pos) - target.radius - this.radius < 100) {
          this.cloak = 0;
        }
      }
      if (this.topOrderIs("Follow") && (sim.things[this.orders[0].targetId] != null) && sim.things[this.orders[0].targetId].side !== this.side) {
        this.target = sim.things[this.orders[0].targetId];
      }
      if (this.energy < -this.genEnergy * 16 * 3) {
        this.energy = -this.genEnergy * 16 * 3;
      }
      this.energy += this.baseGenEnergy;
      ref1 = this.parts;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        part = ref1[l];
        if (part.genEnergy) {
          this.energy += part.genEnergy;
        }
      }
      ref2 = this.parts;
      for (n = 0, len2 = ref2.length; n < len2; n++) {
        part = ref2[n];
        part.tick();
      }
      if (this.energy > this.storeEnergy) {
        this.energy = this.storeEnergy;
      }
      if (this.shield > this.maxShield) {
        this.shield = this.maxShield;
      }
      if ((ref3 = this.target) != null ? ref3.dead : void 0) {
        this.target = null;
      }
      if (sim.step % 16 === 0) {
        if (this.burn > 4) {
          if (this.hp < 4) {
            this.burn = 0;
          }
          burnTick = this.burn * 0.04;
          this.applyDamage(burnTick);
          this.burn -= burnTick;
        } else {
          this.burn = 0;
        }
      }
      if (this.hp <= 0) {
        exp = new types.ShipExplosion();
        exp.z = 1000;
        exp.pos = [this.pos[0], this.pos[1]];
        exp.vel = [0, 0];
        exp.rot = 0;
        exp.radius = Math.max(this.mass / 5, 50);
        sim.things[exp.id] = exp;
        this.dead = true;
        if (this.building) {
          return this.building.dead = true;
        }
      }
    };

    Unit.prototype.canBuildHere = function() {
      return true;
    };

    Unit.prototype.move = function() {
      this.movement();
      if (this.orders.length === 0) {
        return this.idleAI();
      }
    };

    Unit.prototype.movement = function() {
      var curspeed, s;
      this.runOrders();
      v2.scale(this.vel, this.stopFriction);
      curspeed = v2.mag(this.vel);
      if (curspeed < .01) {
        this.vel[0] = 0;
        this.vel[1] = 0;
      } else {
        v2.add(this.pos, this.vel);
      }
      s = 20000;
      if (this.pos[0] > s) {
        this.pos[0] = s;
      }
      if (this.pos[0] < -s) {
        this.pos[0] = -s;
      }
      if (this.pos[1] > s) {
        this.pos[1] = s;
      }
      if (this.pos[1] < -s) {
        return this.pos[1] = -s;
      }
    };

    Unit.prototype.lookAt = function(goto) {
      var rot;
      v2.sub(goto, this.pos, _where);
      rot = v2.angle(_where);
      if (rot != null) {
        return this.rot = turnAngle(this.rot, rot, this.turnSpeed);
      }
    };

    Unit.prototype.moveTo = function(goto, noStop) {
      var arriveIn, curspeed, force, j, len, part, ratio, ref, rot, stopSpeed, turnIn;
      if (noStop == null) {
        noStop = false;
      }
      if (goto == null) {
        return;
      }
      v2.sub(goto, this.pos, _where);
      this.gotoDistance = v2.mag(_where);
      rot = v2.angle(_where);
      if (rot != null) {
        this.rot = turnAngle(this.rot, rot, this.turnSpeed);
      }
      if (this.holdPosition) {
        return;
      }
      arriveIn = this.gotoDistance / this.maxSpeed;
      turnIn = Math.abs(angleBetween(this.rot, rot)) / this.turnSpeed;
      curspeed = v2.mag(this.vel);
      this.stopDistance = 0;
      if (!noStop) {
        stopSpeed = curspeed;
        while (stopSpeed > 1) {
          this.stopDistance += stopSpeed;
          stopSpeed = stopSpeed * this.stopFriction;
        }
      }
      if (turnIn < arriveIn * .2 && this.gotoDistance > this.stopDistance && this.energy > 0) {
        force = 0;
        ref = this.parts;
        for (j = 0, len = ref.length; j < len; j++) {
          part = ref[j];
          if (part.thrust) {
            if (part.useEnergy < this.energy) {
              ratio = 1;
            } else {
              ratio = this.energy / part.useEnergy;
            }
            force += part.thrust * ratio;
            this.energy -= part.useEnergy * ratio;
          }
        }
        v2.pointTo(_where, this.rot);
        v2.scale(_where, force / this.mass);
        v2.add(this.vel, _where);
      }
    };

    Unit.prototype.closestEnemies = function() {
      if (this.closestEnemiesCache === null) {
        this.closestEnemiesCache = [];
        sim.unitSpaces[otherSide(this.side)].findInRange(this.pos, this.maxRange + 500, (function(_this) {
          return function(u) {
            if (u.id !== _this.id) {
              _this.closestEnemiesCache.push(u);
            }
            return false;
          };
        })(this));
        this.closestEnemiesCache.sort((function(_this) {
          return function(a, b) {
            return v2.distanceSq(a.pos, _this.pos) - v2.distanceSq(b.pos, _this.pos);
          };
        })(this));
      }
      return this.closestEnemiesCache;
    };

    Unit.prototype.closestFriends = function() {
      if (this.closestFriendsCache === null) {
        this.closestFriendsCache = [];
        sim.unitSpaces[this.side].findInRange(this.pos, this.maxRange + 500, (function(_this) {
          return function(u) {
            if (u.id !== _this.id) {
              _this.closestFriendsCache.push(u);
            }
            return false;
          };
        })(this));
        this.closestFriendsCache.sort((function(_this) {
          return function(a, b) {
            return v2.distanceSq(a.pos, _this.pos) - v2.distanceSq(b.pos, _this.pos);
          };
        })(this));
      }
      return this.closestFriendsCache;
    };

    Unit.prototype.closestEnemyBullets = function() {
      if (this.closestEnemyBulletsCache === null) {
        this.closestEnemyBulletsCache = [];
        sim.bulletSpaces[otherSide(this.side)].findInRange(this.pos, this.maxRange + this.radius + 500, (function(_this) {
          return function(b) {
            _this.closestEnemyBulletsCache.push(b);
            return false;
          };
        })(this));
        this.closestEnemyBulletsCache.sort((function(_this) {
          return function(a, b) {
            return v2.distanceSq(a.pos, _this.pos) - v2.distanceSq(b.pos, _this.pos);
          };
        })(this));
      }
      return this.closestEnemyBulletsCache;
    };

    Unit.prototype.closestEnemy = function() {
      var enemy, j, len, ref, u;
      enemy = null;
      ref = this.closestEnemies();
      for (j = 0, len = ref.length; j < len; j++) {
        u = ref[j];
        enemy = u;
        break;
      }
      return enemy;
    };

    Unit.prototype.closestUncloaked = function(range) {
      var enemyC, j, len, ref, u;
      enemyC = null;
      ref = this.closestEnemies();
      for (j = 0, len = ref.length; j < len; j++) {
        u = ref[j];
        if (u.cloaked() && !enemyC) {
          enemyC = u;
        } else {
          return u;
        }
      }
      return enemyC;
    };

    Unit.prototype.idleAI = function() {
      var dist, lookAt, rot, target;
      if (this.target) {
        this.softTarget = this.target;
      } else if (sim.step % 16 === 0) {
        this.softTarget = null;
        target = this.closestUncloaked();
        if (target && v2.distance(target.pos, this.pos) < this.weaponRange * 3) {
          this.softTarget = target;
        }
      }
      if (this.softTarget && this.minArc < 360) {
        lookAt = this.softTarget.pos;
        v2.sub(lookAt, this.pos, _where);
        rot = v2.angle(_where);
        dist = v2.mag(_where);
        return this.rot = turnAngle(this.rot, rot, this.turnSpeed);
      }
    };

    Unit.prototype.draw = function() {
      var a, color, j, l, len, len1, part, partNum, r, ref, ref1, s, t, value;
      if (this.dead) {
        return;
      }
      ref = this.parts;
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        if (typeof part.preDraw === "function") {
          part.preDraw();
        }
        part.computeWorldPos();
      }
      if (this.maxShield > 0) {
        s = this.warpIn * 2 - 1;
        if (s > 0) {
          color = [this.color[0], this.color[1], this.color[2], 255 * this.shield / this.maxShield * s];
          r = (this.radius + 40) / 255;
          baseAtlas.drawSprite("img/point02.png", this.pos, [r, r], 0, color);
        }
      }
      if (this.warpIn < 1) {
        this.warpIn += 1 / 60;
      }
      ref1 = this.parts;
      for (partNum = l = 0, len1 = ref1.length; l < len1; partNum = ++l) {
        part = ref1[partNum];
        value = part.pos[1] / 700 - .5 + this.warpIn;
        if (value > 0) {
          part.draw();
        } else if (value > -0.2) {
          a = -Math.sin(value / Math.PI * 50);
          baseAtlas.drawSprite("img/unitBar/fire02.png", part.worldPos, [1, 1], 0, [255, 255, 255, 255 * a]);
          continue;
        }
      }
      if (this.energy / this.storeEnergy < .05) {
        t = Math.abs(Math.sin(Date.now() / 300));
        baseAtlas.drawSprite("img/unitBar/energy1.png", [this.pos[0], this.pos[1] + 100 + this.radius], [1, 1], 0, [255, 100, 100, t * 200]);
      }
      if (control.debug && (this._pos2 != null) && this._pos) {
        a = 16;
        _offset[0] = this._pos2[0] + (this._pos[0] - this._pos2[0]) * a;
        _offset[1] = this._pos2[1] + (this._pos[1] - this._pos2[1]) * a;
        baseAtlas.drawSprite("img/pip1.png", this._pos, [1, 1], 0, [0, 255, 0, 255]);
        baseAtlas.drawSprite("img/pip1.png", this.pos, [1, 1], 0);
        return baseAtlas.drawSprite("img/pip1.png", this._pos2, [1, 1], 0, [255, 0, 0, 255]);
      }
    };

    Unit.prototype.createFlameEffect = function() {
      var exp, part, s;
      if (Math.random() < .8) {
        return;
      }
      part = choose(this.parts);
      if (part) {
        exp = new types.FlameBulletGhost();
        exp.main = false;
        exp.image = "parts/fireFlame" + (chooseInt(1, 4)) + ".png";
        exp.z = this.z + rand() * .01;
        exp.pos = [0, 0];
        v2.set(part.worldPos, exp.pos);
        exp.vel[0] = rand() - .5;
        exp.vel[1] = rand() - .5;
        s = .3 + .4 * Math.random();
        exp.size = [s, s];
        exp.maxRadius = 300;
        exp.radius = 10;
        exp.rot = rand() * Math.PI * 2;
        exp.vrot = 0;
        exp.maxLife = 100;
        exp._pos = v2.create(exp.pos);
        exp._pos2 = v2.create(exp.pos);
        exp.rot = exp.rot;
        exp._rot = exp.rot;
        exp._rot2 = exp.rot;
        return intp.particles[exp.id] = exp;
      }
    };

    Unit.prototype.clientTick = function() {
      var cloakOn, cloakRange, j, len, ref, w;
      ref = this.weapons;
      for (j = 0, len = ref.length; j < len; j++) {
        w = ref[j];
        if (typeof w.clientTick === "function") {
          w.clientTick();
        }
      }
      if (this.burn > 0) {
        this.createFlameEffect();
      }
      this.cloakFade = 0;
      if (this.cloak > 0) {
        cloakOn = this.mass * .5;
        if (this.cloak > cloakOn) {
          cloakRange = this.mass - cloakOn;
          return this.cloakFade = (this.cloak - cloakOn) / cloakRange;
        }
      }
    };

    Unit.prototype.thumb = function() {
      var image_data_url, j, k, len, part, ref, ref1, scale;
      k = JSON.stringify(this.spec) + this.color;
      if (!thumb_cache[k]) {
        baseAtlas.startOffscreenFrame();
        scale = this.radius / 64 * 1.5;
        if (scale < 1) {
          scale = 1;
        }
        baseAtlas.beginSprites([0, 0], scale, [0, 0, -baseAtlas.rtt.width, baseAtlas.rtt.height]);
        ref = this.parts;
        for (j = 0, len = ref.length; j < len; j++) {
          part = ref[j];
          part.working = true;
        }
        this.draw();
        if (((ref1 = this.aiRules) != null ? ref1.length : void 0) > 0) {
          baseAtlas.drawSprite("img/pip1.png", [-scale * 64, -scale * 64], [scale, scale], 0, [0, 0, 0, 255]);
        }
        baseAtlas.finishSprites(false);
        image_data_url = baseAtlas.endOffscreenFrame();
        thumb_cache[k] = image_data_url;
        return image_data_url;
      }
      return thumb_cache[k];
    };

    Unit.prototype.drawSelection = function() {
      var alpha, angle, distance, i, j, len, order, orders, prev, results, target;
      this.drawHPBar();
      this.drawEnergyBar();
      if (this.holdPosition) {
        baseAtlas.drawSprite("img/unitBar/circle.png", this.pos, [1, 1], 0, [255, 255, 255, 100]);
      }
      while (this.preOrders.length > 0 && this.preOrders[0].id < this.onOrderId) {
        this.preOrders.shift();
      }
      if (!battleMode.shiftOrder && battleMode.ordering) {
        return;
      }
      if (this.owner === commander.number) {
        prev = this.pos;
        orders = this.preOrders;
        results = [];
        for (i = j = 0, len = orders.length; j < len; i = ++j) {
          order = orders[i];
          if (order.type === "Move") {
            if (order.dest == null) {
              continue;
            }
            distance = v2.distance(order.dest, prev);
            if (i === 0 && distance < 255 + 10) {
              alpha = distance - 10;
            } else {
              alpha = 255;
            }
            angle = v2.angle(v2.sub(order.dest, prev, v2.create()));
            if (orders.length - 1 === i) {
              baseAtlas.drawSprite("img/arrow01.png", order.dest, [.9, .9], angle, [255, 255, 255, alpha]);
            } else {
              baseAtlas.drawSprite("img/arrow01.png", order.dest, [.8, .8], angle, [255, 255, 255, alpha]);
            }
            results.push(prev = order.dest);
          } else if (order.type === "Follow") {
            target = intp.things[order.targetId];
            if (target != null) {
              results.push(baseAtlas.drawSprite("img/unitBar/target.png", target.pos, [1, 1], 0, [255, 0, 0, 100]));
            } else {
              results.push(void 0);
            }
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    Unit.prototype.drawEnergyBar = function() {
      var color, healthScale, i, j, max, number, pipScale, ref, results, s;
      max = this.storeEnergy;
      if (max < 30000) {
        healthScale = 1000;
        pipScale = .5;
      } else {
        healthScale = 10000;
        pipScale = 1;
      }
      number = Math.floor(this.storeEnergy / healthScale);
      results = [];
      for (i = j = 0, ref = number; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        s = 20;
        _pipPos[0] = (i * s - number * s / 2 - s / 2) * pipScale;
        _pipPos[1] = 100;
        if (i < this.energy / healthScale) {
          color = [169, 208, 232, 255];
        } else {
          color = [20, 20, 20, 50];
        }
        v2.add(this.pos, _pipPos, _pipPos);
        results.push(baseAtlas.drawSprite("img/unitBar/energyPip.png", _pipPos, [pipScale, pipScale], 0, color));
      }
      return results;
    };

    Unit.prototype.drawHPBar = function() {
      var burnColor, color, healthScale, i, j, max, number, pipScale, ref, results, s;
      burnColor = colors.blackOrWhite(this.color);
      max = this.maxHP + this.maxShield;
      if (max < 300) {
        healthScale = 10;
        pipScale = .5;
      } else {
        healthScale = 100;
        pipScale = 1;
      }
      number = Math.floor(this.maxHP / healthScale) + Math.floor(this.maxShield / healthScale);
      results = [];
      for (i = j = 0, ref = number; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        s = 20;
        _pipPos[0] = (i * s - number * s / 2 - s / 2) * pipScale;
        _pipPos[1] = 60;
        if (i < Math.floor(this.maxHP / healthScale)) {
          if (i < this.hp / healthScale) {
            color = [this.color[0], this.color[1], this.color[2], 255];
          } else {
            color = [20, 20, 20, 50];
          }
          if (i < this.cloak / this.mass * this.maxHP / healthScale) {
            color[3] = 100;
          } else if (this.cloakFade > 0) {
            color[3] = 175;
          }
        } else {
          if (i < Math.floor(this.maxHP / healthScale) + this.shield / healthScale) {
            color = [this.color[0], this.color[1], this.color[2], 100];
          } else {
            color = [0, 0, 0, 50];
          }
        }
        v2.add(this.pos, _pipPos, _pipPos);
        baseAtlas.drawSprite("img/pip1.png", _pipPos, [pipScale, pipScale], 0, color);
        if (this.burn * 1 / healthScale > i) {
          results.push(baseAtlas.drawSprite("img/unitBar/flame.png", _pipPos, [pipScale * .25, pipScale * .25], Math.PI, burnColor));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Unit.prototype.addOrder = function(order) {
      if (this.orders.length < 50) {
        return this.orders.push(order);
      }
    };

    Unit.prototype.setOrder = function(order) {
      this.orders = [order];
      return this.target = null;
    };

    Unit.prototype.aiOrder = function(order) {
      order.ai = true;
      if (this.orders.length > 0 && (this.orders[0].ai || this.orders[0].rally)) {
        return this.orders[0] = order;
      } else {
        return this.orders.unshift(order);
      }
    };

    Unit.prototype.stopAi = function() {
      if (this.orders.length && this.orders[0].ai) {
        this.orders.shift();
        return this.onOrderId += 1;
      }
    };

    Unit.prototype.hasHumanOrder = function() {
      var j, len, order, ref;
      ref = this.orders;
      for (j = 0, len = ref.length; j < len; j++) {
        order = ref[j];
        if (!order.ai) {
          return true;
        }
      }
      return false;
    };

    Unit.prototype.giveOrder = function(order, additive) {
      if (additive) {
        return this.addOrder(order);
      } else {
        return this.setOrder(order);
      }
    };

    Unit.prototype.topOrderIs = function(type) {
      return this.orders.length > 0 && this.orders[0].type === type;
    };

    Unit.prototype.runOrders = function() {
      var running, topOrder;
      if (this.dead || this.orders.length === 0) {
        return;
      }
      while (this.orders.length > 0) {
        topOrder = this.orders[0];
        this.onOrderId = topOrder.id;
        running = this.runOrder(topOrder);
        if (running || topOrder.ai) {
          break;
        }
        this.orders.shift();
        this.onOrderId += 1;
      }
    };

    Unit.prototype.runOrder = function(order) {
      var dest, dir, dist, pos, range, ref, target;
      switch (order.type) {
        case "Follow":
          target = sim.things[order.targetId];
          if (!target || target.dead) {
            this.target = null;
            return false;
          }
          if (target.side !== this.side) {
            this.target = target;
          }
          if (!order.range) {
            if (this.warhead) {
              order.range = 0;
            } else {
              if (target.side !== this.side && this.weapons.length > 0) {
                order.range = this.mainWeapon.range * 0.95;
              } else {
                order.range = (this.radius + target.radius) * 1.5;
              }
            }
          }
          range = order.range;
          if (target.side !== this.side && this.weapons.length > 0) {
            dir = v2.norm(v2.sub(target.pos, this.pos, v2.create()));
            range = Math.max(0, this.mainWeapon.range * (this.mainWeapon.bulletSpeed - v2.dot(target.vel, dir)) / this.mainWeapon.bulletSpeed);
          }
          if (target.cloak > 0 && target.cloaked() && target.side !== this.side) {
            range = Math.min(range, 50);
          }
          return this.moveWithinRange(target.pos, range, order.noStop) || this.orders.length === 1 || target.side !== this.side || !(this.target = null);
        case "Move":
          if (order.dest == null) {
            return false;
          }
          range = (ref = order.range) != null ? ref : 0;
          if (this.orders.length > 1) {
            range += this.radius * 3;
          }
          if (order.begun) {
            if (this.gotoDistance <= this.stopDistance) {
              return false;
            }
          } else {
            order.begun = true;
          }
          return this.moveWithinRange(order.dest, range, order.noStop);
        case "Flee":
          pos = order.pos;
          if (!pos) {
            pos = order.target.pos;
          }
          if (!order.distance) {
            order.distance = 10000;
          }
          dist = v2.distance(this.pos, pos);
          if (dist > order.distance) {
            return order.noFinish;
          }
          dest = v2.create();
          v2.sub(this.pos, pos, dest);
          v2.scale(dest, order.distance / v2.mag(dest));
          v2.add(dest, this.pos);
          return this.moveWithinRange(dest, 0, order.noStop, order.noFinish);
        case "Stop":
          return true;
        default:
          sim.say("invalid order" + JSON.stringify(order));
      }
      return true;
    };

    Unit.prototype.selfDestruct = function() {
      return this.hp = 0;
    };

    Unit.prototype.toggleHoldPosition = function() {
      return this.holdPosition = !this.holdPosition;
    };

    Unit.prototype.stopAndClearOrders = function() {
      if (this.orders.length > 0) {
        this.onOrderId = this.orders.last().id + 1;
        this.orders = [];
      }
      this.holdPosition = false;
      return this.target = null;
    };

    Unit.prototype.moveWithinRange = function(pos, range, noStop) {
      var dist, jumpDist, jumpVec, needDist;
      dist = v2.distance(this.pos, pos);
      if (dist < range || (noStop && dist <= this.maxSpeed)) {
        if (noStop || !this.shouldLookAt(pos)) {
          this.stopDistance = 0;
          this.gotoDistance = Number.MAX_SAFE_INTEGER;
          return false;
        }
        return true;
      }
      if (this.jump > this.minJump) {
        jumpDist = Math.min(this.jumpDistance, this.jump);
        needDist = v2.distance(this.pos, pos) - Math.max(this.stopDistance, 100);
        if (needDist < jumpDist) {
          this.cloak -= .25 * this.mass;
          jumpVec = v2.create();
          v2.sub(pos, this.pos, jumpVec);
          v2.add(this.pos, jumpVec);
          this.warpIn = 0;
          this.vel[0] /= 100;
          this.vel[1] /= 100;
          this.jump = 0;
          this.rot = v2.angle(jumpVec);
          return false;
        } else {
          this.moveTo(pos, noStop);
        }
        return true;
      }
      this.moveTo(pos, noStop);
      return true;
    };

    Unit.prototype.shouldLookAt = function(pos) {
      var dif, rot;
      dif = v2.create();
      v2.sub(pos, this.pos, dif);
      if (v2.mag(dif) < 0.1) {
        return false;
      }
      rot = v2.angle(dif);
      if (Math.abs(rot - this.rot) < 0.1) {
        return false;
      } else {
        this.lookAt(pos);
        return true;
      }
    };

    return Unit;

  })();

  window.Part = (function() {
    Part.prototype.hp = 10;

    Part.prototype.cost = 10;

    Part.prototype.mass = 40;

    Part.prototype.rot = 0;

    Part.prototype.dir = 0;

    Part.prototype.canRotate = true;

    Part.prototype.flip = true;

    Part.prototype.scale = 1;

    Part.prototype.opacity = 1;

    Part.prototype.flippedSize = function() {
      var xsize, ysize;
      xsize = this.size[0];
      ysize = this.size[1];
      if (this.dir % 2 === 0) {
        return [xsize, ysize];
      } else {
        return [ysize, xsize];
      }
    };

    function Part() {
      this.pos = v2.create();
      this.worldPos = v2.create();
      this.orignalImage = this.image;
    }

    Part.prototype.computeWorldPos = function() {
      v2.set(this.pos, this.worldPos);
      v2.sub(this.worldPos, this.unit.center);
      v2.rotate(this.worldPos, Math.PI + this.unit.rot, this.worldPos);
      return v2.add(this.worldPos, this.unit.pos);
    };

    Part.prototype.draw = function() {
      var alpha, angle, c, flip, id, num, numParts, rot, showDamage, t;
      if (this.pos[0] < 0 && this.flip) {
        flip = -1;
      } else {
        flip = 1;
      }
      if (this.gimble) {
        rot = Math.PI + this.rot;
      } else {
        rot = Math.PI + this.unit.rot;
      }
      angle = Math.PI * this.dir / 2;
      rot += angle;
      if (this.canShowDamage && this.image === this.orignalImage) {
        numParts = this.unit.parts.length;
        id = this.unit.id;
        num = this.partNum % numParts;
        showDamage = num / numParts > this.unit.hp / this.unit.maxHP;
        if (showDamage) {
          t = (this.partNum + id) % 3 + 1;
          this.image = this.orignalImage.replace(".png", ".d" + t + ".png");
        }
      }
      if (this.northWest) {
        if (this.dir === 0 || this.dir === 2) {
          this.image = this.orignalImage;
        } else {
          this.image = this.orignalImage.replace("N", "W");
        }
      }
      alpha = 255;
      if (this.unit.cloakFade > 0) {
        alpha = 255 - this.unit.cloakFade * 200;
      }
      if (this.ghostCopy) {
        alpha = 170;
      }
      if (this.stripe) {
        baseAtlas.drawSprite("parts/gray-" + this.image, this.worldPos, [flip, -1], rot, [255, 255, 255, alpha]);
        c = this.unit.color;
        return baseAtlas.drawSprite("parts/red-" + this.image, this.worldPos, [flip, -1], rot, [c[0], c[1], c[2], alpha]);
      } else if (this.decal) {
        c = this.unit.color;
        return baseAtlas.drawSprite("parts/" + this.image, this.worldPos, [flip / this.scale, -1 / this.scale], rot, [c[0], c[1], c[2], alpha * this.opacity]);
      } else {
        return baseAtlas.drawSprite("parts/" + this.image, this.worldPos, [flip, -1], rot, [255, 255, 255, alpha]);
      }
    };

    Part.prototype.tick = function() {};

    return Part;

  })();

  _color = [0, 0, 0, 0];

  window.Engine = (function(superClass) {
    extend(Engine, superClass);

    function Engine() {
      return Engine.__super__.constructor.apply(this, arguments);
    }

    Engine.prototype.trailSize = .1;

    Engine.prototype.trailTime = 32;

    Engine.prototype.canRotate = false;

    Engine.prototype.preDraw = function() {
      var ref;
      if (v2.mag(this.unit.vel) > 1) {
        if (!this.trail) {
          this.trail = new Trail(this.unit.id, this.trailSize, this.trailTime, this.unit.color, this.unit.z);
        }
        if ((ref = this.trail) != null) {
          ref.grow(this.worldPos);
        }
        this.trail.color = this.unit.color;
        return this.trail.z = this.unit.z - 0.0001;
      }
    };

    return Engine;

  })(Part);

  _offset = [0, 0];

  _where = [0, 0];

  _vel = [0, 0];

  window.Turret = (function(superClass) {
    extend(Turret, superClass);

    Turret.prototype.tab = "weapons";

    Turret.prototype.image = "turret01.png";

    Turret.prototype.gimble = true;

    Turret.prototype.weapon = true;

    Turret.prototype.canRotate = false;

    Turret.prototype.target = null;

    Turret.prototype.bulletCls = types.FlyerBullet;

    Turret.prototype.range = 500;

    Turret.prototype.damage = 0;

    Turret.prototype.energyDamage = 0;

    Turret.prototype.bulletSpeed = 1;

    Turret.prototype.reloadTime = 10;

    Turret.prototype.overshoot = 0.3;

    Turret.prototype.minRange = -1000;

    Turret.prototype.instant = false;

    Turret.prototype.accuracy = 0;

    Turret.prototype.exactRange = false;

    Turret.prototype.arc = 0;

    Turret.prototype.weaponRange = 1;

    Turret.prototype.weaponRangeFlat = 0;

    Turret.prototype.weaponDamage = 1;

    Turret.prototype.weaponEnergyDamage = 1;

    Turret.prototype.weaponSpeed = 1;

    Turret.prototype.weaponReload = 1;

    Turret.prototype.weaponEnergy = 1;

    Turret.prototype.noOverkill = false;

    function Turret() {
      this.canShoot = bind(this.canShoot, this);
      this.reload = 0;
      this.rot = 0;
      this.fireTimer = 0;
      this.pos = v2.create();
      this.worldPos = v2.create();
      this.orignalImage = this.image;
      this._rot = 0;
      this._rot2 = 0;
    }

    Turret.prototype.init = function() {
      var j, len, part, ref, results;
      ref = this.unit.parts;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        if (part.mount && v2.distance(part.pos, this.pos) < .1) {
          part.turret = this;
          this.arc = part.arc;
          results.push(typeof part.initTurret === "function" ? part.initTurret(this) : void 0);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Turret.prototype.applyBuffs = function() {
      this.range *= this.weaponRange;
      this.range += this.weaponRangeFlat;
      this.damage *= this.weaponDamage;
      this.energyDamage *= this.weaponDamage;
      this.bulletSpeed *= this.weaponSpeed;
      this.minRange *= 1 + (this.weaponSpeed - 1) / 2;
      this.reloadTime *= this.weaponReload;
      this.shotEnergy *= this.weaponEnergy;
      this.reloadTime = Math.ceil(this.reloadTime);
      this.fireEnergy = this.shotEnergy / this.reloadTime;
      return this.dps = this.damage / this.reloadTime;
    };

    Turret.prototype.tick = function() {
      var angle, halfArc;
      if (this.reload > 0) {
        this.reload -= 1;
      }
      this.working = this.reload <= 1 && this.unit.energy > this.shotEnergy;
      if (!this.target) {
        this.rot = turnAngle(this.rot, this.unit.rot, 0.075);
      }
      halfArc = this.arc / 180 * Math.PI / 2;
      angle = angleBetween(this.unit.rot, this.rot);
      if (angle > halfArc) {
        this.rot = this.unit.rot + halfArc;
      }
      if (angle < -halfArc) {
        this.rot = this.unit.rot - halfArc;
      }
      if (this.unit.target !== null && this.canShoot(this.unit.target)) {
        this.target = this.unit.target;
        return this.fire();
      } else if (this.target !== null && this.canShoot(this.target)) {
        return this.fire();
      } else {
        return this.findTarget();
      }
    };

    Turret.prototype.draw = function() {
      if (this.working) {
        this.image = this.orignalImage;
      } else {
        this.image = this.orignalImage.replace(".png", "Reload.png");
      }
      return Turret.__super__.draw.call(this);
    };

    Turret.prototype.clientTick = function() {
      var ditance, ref, target, th;
      target = intp.things[this.targetId];
      if (target) {
        ref = this.aim(target), th = ref[0], ditance = ref[1];
        this._rot = th;
      } else {
        return this._rot = turnAngle(this._rot, this.unit.rot, 0.075);
      }
    };

    Turret.prototype.aim = function(thing) {
      var c, check, current_time, d, do_pos, j, max_time, mdown, miss, mup, p, predicted_pos, th;
      if (this.instant) {
        p = thing.pos;
        predicted_pos = [p[0] - this.worldPos[0], p[1] - this.worldPos[1]];
        th = v2.angle(predicted_pos);
        return [th, v2.mag(predicted_pos) - thing.radius];
      }
      do_pos = (function(_this) {
        return function(t) {
          var v;
          p = thing.pos;
          v = thing.vel;
          return [p[0] - _this.worldPos[0] + v[0] * t, p[1] - _this.worldPos[1] + v[1] * t];
        };
      })(this);
      check = (function(_this) {
        return function(t) {
          var miss, predicted_range;
          predicted_pos = do_pos(t);
          predicted_range = v2.mag(predicted_pos) - thing.radius;
          miss = Math.abs(predicted_range - _this.bulletSpeed * t);
          return miss;
        };
      })(this);
      max_time = this.range / this.bulletSpeed;
      current_time = 0;
      d = 2;
      miss = check(current_time);
      for (c = j = 0; j < 32; c = ++j) {
        mdown = check(current_time - max_time / d);
        mup = check(current_time + max_time / d);
        if (mdown < miss && mdown < mup) {
          current_time -= max_time / d;
          miss = mdown;
        }
        if (mup < miss && mup < mdown) {
          current_time += max_time / d;
          miss = mup;
        }
        if (miss < 1) {
          break;
        }
        d *= 2;
      }
      if (current_time < 0) {
        current_time = 0;
      }
      predicted_pos = do_pos(current_time);
      th = v2.angle(predicted_pos);
      return [th, v2.mag(predicted_pos) - thing.radius];
    };

    Turret.prototype.canShoot = function(other) {
      var aimDistance, arcAngle, distance, ref, th;
      if (!other.unit && !(other.missile && this.hitsMissiles)) {
        return false;
      }
      if (other.dead || (other.applyDamage == null)) {
        return false;
      }
      if (this.unit.id === other.id) {
        return false;
      }
      if (this.unit.side === other.side) {
        return false;
      }
      if (other.missile && other.explode === false) {
        return false;
      }
      if (other.cloak > 0 && other.cloaked()) {
        return false;
      }
      distance = v2.distance(this.worldPos, other.pos);
      if (distance > this.range * 2) {
        return false;
      }
      if (this.onlyInRange) {
        if (distance + other.radius < this.minRange || distance - other.radius > this.range) {
          return false;
        }
      }
      ref = this.aim(other), th = ref[0], aimDistance = ref[1];
      if (aimDistance < this.minRange || aimDistance > this.range) {
        return false;
      }
      arcAngle = angleBetween(this.unit.rot, th);
      if (Math.abs(arcAngle) / Math.PI * 180 > this.arc / 2) {
        return false;
      }
      if (this.noOverkill) {
        if (this.unit.target) {
          if (this.unit.target.id === other.id) {
            return true;
          } else {
            return false;
          }
        }
        if (other.maxHP * 2 < this.damage) {
          return false;
        }
        if (this.energyDamage && other.storeEnergy * 2 < this.energyDamage) {
          return false;
        }
      }
      return true;
    };

    Turret.prototype.findTarget = function() {
      var j, l, len, len1, m, ref, ref1, results, u;
      if (this.unit.target && !this.hitsMissiles) {
        this.target = this.unit.target;
        return;
      }
      this.target = null;
      if (this.hitsMissiles) {
        ref = this.unit.closestEnemyBullets();
        for (j = 0, len = ref.length; j < len; j++) {
          m = ref[j];
          if (this.canShoot(m)) {
            this.target = m;
            break;
          }
        }
        if (this.target) {
          return;
        }
      }
      ref1 = this.unit.closestEnemies();
      results = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        u = ref1[l];
        if (this.canShoot(u)) {
          this.target = u;
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Turret.prototype.fire = function() {
      var angleLeft, dist, ref, rot;
      ref = this.aim(this.target), rot = ref[0], dist = ref[1];
      this.rot = turnAngle(this.rot, rot, 1);
      angleLeft = angleBetween(this.rot, rot);
      if (Math.abs(angleLeft) > .01) {
        return;
      }
      if (this.reload > 0) {
        return;
      }
      if (this.unit.energy < this.shotEnergy) {
        return;
      }
      this.reload = this.reloadTime;
      this.unit.energy -= this.shotEnergy;
      return this.makeBullet(dist);
    };

    Turret.prototype.makeBullet = function(distance) {
      var exp, particle;
      this.unit.cloak = 0;
      particle = new this.bulletCls();
      sim.things[particle.id] = particle;
      particle.side = this.unit.side;
      particle.life = 0;
      particle.dead = false;
      particle.z = this.unit.z + .001;
      particle.turretNum = this.turretNum;
      particle.origin = this.unit;
      particle.weapon = this;
      particle.target = this.target;
      particle.speed = this.bulletSpeed;
      particle.damage = this.damage;
      particle.energyDamage = this.energyDamage;
      particle.hitsMissiles = this.hitsMissiles;
      particle.aoe = this.aoe;
      particle.burnAmount = this.burnAmount;
      v2.set(this.worldPos, particle.pos);
      v2.pointTo(particle.vel, this.rot);
      v2.scale(particle.vel, particle.speed);
      particle.rot = this.rot;
      if (this.instant) {
        particle.targetPos = v2.create(particle.target.pos);
        if (this.target.maxLife) {
          this.target.life = this.target.maxLife;
          this.target.explode = false;
          exp = new types.HitExplosion();
          exp.z = 1000;
          exp.pos = [this.target.pos[0], this.target.pos[1]];
          exp.vel = [0, 0];
          exp.rot = 0;
          exp.radius = .5;
          sim.things[exp.id] = exp;
        } else {
          this.target.applyDamage(particle.damage);
        }
      } else if (this.exactRange) {
        particle.maxLife = Math.floor(distance / particle.speed);
        particle.hitPos = v2.create();
        v2.add(particle.hitPos, particle.vel);
        v2.scale(particle.hitPos, distance / particle.speed);
        v2.add(particle.hitPos, particle.pos);
      } else {
        particle.maxLife = Math.floor(this.range / particle.speed * (1 + this.overshoot));
      }
      return typeof particle.postFire === "function" ? particle.postFire() : void 0;
    };

    return Turret;

  })(Part);

  window.toShort = function(spec) {
    if (!spec) {
      return null;
    }
    return JSON.stringify(spec);
  };

  legacyParts = [null, "Mount360", "Mount180", "Mount270", "Mount90", "Mount30", "HArmor2x2", "HArmor1x2", "HArmor1x1", "HArmor2x1", "HArmor1x1Angle", "UArmor1x1", "UArmor1x2", "UArmor2x1", "UArmor1x1Angle", "Reactor2x2", "Reactor1x2", "Reactor1x1", "Reactor2x1", "EnergyTransfer", "ShieldGen2x2", "ShieldGen2x1", "Battery1x2", "Battery1x1", "Battery2x1", "Battery2x2", "Engine01", "Engine02", "Engine03", "Engine04", "Engine05", "Engine06", "Engine07", "HArmor2x2Front1", "HArmor2x2Front2", "HArmor1x2Font1", "HArmor1x2Front2", "HArmor2x2Back1", "HArmor2x2Back2", "HArmor1x2Back1", "HArmor1x2Back2", "Wing1x2", "Wing2x2", "Wing2x1", "Wing1x1Notch", "Wing1x1Angle", "Wing1x1Round", "PDTurret", "HeavyPDTurret", "RingTurret", "TorpTurret", "MissileTurret", "ArtilleryTurret", "PlasmaTurret", "LightBeamTurret", "HeavyBeamTurret", "FlackTurret", "SniperGun", "EMPGun", "AOEWarhead", "TargetingMod", "DamageMod", "ReloaderMod", "BulletSpeedMod", "Ai1", "OverKillAi", "Ai3", "Ai4", "ShapedWarhead", "BombGun", "HArmor1x1AngleBack", "UArmor1x1AngleBack", "HArmor2x2Angle", "HArmor2x2AngleBack", "VArmor1x2SideBar", "VArmor1x2SideBarFilled", "VArmor1x2IBeam", "VArmor1x2Corner4", "VArmor1x2End", "VArmor1x1Corner1", "VArmor1x1Corner2", "VArmor1x1Corner3", "VArmor1x1Hook", "VArmor1x1CornerBack", "Mount360Micro", "AutoTurret", "TeslaTurret", "WavePullTurret", "ShieldGen1x1", "WavePushTurret", "CloakGenerator", "SymbolDecal1", "SymbolDecal2", "SymbolDecal3", "SymbolDecal4", "SymbolDecal5", "SymbolDecal6", "SymbolDecal7", "SymbolDecal8", "SymbolDecal9", "SymbolDecal10", "SymbolDecal11", "SymbolDecal12", "SymbolDecal13", "SymbolDecal14", "SymbolDecal15", "SymbolDecal16", "SymbolDecal17", "SymbolDecal18", "SymbolDecal19", "SymbolDecal20", "SymbolDecal21", "SymbolDecal22", "SymbolDecal23", "SymbolDecal24", null, null, null, null, null, "UArmor2x2", "UArmor1x2Notch1", "UArmor1x2Notch2", "UArmor1x1Notch1", "UArmor1x1Notch2", "UArmor1x1Spike", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "VArmor2x2", "VArmor1x2", "VArmor1x1", "VArmor1x1Angle", "VArmor2x2Angle", "VArmor2x2Curve", "VArmor1x1Curve", null, null, null, "HAarmor1x2Curved", "HArmor2x2Curved", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Stripe1x1", "Stripe1x1Corner", "Stripe1x2", "Stripe2x1", "Stripe2x2", "Stripe2x2Corner", "Stripe2x2Round", "StripeDouble2x1", "StripeDouble2x2", null, null, null, null, null, null, null, null, null, null, null, "LetterA", "LetterB", "LetterC", "LetterD", "LetterE", "LetterF", "LetterG", "LetterH", "LetterI", "LetterJ", "LetterK", "LetterL", "LetterM", "LetterN", "LetterO", "LetterP", "LetterQ", "LetterR", "LetterS", "LetterT", "LetterU", "LetterV", "LetterW", "LetterX", "LetterY", "LetterZ", "LetterPound", "LetterDot", null, null, "Letter0", "Letter1", "Letter2", "Letter3", "Letter4", "Letter5", "Letter6", "Letter7", "Letter8", "Letter9", "DroneBody", "Mount10Range", "FlameTurret", "StasisField", "Faction2", "Faction3", "Faction4", "Faction5", "Faction6", "Faction7", "Faction1", null, null, null, null];

  window.fromShort = function(rawShort) {
    var bin, e, error, i, j, ref, short, spec, type;
    if (!rawShort) {
      return {
        parts: []
      };
    }
    try {
      if (typeof rawShort === "object") {
        if (rawShort.parts != null) {
          return rawShort;
        }
      }
      if (rawShort[0] === "{") {
        spec = JSON.parse(rawShort);
        if (!spec.parts) {
          spec = {
            parts: []
          };
        }
        return spec;
      } else {
        short = decodeURIComponent(rawShort);
        bin = new Uint8Array(atob(short).split("").map(function(c) {
          return c.charCodeAt(0);
        }));
        spec = [];
        for (i = j = 0, ref = bin.length / 3; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          type = legacyParts[bin[i * 3 + 2]];
          if (type) {
            spec.push({
              pos: [(bin[i * 3 + 0] - 20) * 10, (bin[i * 3 + 1] - 20) * 10],
              type: type
            });
          }
        }
        return {
          parts: spec
        };
      }
    } catch (error) {
      e = error;
      console.log("Can't decode ship", e, rawShort);
    }
    return {
      parts: []
    };
  };

  window.specCost = function(spec) {
    var cost, j, len, part, partCls, ref;
    cost = 0;
    if (!Array.isArray(spec)) {
      spec = fromShort(spec);
    }
    ref = spec.parts;
    for (j = 0, len = ref.length; j < len; j++) {
      part = ref[j];
      partCls = window.parts[part.type];
      if (partCls) {
        cost += partCls.prototype.cost;
      }
    }
    return cost;
  };

}).call(this);
;


//from src/parts.js
// Generated by CoffeeScript 1.10.0
(function() {
  var AiPart, Battery, Faction, HArmor, ModPart, ShadowArmor, UArmor, VArmor, VShadowArmor, Wing, _a, _b, _wave,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.parts = {};

  parts.Mount360 = (function(superClass) {
    extend(Mount360, superClass);

    function Mount360() {
      return Mount360.__super__.constructor.apply(this, arguments);
    }

    Mount360.prototype.name = "360 Turret Mount";

    Mount360.prototype.desc = "Use this to mount weapons.";

    Mount360.prototype.hp = 10;

    Mount360.prototype.cost = 36;

    Mount360.prototype.image = "mount360.png";

    Mount360.prototype.mount = true;

    Mount360.prototype.arc = 360;

    Mount360.prototype.attach = true;

    Mount360.prototype.size = [2, 2];

    Mount360.prototype.mass = 30;

    Mount360.prototype.stripe = true;

    Mount360.prototype.tab = "weapons";

    Mount360.prototype.canRotate = false;

    return Mount360;

  })(Part);

  parts.Mount270 = (function(superClass) {
    extend(Mount270, superClass);

    function Mount270() {
      return Mount270.__super__.constructor.apply(this, arguments);
    }

    Mount270.prototype.name = "270 Turret Mount";

    Mount270.prototype.desc = "Use this to mount weapons.";

    Mount270.prototype.hp = 20;

    Mount270.prototype.cost = 27;

    Mount270.prototype.image = "mount300.png";

    Mount270.prototype.arc = 270;

    Mount270.prototype.size = [2, 2];

    Mount270.prototype.mass = 10;

    return Mount270;

  })(parts.Mount360);

  parts.Mount180 = (function(superClass) {
    extend(Mount180, superClass);

    function Mount180() {
      return Mount180.__super__.constructor.apply(this, arguments);
    }

    Mount180.prototype.name = "200 Turret Mount";

    Mount180.prototype.desc = "Use this to mount weapons.";

    Mount180.prototype.hp = 20;

    Mount180.prototype.cost = 15;

    Mount180.prototype.image = "mount180.png";

    Mount180.prototype.arc = 200;

    Mount180.prototype.size = [2, 2];

    Mount180.prototype.mass = 10;

    return Mount180;

  })(parts.Mount360);

  parts.Mount90 = (function(superClass) {
    extend(Mount90, superClass);

    function Mount90() {
      return Mount90.__super__.constructor.apply(this, arguments);
    }

    Mount90.prototype.name = "90 Turret Mount";

    Mount90.prototype.desc = "Use this to mount weapons.";

    Mount90.prototype.hp = 10;

    Mount90.prototype.cost = 9;

    Mount90.prototype.image = "mount90.png";

    Mount90.prototype.arc = 90;

    Mount90.prototype.size = [2, 2];

    Mount90.prototype.mass = 5;

    return Mount90;

  })(parts.Mount360);

  parts.Mount30 = (function(superClass) {
    extend(Mount30, superClass);

    function Mount30() {
      return Mount30.__super__.constructor.apply(this, arguments);
    }

    Mount30.prototype.name = "30 Turret Mount";

    Mount30.prototype.desc = "Use this to mount weapons.";

    Mount30.prototype.hp = 5;

    Mount30.prototype.cost = 3;

    Mount30.prototype.image = "mount30.png";

    Mount30.prototype.arc = 30;

    Mount30.prototype.size = [2, 2];

    Mount30.prototype.mass = 5;

    return Mount30;

  })(parts.Mount360);

  parts.Mount360Micro = (function(superClass) {
    extend(Mount360Micro, superClass);

    function Mount360Micro() {
      return Mount360Micro.__super__.constructor.apply(this, arguments);
    }

    Mount360Micro.prototype.name = "Micro 360 Turret Mount";

    Mount360Micro.prototype.desc = "A cheaper lighter 360 mount that has only 66% of the range of mounted weapons.";

    Mount360Micro.prototype.hp = 20;

    Mount360Micro.prototype.cost = 15;

    Mount360Micro.prototype.image = "mount360short.png";

    Mount360Micro.prototype.mount = true;

    Mount360Micro.prototype.arc = 360;

    Mount360Micro.prototype.attach = true;

    Mount360Micro.prototype.size = [2, 2];

    Mount360Micro.prototype.mass = 5;

    Mount360Micro.prototype.rangeBuffMul = .66;

    Mount360Micro.prototype.initTurret = function(turret) {
      return turret.range *= this.rangeBuffMul;
    };

    return Mount360Micro;

  })(parts.Mount360);

  parts.Mount10Range = (function(superClass) {
    extend(Mount10Range, superClass);

    function Mount10Range() {
      return Mount10Range.__super__.constructor.apply(this, arguments);
    }

    Mount10Range.prototype.name = "Spinal Turret Mount";

    Mount10Range.prototype.desc = "A narrow angle forward mount that grants a large flat range bonus range.";

    Mount10Range.prototype.hp = 1;

    Mount10Range.prototype.cost = 20;

    Mount10Range.prototype.image = "mount10range.png";

    Mount10Range.prototype.mount = true;

    Mount10Range.prototype.arc = 20;

    Mount10Range.prototype.attach = true;

    Mount10Range.prototype.size = [2, 4];

    Mount10Range.prototype.mass = 50;

    Mount10Range.prototype.weaponRangeFlat = 600;

    Mount10Range.prototype.weaponEnergy = 50;

    Mount10Range.prototype.initTurret = function(turret) {
      turret.weaponRangeFlat += this.weaponRangeFlat;
      return turret.weaponEnergy *= 1 + this.weaponEnergy / 100;
    };

    return Mount10Range;

  })(parts.Mount360);

  parts.Mount10Demi = (function(superClass) {
    extend(Mount10Demi, superClass);

    function Mount10Demi() {
      return Mount10Demi.__super__.constructor.apply(this, arguments);
    }

    Mount10Demi.prototype.name = "Demispinal Turret Mount";

    Mount10Demi.prototype.desc = "A smaller narrow angle forward mount that grants a moderate flat range bonus.";

    Mount10Demi.prototype.hp = 1;

    Mount10Demi.prototype.cost = 5;

    Mount10Demi.prototype.image = "mount10wide.png";

    Mount10Demi.prototype.mount = true;

    Mount10Demi.prototype.arc = 20;

    Mount10Demi.prototype.attach = true;

    Mount10Demi.prototype.size = [4, 2];

    Mount10Demi.prototype.mass = 10;

    Mount10Demi.prototype.weaponRangeFlat = 250;

    Mount10Demi.prototype.weaponEnergy = 25;

    Mount10Demi.prototype.initTurret = function(turret) {
      turret.weaponRangeFlat += this.weaponRangeFlat;
      return turret.weaponEnergy *= 1 + this.weaponEnergy / 100;
    };

    return Mount10Demi;

  })(parts.Mount360);

  parts.DroneBody = (function(superClass) {
    extend(DroneBody, superClass);

    function DroneBody() {
      return DroneBody.__super__.constructor.apply(this, arguments);
    }

    DroneBody.prototype.name = "DroneBody";

    DroneBody.prototype.desc = "An independent drone with the mounted weapon.";

    DroneBody.prototype.hp = 5;

    DroneBody.prototype.cost = 15;

    DroneBody.prototype.image = "droneBody.png";

    DroneBody.prototype.mount = true;

    DroneBody.prototype.arc = 360;

    DroneBody.prototype.attach = false;

    DroneBody.prototype.solid = false;

    DroneBody.prototype.size = [4, 4];

    DroneBody.prototype.mass = 10;

    DroneBody.prototype.stripe = false;

    DroneBody.prototype.disable = true;

    return DroneBody;

  })(parts.Mount360);

  parts.Pad2x2 = (function(superClass) {
    extend(Pad2x2, superClass);

    function Pad2x2() {
      return Pad2x2.__super__.constructor.apply(this, arguments);
    }

    Pad2x2.prototype.name = "Fighter pad";

    Pad2x2.prototype.desc = "Allows fighters to land and repair.";

    Pad2x2.prototype.hp = 10;

    Pad2x2.prototype.cost = 36;

    Pad2x2.prototype.image = "pad2x2.png";

    Pad2x2.prototype.attach = true;

    Pad2x2.prototype.size = [2, 2];

    Pad2x2.prototype.mass = 30;

    Pad2x2.prototype.tab = "armor";

    Pad2x2.prototype.disable = true;

    return Pad2x2;

  })(Part);

  HArmor = (function(superClass) {
    extend(HArmor, superClass);

    function HArmor() {
      return HArmor.__super__.constructor.apply(this, arguments);
    }

    HArmor.prototype.name = "Heavyweight Armor";

    HArmor.prototype.desc = "Adds HP but also adds a lot of weight, making a ship slower.";

    HArmor.prototype.canShowDamage = true;

    HArmor.prototype.paintable = true;

    HArmor.prototype.tab = "armor1";

    return HArmor;

  })(Part);

  parts.HArmor2x2 = (function(superClass) {
    extend(HArmor2x2, superClass);

    function HArmor2x2() {
      return HArmor2x2.__super__.constructor.apply(this, arguments);
    }

    HArmor2x2.prototype.hp = 64;

    HArmor2x2.prototype.cost = 8;

    HArmor2x2.prototype.image = "HArmor2x2.png";

    HArmor2x2.prototype.size = [2, 2];

    HArmor2x2.prototype.mass = 40;

    return HArmor2x2;

  })(HArmor);

  parts.HArmor1x2 = (function(superClass) {
    extend(HArmor1x2, superClass);

    function HArmor1x2() {
      return HArmor1x2.__super__.constructor.apply(this, arguments);
    }

    HArmor1x2.prototype.name = "Heavyweight Armor";

    HArmor1x2.prototype.hp = 32;

    HArmor1x2.prototype.cost = 4;

    HArmor1x2.prototype.image = "HArmor1x2.png";

    HArmor1x2.prototype.size = [1, 2];

    HArmor1x2.prototype.mass = 20;

    return HArmor1x2;

  })(HArmor);

  parts.HArmor1x1 = (function(superClass) {
    extend(HArmor1x1, superClass);

    function HArmor1x1() {
      return HArmor1x1.__super__.constructor.apply(this, arguments);
    }

    HArmor1x1.prototype.name = "Heavyweight Armor";

    HArmor1x1.prototype.hp = 16;

    HArmor1x1.prototype.cost = 2;

    HArmor1x1.prototype.image = "HArmor1x1.png";

    HArmor1x1.prototype.size = [1, 1];

    HArmor1x1.prototype.mass = 10;

    return HArmor1x1;

  })(HArmor);

  parts.HArmor2x1 = (function(superClass) {
    extend(HArmor2x1, superClass);

    function HArmor2x1() {
      return HArmor2x1.__super__.constructor.apply(this, arguments);
    }

    HArmor2x1.prototype.name = "Heavyweight Armor";

    HArmor2x1.prototype.hp = 32;

    HArmor2x1.prototype.cost = 4;

    HArmor2x1.prototype.image = "HArmor2x1.png";

    HArmor2x1.prototype.size = [2, 1];

    HArmor2x1.prototype.mass = 20;

    return HArmor2x1;

  })(HArmor);

  parts.HArmor1x1Angle = (function(superClass) {
    extend(HArmor1x1Angle, superClass);

    function HArmor1x1Angle() {
      return HArmor1x1Angle.__super__.constructor.apply(this, arguments);
    }

    HArmor1x1Angle.prototype.name = "Heavyweight Armor";

    HArmor1x1Angle.prototype.hp = 8;

    HArmor1x1Angle.prototype.cost = 1;

    HArmor1x1Angle.prototype.image = "HArmor1x1Angle.png";

    HArmor1x1Angle.prototype.size = [1, 1];

    HArmor1x1Angle.prototype.mass = 5;

    return HArmor1x1Angle;

  })(HArmor);

  parts.HArmor1x1AngleBack = (function(superClass) {
    extend(HArmor1x1AngleBack, superClass);

    function HArmor1x1AngleBack() {
      return HArmor1x1AngleBack.__super__.constructor.apply(this, arguments);
    }

    HArmor1x1AngleBack.prototype.name = "Heavyweight Armor";

    HArmor1x1AngleBack.prototype.hp = 8;

    HArmor1x1AngleBack.prototype.cost = 1;

    HArmor1x1AngleBack.prototype.image = "HArmor1x1AngleBack.png";

    HArmor1x1AngleBack.prototype.size = [1, 1];

    HArmor1x1AngleBack.prototype.mass = 5;

    return HArmor1x1AngleBack;

  })(HArmor);

  parts.HArmor2x2Angle = (function(superClass) {
    extend(HArmor2x2Angle, superClass);

    function HArmor2x2Angle() {
      return HArmor2x2Angle.__super__.constructor.apply(this, arguments);
    }

    HArmor2x2Angle.prototype.name = "Heavyweight Armor";

    HArmor2x2Angle.prototype.hp = 64;

    HArmor2x2Angle.prototype.cost = 8;

    HArmor2x2Angle.prototype.image = "HArmor2x2Angle.png";

    HArmor2x2Angle.prototype.size = [2, 2];

    HArmor2x2Angle.prototype.mass = 40;

    return HArmor2x2Angle;

  })(HArmor);

  parts.HArmor2x2AngleBack = (function(superClass) {
    extend(HArmor2x2AngleBack, superClass);

    function HArmor2x2AngleBack() {
      return HArmor2x2AngleBack.__super__.constructor.apply(this, arguments);
    }

    HArmor2x2AngleBack.prototype.name = "Heavyweight Armor";

    HArmor2x2AngleBack.prototype.hp = 64;

    HArmor2x2AngleBack.prototype.cost = 8;

    HArmor2x2AngleBack.prototype.image = "HArmor2x2AngleBack.png";

    HArmor2x2AngleBack.prototype.size = [2, 2];

    HArmor2x2AngleBack.prototype.mass = 40;

    return HArmor2x2AngleBack;

  })(HArmor);

  parts.HArmor2x2Front1 = (function(superClass) {
    extend(HArmor2x2Front1, superClass);

    function HArmor2x2Front1() {
      return HArmor2x2Front1.__super__.constructor.apply(this, arguments);
    }

    HArmor2x2Front1.prototype.hp = 56;

    HArmor2x2Front1.prototype.mass = 35;

    HArmor2x2Front1.prototype.cost = 7;

    HArmor2x2Front1.prototype.image = "HArmor2x2Front1.png";

    HArmor2x2Front1.prototype.size = [2, 2];

    return HArmor2x2Front1;

  })(HArmor);

  parts.HArmor2x2Front2 = (function(superClass) {
    extend(HArmor2x2Front2, superClass);

    function HArmor2x2Front2() {
      return HArmor2x2Front2.__super__.constructor.apply(this, arguments);
    }

    HArmor2x2Front2.prototype.hp = 48;

    HArmor2x2Front2.prototype.mass = 30;

    HArmor2x2Front2.prototype.cost = 6;

    HArmor2x2Front2.prototype.image = "HArmor2x2Front2.png";

    HArmor2x2Front2.prototype.size = [2, 2];

    return HArmor2x2Front2;

  })(HArmor);

  parts.HArmor1x2Font1 = (function(superClass) {
    extend(HArmor1x2Font1, superClass);

    function HArmor1x2Font1() {
      return HArmor1x2Font1.__super__.constructor.apply(this, arguments);
    }

    HArmor1x2Font1.prototype.hp = 24;

    HArmor1x2Font1.prototype.mass = 15;

    HArmor1x2Font1.prototype.cost = 3;

    HArmor1x2Font1.prototype.image = "HArmor1x2Font1.png";

    HArmor1x2Font1.prototype.size = [2, 1];

    return HArmor1x2Font1;

  })(HArmor);

  parts.HArmor1x2Front2 = (function(superClass) {
    extend(HArmor1x2Front2, superClass);

    function HArmor1x2Front2() {
      return HArmor1x2Front2.__super__.constructor.apply(this, arguments);
    }

    HArmor1x2Front2.prototype.hp = 16;

    HArmor1x2Front2.prototype.mass = 10;

    HArmor1x2Front2.prototype.cost = 2;

    HArmor1x2Front2.prototype.image = "HArmor1x2Front2.png";

    HArmor1x2Front2.prototype.size = [2, 1];

    return HArmor1x2Front2;

  })(HArmor);

  parts.HArmor2x2Back1 = (function(superClass) {
    extend(HArmor2x2Back1, superClass);

    function HArmor2x2Back1() {
      return HArmor2x2Back1.__super__.constructor.apply(this, arguments);
    }

    HArmor2x2Back1.prototype.hp = 56;

    HArmor2x2Back1.prototype.mass = 35;

    HArmor2x2Back1.prototype.cost = 7;

    HArmor2x2Back1.prototype.image = "HArmor2x2Back1.png";

    HArmor2x2Back1.prototype.size = [2, 2];

    return HArmor2x2Back1;

  })(HArmor);

  parts.HArmor2x2Back2 = (function(superClass) {
    extend(HArmor2x2Back2, superClass);

    function HArmor2x2Back2() {
      return HArmor2x2Back2.__super__.constructor.apply(this, arguments);
    }

    HArmor2x2Back2.prototype.hp = 48;

    HArmor2x2Back2.prototype.mass = 30;

    HArmor2x2Back2.prototype.cost = 6;

    HArmor2x2Back2.prototype.image = "HArmor2x2Back2.png";

    HArmor2x2Back2.prototype.size = [2, 2];

    return HArmor2x2Back2;

  })(HArmor);

  parts.HArmor1x2Back1 = (function(superClass) {
    extend(HArmor1x2Back1, superClass);

    function HArmor1x2Back1() {
      return HArmor1x2Back1.__super__.constructor.apply(this, arguments);
    }

    HArmor1x2Back1.prototype.hp = 24;

    HArmor1x2Back1.prototype.mass = 15;

    HArmor1x2Back1.prototype.cost = 3;

    HArmor1x2Back1.prototype.image = "HArmor1x2Back1.png";

    HArmor1x2Back1.prototype.size = [2, 1];

    return HArmor1x2Back1;

  })(HArmor);

  parts.HArmor1x2Back2 = (function(superClass) {
    extend(HArmor1x2Back2, superClass);

    function HArmor1x2Back2() {
      return HArmor1x2Back2.__super__.constructor.apply(this, arguments);
    }

    HArmor1x2Back2.prototype.hp = 16;

    HArmor1x2Back2.prototype.mass = 10;

    HArmor1x2Back2.prototype.cost = 2;

    HArmor1x2Back2.prototype.image = "HArmor1x2Back2.png";

    HArmor1x2Back2.prototype.size = [2, 1];

    return HArmor1x2Back2;

  })(HArmor);

  parts.HArmor2x2Curved = (function(superClass) {
    extend(HArmor2x2Curved, superClass);

    function HArmor2x2Curved() {
      return HArmor2x2Curved.__super__.constructor.apply(this, arguments);
    }

    HArmor2x2Curved.prototype.hp = 64;

    HArmor2x2Curved.prototype.mass = 40;

    HArmor2x2Curved.prototype.cost = 8;

    HArmor2x2Curved.prototype.image = "HArmor2x2Curved.png";

    HArmor2x2Curved.prototype.size = [2, 2];

    HArmor2x2Curved.prototype.dlc = "Curves and Shadows";

    return HArmor2x2Curved;

  })(HArmor);

  parts.HArmor2x1Curved = (function(superClass) {
    extend(HArmor2x1Curved, superClass);

    function HArmor2x1Curved() {
      return HArmor2x1Curved.__super__.constructor.apply(this, arguments);
    }

    HArmor2x1Curved.prototype.hp = 16;

    HArmor2x1Curved.prototype.mass = 10;

    HArmor2x1Curved.prototype.cost = 2;

    HArmor2x1Curved.prototype.image = "HArmor2x1Curved.png";

    HArmor2x1Curved.prototype.size = [2, 1];

    return HArmor2x1Curved;

  })(HArmor);

  parts.HArmor1x2Curved = (function(superClass) {
    extend(HArmor1x2Curved, superClass);

    function HArmor1x2Curved() {
      return HArmor1x2Curved.__super__.constructor.apply(this, arguments);
    }

    HArmor1x2Curved.prototype.hp = 16;

    HArmor1x2Curved.prototype.mass = 10;

    HArmor1x2Curved.prototype.cost = 2;

    HArmor1x2Curved.prototype.image = "HArmor1x2Curved.png";

    HArmor1x2Curved.prototype.size = [1, 2];

    return HArmor1x2Curved;

  })(HArmor);

  ShadowArmor = (function(superClass) {
    extend(ShadowArmor, superClass);

    function ShadowArmor() {
      return ShadowArmor.__super__.constructor.apply(this, arguments);
    }

    ShadowArmor.prototype.dlc = "Curves and Shadows";

    ShadowArmor.prototype.northWest = true;

    ShadowArmor.prototype.canShowDamage = false;

    return ShadowArmor;

  })(HArmor);

  parts.ShadowNArmor2x2Angle = (function(superClass) {
    extend(ShadowNArmor2x2Angle, superClass);

    function ShadowNArmor2x2Angle() {
      return ShadowNArmor2x2Angle.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor2x2Angle.prototype.hp = 64;

    ShadowNArmor2x2Angle.prototype.mass = 40;

    ShadowNArmor2x2Angle.prototype.cost = 8;

    ShadowNArmor2x2Angle.prototype.image = "ShadowNArmor2x2Angle.png";

    ShadowNArmor2x2Angle.prototype.size = [2, 2];

    return ShadowNArmor2x2Angle;

  })(ShadowArmor);

  parts.ShadowNArmor2x2 = (function(superClass) {
    extend(ShadowNArmor2x2, superClass);

    function ShadowNArmor2x2() {
      return ShadowNArmor2x2.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor2x2.prototype.hp = 64;

    ShadowNArmor2x2.prototype.mass = 40;

    ShadowNArmor2x2.prototype.cost = 8;

    ShadowNArmor2x2.prototype.image = "ShadowNArmor2x2.png";

    ShadowNArmor2x2.prototype.size = [2, 2];

    return ShadowNArmor2x2;

  })(ShadowArmor);

  parts.ShadowNArmor2x1 = (function(superClass) {
    extend(ShadowNArmor2x1, superClass);

    function ShadowNArmor2x1() {
      return ShadowNArmor2x1.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor2x1.prototype.hp = 32;

    ShadowNArmor2x1.prototype.mass = 20;

    ShadowNArmor2x1.prototype.cost = 4;

    ShadowNArmor2x1.prototype.image = "ShadowNArmor2x1.png";

    ShadowNArmor2x1.prototype.size = [2, 1];

    return ShadowNArmor2x1;

  })(ShadowArmor);

  parts.ShadowNArmor1x1 = (function(superClass) {
    extend(ShadowNArmor1x1, superClass);

    function ShadowNArmor1x1() {
      return ShadowNArmor1x1.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor1x1.prototype.hp = 16;

    ShadowNArmor1x1.prototype.mass = 10;

    ShadowNArmor1x1.prototype.cost = 2;

    ShadowNArmor1x1.prototype.image = "ShadowNArmor1x1.png";

    ShadowNArmor1x1.prototype.size = [1, 1];

    return ShadowNArmor1x1;

  })(ShadowArmor);

  parts.ShadowNArmor1x2 = (function(superClass) {
    extend(ShadowNArmor1x2, superClass);

    function ShadowNArmor1x2() {
      return ShadowNArmor1x2.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor1x2.prototype.hp = 32;

    ShadowNArmor1x2.prototype.mass = 20;

    ShadowNArmor1x2.prototype.cost = 4;

    ShadowNArmor1x2.prototype.image = "ShadowNArmor1x2.png";

    ShadowNArmor1x2.prototype.size = [1, 2];

    return ShadowNArmor1x2;

  })(ShadowArmor);

  parts.ShadowNArmor2x2Curve = (function(superClass) {
    extend(ShadowNArmor2x2Curve, superClass);

    function ShadowNArmor2x2Curve() {
      return ShadowNArmor2x2Curve.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor2x2Curve.prototype.hp = 64;

    ShadowNArmor2x2Curve.prototype.mass = 40;

    ShadowNArmor2x2Curve.prototype.cost = 8;

    ShadowNArmor2x2Curve.prototype.image = "ShadowNArmor2x2Curve.png";

    ShadowNArmor2x2Curve.prototype.size = [2, 2];

    return ShadowNArmor2x2Curve;

  })(ShadowArmor);

  parts.ShadowNArmor1x1Angle = (function(superClass) {
    extend(ShadowNArmor1x1Angle, superClass);

    function ShadowNArmor1x1Angle() {
      return ShadowNArmor1x1Angle.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor1x1Angle.prototype.hp = 8;

    ShadowNArmor1x1Angle.prototype.mass = 5;

    ShadowNArmor1x1Angle.prototype.cost = 1;

    ShadowNArmor1x1Angle.prototype.image = "ShadowNArmor1x1Angle.png";

    ShadowNArmor1x1Angle.prototype.size = [1, 1];

    return ShadowNArmor1x1Angle;

  })(ShadowArmor);

  parts.ShadowNArmor1x1Corner = (function(superClass) {
    extend(ShadowNArmor1x1Corner, superClass);

    function ShadowNArmor1x1Corner() {
      return ShadowNArmor1x1Corner.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor1x1Corner.prototype.hp = 16;

    ShadowNArmor1x1Corner.prototype.mass = 10;

    ShadowNArmor1x1Corner.prototype.cost = 2;

    ShadowNArmor1x1Corner.prototype.image = "ShadowNArmor1x1Corner.png";

    ShadowNArmor1x1Corner.prototype.size = [1, 1];

    return ShadowNArmor1x1Corner;

  })(ShadowArmor);

  parts.ShadowNArmor1x1CornerInner = (function(superClass) {
    extend(ShadowNArmor1x1CornerInner, superClass);

    function ShadowNArmor1x1CornerInner() {
      return ShadowNArmor1x1CornerInner.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor1x1CornerInner.prototype.hp = 16;

    ShadowNArmor1x1CornerInner.prototype.mass = 10;

    ShadowNArmor1x1CornerInner.prototype.cost = 2;

    ShadowNArmor1x1CornerInner.prototype.image = "ShadowNArmor1x1CornerInner.png";

    ShadowNArmor1x1CornerInner.prototype.size = [1, 1];

    return ShadowNArmor1x1CornerInner;

  })(ShadowArmor);

  parts.ShadowNArmor2x1Curved = (function(superClass) {
    extend(ShadowNArmor2x1Curved, superClass);

    function ShadowNArmor2x1Curved() {
      return ShadowNArmor2x1Curved.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor2x1Curved.prototype.hp = 16;

    ShadowNArmor2x1Curved.prototype.mass = 10;

    ShadowNArmor2x1Curved.prototype.cost = 2;

    ShadowNArmor2x1Curved.prototype.image = "ShadowNArmor2x1Curved.png";

    ShadowNArmor2x1Curved.prototype.size = [2, 1];

    return ShadowNArmor2x1Curved;

  })(ShadowArmor);

  parts.ShadowNArmor1x2Curved = (function(superClass) {
    extend(ShadowNArmor1x2Curved, superClass);

    function ShadowNArmor1x2Curved() {
      return ShadowNArmor1x2Curved.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor1x2Curved.prototype.hp = 16;

    ShadowNArmor1x2Curved.prototype.mass = 10;

    ShadowNArmor1x2Curved.prototype.cost = 2;

    ShadowNArmor1x2Curved.prototype.image = "ShadowNArmor1x2Curved.png";

    ShadowNArmor1x2Curved.prototype.size = [1, 2];

    return ShadowNArmor1x2Curved;

  })(ShadowArmor);

  parts.ShadowNArmor1x2Font1 = (function(superClass) {
    extend(ShadowNArmor1x2Font1, superClass);

    function ShadowNArmor1x2Font1() {
      return ShadowNArmor1x2Font1.__super__.constructor.apply(this, arguments);
    }

    ShadowNArmor1x2Font1.prototype.hp = 24;

    ShadowNArmor1x2Font1.prototype.mass = 15;

    ShadowNArmor1x2Font1.prototype.cost = 3;

    ShadowNArmor1x2Font1.prototype.image = "ShadowNArmor1x2Font1.png";

    ShadowNArmor1x2Font1.prototype.size = [2, 1];

    return ShadowNArmor1x2Font1;

  })(ShadowArmor);

  UArmor = (function(superClass) {
    extend(UArmor, superClass);

    function UArmor() {
      return UArmor.__super__.constructor.apply(this, arguments);
    }

    UArmor.prototype.name = "Ultralight Armor";

    UArmor.prototype.desc = "Minimizes weight and size, great for fighters, but is more expensive than other armors.";

    UArmor.prototype.tab = "armor3";

    UArmor.prototype.paintable = true;

    return UArmor;

  })(Part);

  parts.UArmor1x1 = (function(superClass) {
    extend(UArmor1x1, superClass);

    function UArmor1x1() {
      return UArmor1x1.__super__.constructor.apply(this, arguments);
    }

    UArmor1x1.prototype.hp = 16;

    UArmor1x1.prototype.cost = 10;

    UArmor1x1.prototype.image = "UArmor1x1.png";

    UArmor1x1.prototype.size = [1, 1];

    UArmor1x1.prototype.mass = 1;

    return UArmor1x1;

  })(UArmor);

  parts.UArmor1x2 = (function(superClass) {
    extend(UArmor1x2, superClass);

    function UArmor1x2() {
      return UArmor1x2.__super__.constructor.apply(this, arguments);
    }

    UArmor1x2.prototype.hp = 32;

    UArmor1x2.prototype.cost = 20;

    UArmor1x2.prototype.image = "UArmor1x2.png";

    UArmor1x2.prototype.size = [1, 2];

    UArmor1x2.prototype.mass = 2;

    return UArmor1x2;

  })(UArmor);

  parts.UArmor2x1 = (function(superClass) {
    extend(UArmor2x1, superClass);

    function UArmor2x1() {
      return UArmor2x1.__super__.constructor.apply(this, arguments);
    }

    UArmor2x1.prototype.name = "Ultralight Armor";

    UArmor2x1.prototype.hp = 32;

    UArmor2x1.prototype.cost = 20;

    UArmor2x1.prototype.image = "UArmor2x1.png";

    UArmor2x1.prototype.size = [2, 1];

    UArmor2x1.prototype.mass = 2;

    return UArmor2x1;

  })(UArmor);

  parts.UArmor1x1Angle = (function(superClass) {
    extend(UArmor1x1Angle, superClass);

    function UArmor1x1Angle() {
      return UArmor1x1Angle.__super__.constructor.apply(this, arguments);
    }

    UArmor1x1Angle.prototype.name = "Ultralight Armor";

    UArmor1x1Angle.prototype.hp = 8;

    UArmor1x1Angle.prototype.cost = 5;

    UArmor1x1Angle.prototype.image = "UArmor1x1Angle.png";

    UArmor1x1Angle.prototype.size = [1, 1];

    UArmor1x1Angle.prototype.mass = .5;

    return UArmor1x1Angle;

  })(UArmor);

  parts.UArmor1x1AngleBack = (function(superClass) {
    extend(UArmor1x1AngleBack, superClass);

    function UArmor1x1AngleBack() {
      return UArmor1x1AngleBack.__super__.constructor.apply(this, arguments);
    }

    UArmor1x1AngleBack.prototype.hp = 8;

    UArmor1x1AngleBack.prototype.cost = 5;

    UArmor1x1AngleBack.prototype.image = "UArmor1x1AngleBack.png";

    UArmor1x1AngleBack.prototype.size = [1, 1];

    UArmor1x1AngleBack.prototype.mass = .5;

    return UArmor1x1AngleBack;

  })(UArmor);

  parts.UArmor2x2 = (function(superClass) {
    extend(UArmor2x2, superClass);

    function UArmor2x2() {
      return UArmor2x2.__super__.constructor.apply(this, arguments);
    }

    UArmor2x2.prototype.hp = 64;

    UArmor2x2.prototype.cost = 40;

    UArmor2x2.prototype.image = "UArmor2x2.png";

    UArmor2x2.prototype.size = [2, 2];

    UArmor2x2.prototype.mass = 4;

    return UArmor2x2;

  })(UArmor);

  parts.UArmor1x2Notch1 = (function(superClass) {
    extend(UArmor1x2Notch1, superClass);

    function UArmor1x2Notch1() {
      return UArmor1x2Notch1.__super__.constructor.apply(this, arguments);
    }

    UArmor1x2Notch1.prototype.hp = 32;

    UArmor1x2Notch1.prototype.cost = 20;

    UArmor1x2Notch1.prototype.image = "UArmor1x2Notch1.png";

    UArmor1x2Notch1.prototype.size = [1, 2];

    UArmor1x2Notch1.prototype.mass = 2;

    UArmor1x2Notch1.prototype.dlc = "Curves and Shadows";

    return UArmor1x2Notch1;

  })(UArmor);

  parts.UArmor1x2Notch2 = (function(superClass) {
    extend(UArmor1x2Notch2, superClass);

    function UArmor1x2Notch2() {
      return UArmor1x2Notch2.__super__.constructor.apply(this, arguments);
    }

    UArmor1x2Notch2.prototype.hp = 32;

    UArmor1x2Notch2.prototype.cost = 20;

    UArmor1x2Notch2.prototype.image = "UArmor1x2Notch2.png";

    UArmor1x2Notch2.prototype.size = [1, 2];

    UArmor1x2Notch2.prototype.mass = 2;

    UArmor1x2Notch2.prototype.dlc = "Curves and Shadows";

    return UArmor1x2Notch2;

  })(UArmor);

  parts.UArmor1x1Notch1 = (function(superClass) {
    extend(UArmor1x1Notch1, superClass);

    function UArmor1x1Notch1() {
      return UArmor1x1Notch1.__super__.constructor.apply(this, arguments);
    }

    UArmor1x1Notch1.prototype.hp = 16;

    UArmor1x1Notch1.prototype.cost = 10;

    UArmor1x1Notch1.prototype.image = "UArmor1x1Notch1.png";

    UArmor1x1Notch1.prototype.size = [1, 1];

    UArmor1x1Notch1.prototype.mass = 1;

    UArmor1x1Notch1.prototype.dlc = "Curves and Shadows";

    return UArmor1x1Notch1;

  })(UArmor);

  parts.UArmor1x1Notch2 = (function(superClass) {
    extend(UArmor1x1Notch2, superClass);

    function UArmor1x1Notch2() {
      return UArmor1x1Notch2.__super__.constructor.apply(this, arguments);
    }

    UArmor1x1Notch2.prototype.hp = 16;

    UArmor1x1Notch2.prototype.cost = 10;

    UArmor1x1Notch2.prototype.image = "UArmor1x1Notch2.png";

    UArmor1x1Notch2.prototype.size = [1, 1];

    UArmor1x1Notch2.prototype.mass = 1;

    UArmor1x1Notch2.prototype.dlc = "Curves and Shadows";

    return UArmor1x1Notch2;

  })(UArmor);

  parts.UArmor1x1Spike = (function(superClass) {
    extend(UArmor1x1Spike, superClass);

    function UArmor1x1Spike() {
      return UArmor1x1Spike.__super__.constructor.apply(this, arguments);
    }

    UArmor1x1Spike.prototype.hp = 8;

    UArmor1x1Spike.prototype.cost = 5;

    UArmor1x1Spike.prototype.image = "UArmor1x1Spike.png";

    UArmor1x1Spike.prototype.size = [1, 1];

    UArmor1x1Spike.prototype.mass = .5;

    UArmor1x1Spike.prototype.dlc = "Curves and Shadows";

    return UArmor1x1Spike;

  })(UArmor);

  VArmor = (function(superClass) {
    extend(VArmor, superClass);

    function VArmor() {
      return VArmor.__super__.constructor.apply(this, arguments);
    }

    VArmor.prototype.name = "Volumetric Armor";

    VArmor.prototype.desc = "Balanced in cost and weight, but takes up more space than other armours.";

    VArmor.prototype.tab = "armor2";

    VArmor.prototype.canShowDamage = true;

    VArmor.prototype.paintable = true;

    return VArmor;

  })(Part);

  parts.VArmor1x2SideBar = (function(superClass) {
    extend(VArmor1x2SideBar, superClass);

    function VArmor1x2SideBar() {
      return VArmor1x2SideBar.__super__.constructor.apply(this, arguments);
    }

    VArmor1x2SideBar.prototype.hp = 10;

    VArmor1x2SideBar.prototype.cost = 2;

    VArmor1x2SideBar.prototype.image = "VArmor1x2SideBar.png";

    VArmor1x2SideBar.prototype.size = [1, 2];

    VArmor1x2SideBar.prototype.mass = 3;

    return VArmor1x2SideBar;

  })(VArmor);

  parts.VArmor1x2SideBarFilled = (function(superClass) {
    extend(VArmor1x2SideBarFilled, superClass);

    function VArmor1x2SideBarFilled() {
      return VArmor1x2SideBarFilled.__super__.constructor.apply(this, arguments);
    }

    VArmor1x2SideBarFilled.prototype.hp = 10;

    VArmor1x2SideBarFilled.prototype.cost = 2;

    VArmor1x2SideBarFilled.prototype.image = "VArmor1x2SideBarFilled.png";

    VArmor1x2SideBarFilled.prototype.size = [1, 2];

    VArmor1x2SideBarFilled.prototype.mass = 3;

    return VArmor1x2SideBarFilled;

  })(VArmor);

  parts.VArmor1x2IBeam = (function(superClass) {
    extend(VArmor1x2IBeam, superClass);

    function VArmor1x2IBeam() {
      return VArmor1x2IBeam.__super__.constructor.apply(this, arguments);
    }

    VArmor1x2IBeam.prototype.hp = 10;

    VArmor1x2IBeam.prototype.cost = 2;

    VArmor1x2IBeam.prototype.image = "VArmor1x2IBeam.png";

    VArmor1x2IBeam.prototype.size = [1, 2];

    VArmor1x2IBeam.prototype.mass = 3;

    return VArmor1x2IBeam;

  })(VArmor);

  parts.VArmor1x2Corner4 = (function(superClass) {
    extend(VArmor1x2Corner4, superClass);

    function VArmor1x2Corner4() {
      return VArmor1x2Corner4.__super__.constructor.apply(this, arguments);
    }

    VArmor1x2Corner4.prototype.hp = 10;

    VArmor1x2Corner4.prototype.cost = 2;

    VArmor1x2Corner4.prototype.image = "VArmor1x2Corner4.png";

    VArmor1x2Corner4.prototype.size = [1, 2];

    VArmor1x2Corner4.prototype.mass = 3;

    return VArmor1x2Corner4;

  })(VArmor);

  parts.VArmor1x2End = (function(superClass) {
    extend(VArmor1x2End, superClass);

    function VArmor1x2End() {
      return VArmor1x2End.__super__.constructor.apply(this, arguments);
    }

    VArmor1x2End.prototype.hp = 10;

    VArmor1x2End.prototype.cost = 2;

    VArmor1x2End.prototype.image = "VArmor1x2End.png";

    VArmor1x2End.prototype.size = [1, 2];

    VArmor1x2End.prototype.mass = 3;

    return VArmor1x2End;

  })(VArmor);

  parts.VArmor1x1Corner1 = (function(superClass) {
    extend(VArmor1x1Corner1, superClass);

    function VArmor1x1Corner1() {
      return VArmor1x1Corner1.__super__.constructor.apply(this, arguments);
    }

    VArmor1x1Corner1.prototype.hp = 5;

    VArmor1x1Corner1.prototype.cost = 1;

    VArmor1x1Corner1.prototype.image = "VArmor1x1Corner1.png";

    VArmor1x1Corner1.prototype.size = [1, 1];

    VArmor1x1Corner1.prototype.mass = 1.5;

    return VArmor1x1Corner1;

  })(VArmor);

  parts.VArmor1x1Corner2 = (function(superClass) {
    extend(VArmor1x1Corner2, superClass);

    function VArmor1x1Corner2() {
      return VArmor1x1Corner2.__super__.constructor.apply(this, arguments);
    }

    VArmor1x1Corner2.prototype.hp = 5;

    VArmor1x1Corner2.prototype.cost = 1;

    VArmor1x1Corner2.prototype.image = "VArmor1x1Corner2.png";

    VArmor1x1Corner2.prototype.size = [1, 1];

    VArmor1x1Corner2.prototype.mass = 1.5;

    return VArmor1x1Corner2;

  })(VArmor);

  parts.VArmor1x1Corner3 = (function(superClass) {
    extend(VArmor1x1Corner3, superClass);

    function VArmor1x1Corner3() {
      return VArmor1x1Corner3.__super__.constructor.apply(this, arguments);
    }

    VArmor1x1Corner3.prototype.hp = 10;

    VArmor1x1Corner3.prototype.cost = 2;

    VArmor1x1Corner3.prototype.image = "VArmor1x1Corner3.png";

    VArmor1x1Corner3.prototype.size = [1, 2];

    VArmor1x1Corner3.prototype.mass = 3;

    return VArmor1x1Corner3;

  })(VArmor);

  parts.VArmor1x1Hook = (function(superClass) {
    extend(VArmor1x1Hook, superClass);

    function VArmor1x1Hook() {
      return VArmor1x1Hook.__super__.constructor.apply(this, arguments);
    }

    VArmor1x1Hook.prototype.hp = 10;

    VArmor1x1Hook.prototype.cost = 2;

    VArmor1x1Hook.prototype.image = "VArmor1x1Hook.png";

    VArmor1x1Hook.prototype.size = [1, 2];

    VArmor1x1Hook.prototype.mass = 3;

    return VArmor1x1Hook;

  })(VArmor);

  parts.VArmor1x1CornerBack = (function(superClass) {
    extend(VArmor1x1CornerBack, superClass);

    function VArmor1x1CornerBack() {
      return VArmor1x1CornerBack.__super__.constructor.apply(this, arguments);
    }

    VArmor1x1CornerBack.prototype.hp = 10;

    VArmor1x1CornerBack.prototype.cost = 2;

    VArmor1x1CornerBack.prototype.image = "VArmor1x1CornerBack.png";

    VArmor1x1CornerBack.prototype.size = [1, 2];

    VArmor1x1CornerBack.prototype.mass = 3;

    return VArmor1x1CornerBack;

  })(VArmor);

  parts.VArmor2x2 = (function(superClass) {
    extend(VArmor2x2, superClass);

    function VArmor2x2() {
      return VArmor2x2.__super__.constructor.apply(this, arguments);
    }

    VArmor2x2.prototype.hp = 20;

    VArmor2x2.prototype.cost = 4;

    VArmor2x2.prototype.image = "VArmor2x2.png";

    VArmor2x2.prototype.size = [2, 2];

    VArmor2x2.prototype.mass = 6;

    return VArmor2x2;

  })(VArmor);

  parts.VArmor1x2 = (function(superClass) {
    extend(VArmor1x2, superClass);

    function VArmor1x2() {
      return VArmor1x2.__super__.constructor.apply(this, arguments);
    }

    VArmor1x2.prototype.hp = 10;

    VArmor1x2.prototype.cost = 2;

    VArmor1x2.prototype.image = "VArmor1x2.png";

    VArmor1x2.prototype.size = [1, 2];

    VArmor1x2.prototype.mass = 3;

    return VArmor1x2;

  })(VArmor);

  parts.VArmor1x1 = (function(superClass) {
    extend(VArmor1x1, superClass);

    function VArmor1x1() {
      return VArmor1x1.__super__.constructor.apply(this, arguments);
    }

    VArmor1x1.prototype.hp = 5;

    VArmor1x1.prototype.cost = 1;

    VArmor1x1.prototype.image = "VArmor1x1.png";

    VArmor1x1.prototype.size = [1, 1];

    VArmor1x1.prototype.mass = 1.5;

    return VArmor1x1;

  })(VArmor);

  parts.VArmor1x1Angle = (function(superClass) {
    extend(VArmor1x1Angle, superClass);

    function VArmor1x1Angle() {
      return VArmor1x1Angle.__super__.constructor.apply(this, arguments);
    }

    VArmor1x1Angle.prototype.hp = 5;

    VArmor1x1Angle.prototype.cost = 1;

    VArmor1x1Angle.prototype.image = "VArmor1x1Angle.png";

    VArmor1x1Angle.prototype.size = [1, 1];

    VArmor1x1Angle.prototype.mass = 1.5;

    return VArmor1x1Angle;

  })(VArmor);

  parts.VArmor2x2Angle = (function(superClass) {
    extend(VArmor2x2Angle, superClass);

    function VArmor2x2Angle() {
      return VArmor2x2Angle.__super__.constructor.apply(this, arguments);
    }

    VArmor2x2Angle.prototype.hp = 20;

    VArmor2x2Angle.prototype.cost = 4;

    VArmor2x2Angle.prototype.image = "VArmor2x2Angle.png";

    VArmor2x2Angle.prototype.size = [2, 2];

    VArmor2x2Angle.prototype.mass = 6;

    return VArmor2x2Angle;

  })(VArmor);

  parts.VArmor2x2Curve = (function(superClass) {
    extend(VArmor2x2Curve, superClass);

    function VArmor2x2Curve() {
      return VArmor2x2Curve.__super__.constructor.apply(this, arguments);
    }

    VArmor2x2Curve.prototype.hp = 20;

    VArmor2x2Curve.prototype.cost = 4;

    VArmor2x2Curve.prototype.image = "VArmor2x2Curve.png";

    VArmor2x2Curve.prototype.size = [2, 2];

    VArmor2x2Curve.prototype.mass = 6;

    VArmor2x2Curve.prototype.dlc = "Curves and Shadows";

    return VArmor2x2Curve;

  })(VArmor);

  parts.VArmor1x1Curve = (function(superClass) {
    extend(VArmor1x1Curve, superClass);

    function VArmor1x1Curve() {
      return VArmor1x1Curve.__super__.constructor.apply(this, arguments);
    }

    VArmor1x1Curve.prototype.hp = 5;

    VArmor1x1Curve.prototype.cost = 1;

    VArmor1x1Curve.prototype.image = "VArmor1x1Curve.png";

    VArmor1x1Curve.prototype.size = [1, 1];

    VArmor1x1Curve.prototype.mass = 1.5;

    VArmor1x1Curve.prototype.dlc = "Curves and Shadows";

    return VArmor1x1Curve;

  })(VArmor);

  parts.VArmor2x1Curved = (function(superClass) {
    extend(VArmor2x1Curved, superClass);

    function VArmor2x1Curved() {
      return VArmor2x1Curved.__super__.constructor.apply(this, arguments);
    }

    VArmor2x1Curved.prototype.hp = 10;

    VArmor2x1Curved.prototype.cost = 2;

    VArmor2x1Curved.prototype.image = "VArmor2x1Curved.png";

    VArmor2x1Curved.prototype.size = [2, 1];

    VArmor2x1Curved.prototype.mass = 3;

    VArmor2x1Curved.prototype.dlc = "Curves and Shadows";

    return VArmor2x1Curved;

  })(VArmor);

  parts.VArmor1x2Curved = (function(superClass) {
    extend(VArmor1x2Curved, superClass);

    function VArmor1x2Curved() {
      return VArmor1x2Curved.__super__.constructor.apply(this, arguments);
    }

    VArmor1x2Curved.prototype.hp = 10;

    VArmor1x2Curved.prototype.cost = 2;

    VArmor1x2Curved.prototype.image = "VArmor1x2Curved.png";

    VArmor1x2Curved.prototype.size = [1, 2];

    VArmor1x2Curved.prototype.mass = 3;

    VArmor1x2Curved.prototype.dlc = "Curves and Shadows";

    return VArmor1x2Curved;

  })(VArmor);

  parts.VArmor2x2Curved = (function(superClass) {
    extend(VArmor2x2Curved, superClass);

    function VArmor2x2Curved() {
      return VArmor2x2Curved.__super__.constructor.apply(this, arguments);
    }

    VArmor2x2Curved.prototype.hp = 20;

    VArmor2x2Curved.prototype.cost = 4;

    VArmor2x2Curved.prototype.image = "VArmor2x2Curved.png";

    VArmor2x2Curved.prototype.size = [2, 2];

    VArmor2x2Curved.prototype.mass = 6;

    VArmor2x2Curved.prototype.dlc = "Curves and Shadows";

    return VArmor2x2Curved;

  })(VArmor);

  VShadowArmor = (function(superClass) {
    extend(VShadowArmor, superClass);

    function VShadowArmor() {
      return VShadowArmor.__super__.constructor.apply(this, arguments);
    }

    VShadowArmor.prototype.name = "Volumetric Shadow Armor";

    VShadowArmor.prototype.dlc = "Curves and Shadows";

    VShadowArmor.prototype.northWest = true;

    VShadowArmor.prototype.canShowDamage = false;

    return VShadowArmor;

  })(VArmor);

  parts.VShadowNArmor2x2Angle = (function(superClass) {
    extend(VShadowNArmor2x2Angle, superClass);

    function VShadowNArmor2x2Angle() {
      return VShadowNArmor2x2Angle.__super__.constructor.apply(this, arguments);
    }

    VShadowNArmor2x2Angle.prototype.hp = 20;

    VShadowNArmor2x2Angle.prototype.mass = 6;

    VShadowNArmor2x2Angle.prototype.cost = 4;

    VShadowNArmor2x2Angle.prototype.image = "VShadowNArmor2x2Angle.png";

    VShadowNArmor2x2Angle.prototype.size = [2, 2];

    return VShadowNArmor2x2Angle;

  })(VShadowArmor);

  parts.VShadowNArmor2x2 = (function(superClass) {
    extend(VShadowNArmor2x2, superClass);

    function VShadowNArmor2x2() {
      return VShadowNArmor2x2.__super__.constructor.apply(this, arguments);
    }

    VShadowNArmor2x2.prototype.hp = 20;

    VShadowNArmor2x2.prototype.mass = 6;

    VShadowNArmor2x2.prototype.cost = 4;

    VShadowNArmor2x2.prototype.image = "VShadowNArmor2x2.png";

    VShadowNArmor2x2.prototype.size = [2, 2];

    return VShadowNArmor2x2;

  })(VShadowArmor);

  parts.VShadowNArmor2x1 = (function(superClass) {
    extend(VShadowNArmor2x1, superClass);

    function VShadowNArmor2x1() {
      return VShadowNArmor2x1.__super__.constructor.apply(this, arguments);
    }

    VShadowNArmor2x1.prototype.hp = 10;

    VShadowNArmor2x1.prototype.mass = 3;

    VShadowNArmor2x1.prototype.cost = 2;

    VShadowNArmor2x1.prototype.image = "VShadowNArmor2x1.png";

    VShadowNArmor2x1.prototype.size = [2, 1];

    return VShadowNArmor2x1;

  })(VShadowArmor);

  parts.VShadowNArmor1x1 = (function(superClass) {
    extend(VShadowNArmor1x1, superClass);

    function VShadowNArmor1x1() {
      return VShadowNArmor1x1.__super__.constructor.apply(this, arguments);
    }

    VShadowNArmor1x1.prototype.hp = 5;

    VShadowNArmor1x1.prototype.mass = 1.5;

    VShadowNArmor1x1.prototype.cost = 1;

    VShadowNArmor1x1.prototype.image = "VShadowNArmor1x1.png";

    VShadowNArmor1x1.prototype.size = [1, 1];

    return VShadowNArmor1x1;

  })(VShadowArmor);

  parts.VShadowNArmor1x2 = (function(superClass) {
    extend(VShadowNArmor1x2, superClass);

    function VShadowNArmor1x2() {
      return VShadowNArmor1x2.__super__.constructor.apply(this, arguments);
    }

    VShadowNArmor1x2.prototype.hp = 10;

    VShadowNArmor1x2.prototype.mass = 3;

    VShadowNArmor1x2.prototype.cost = 2;

    VShadowNArmor1x2.prototype.image = "VShadowNArmor1x2.png";

    VShadowNArmor1x2.prototype.size = [1, 2];

    return VShadowNArmor1x2;

  })(VShadowArmor);

  parts.VShadowNArmor2x2Curve = (function(superClass) {
    extend(VShadowNArmor2x2Curve, superClass);

    function VShadowNArmor2x2Curve() {
      return VShadowNArmor2x2Curve.__super__.constructor.apply(this, arguments);
    }

    VShadowNArmor2x2Curve.prototype.hp = 20;

    VShadowNArmor2x2Curve.prototype.mass = 6;

    VShadowNArmor2x2Curve.prototype.cost = 4;

    VShadowNArmor2x2Curve.prototype.image = "VShadowNArmor2x2Curve.png";

    VShadowNArmor2x2Curve.prototype.size = [2, 2];

    return VShadowNArmor2x2Curve;

  })(VShadowArmor);

  parts.VShadowNArmor1x1Angle = (function(superClass) {
    extend(VShadowNArmor1x1Angle, superClass);

    function VShadowNArmor1x1Angle() {
      return VShadowNArmor1x1Angle.__super__.constructor.apply(this, arguments);
    }

    VShadowNArmor1x1Angle.prototype.hp = 5;

    VShadowNArmor1x1Angle.prototype.mass = 1.5;

    VShadowNArmor1x1Angle.prototype.cost = 1;

    VShadowNArmor1x1Angle.prototype.image = "VShadowNArmor1x1Angle.png";

    VShadowNArmor1x1Angle.prototype.size = [1, 1];

    return VShadowNArmor1x1Angle;

  })(VShadowArmor);

  parts.VShadowNArmor1x1Corner = (function(superClass) {
    extend(VShadowNArmor1x1Corner, superClass);

    function VShadowNArmor1x1Corner() {
      return VShadowNArmor1x1Corner.__super__.constructor.apply(this, arguments);
    }

    VShadowNArmor1x1Corner.prototype.hp = 5;

    VShadowNArmor1x1Corner.prototype.mass = 1.5;

    VShadowNArmor1x1Corner.prototype.cost = 1;

    VShadowNArmor1x1Corner.prototype.image = "VShadowNArmor1x1Corner.png";

    VShadowNArmor1x1Corner.prototype.size = [1, 1];

    return VShadowNArmor1x1Corner;

  })(VShadowArmor);

  parts.VShadowNArmor1x1CornerInner = (function(superClass) {
    extend(VShadowNArmor1x1CornerInner, superClass);

    function VShadowNArmor1x1CornerInner() {
      return VShadowNArmor1x1CornerInner.__super__.constructor.apply(this, arguments);
    }

    VShadowNArmor1x1CornerInner.prototype.hp = 5;

    VShadowNArmor1x1CornerInner.prototype.mass = 1.5;

    VShadowNArmor1x1CornerInner.prototype.cost = 1;

    VShadowNArmor1x1CornerInner.prototype.image = "VShadowNArmor1x1CornerInner.png";

    VShadowNArmor1x1CornerInner.prototype.size = [1, 1];

    return VShadowNArmor1x1CornerInner;

  })(VShadowArmor);

  parts.Reactor2x2 = (function(superClass) {
    extend(Reactor2x2, superClass);

    function Reactor2x2() {
      return Reactor2x2.__super__.constructor.apply(this, arguments);
    }

    Reactor2x2.prototype.name = "2x2 Reactor";

    Reactor2x2.prototype.desc = "Use this to power your ship. Reactors are heavy and expensive.";

    Reactor2x2.prototype.hp = 60;

    Reactor2x2.prototype.cost = 100;

    Reactor2x2.prototype.mass = 100;

    Reactor2x2.prototype.genEnergy = 62.5;

    Reactor2x2.prototype.storeEnergy = 8000;

    Reactor2x2.prototype.image = "Reactor2x2.png";

    Reactor2x2.prototype.attach = true;

    Reactor2x2.prototype.size = [2, 2];

    Reactor2x2.prototype.tab = "energy";

    return Reactor2x2;

  })(Part);

  parts.Reactor1x2 = (function(superClass) {
    extend(Reactor1x2, superClass);

    function Reactor1x2() {
      return Reactor1x2.__super__.constructor.apply(this, arguments);
    }

    Reactor1x2.prototype.name = "1x2 Reactor";

    Reactor1x2.prototype.hp = 30;

    Reactor1x2.prototype.cost = 50;

    Reactor1x2.prototype.mass = 50;

    Reactor1x2.prototype.genEnergy = 15.5;

    Reactor1x2.prototype.storeEnergy = 20000;

    Reactor1x2.prototype.image = "Reactor1x2.png";

    Reactor1x2.prototype.size = [1, 2];

    return Reactor1x2;

  })(parts.Reactor2x2);

  parts.Reactor2x1 = (function(superClass) {
    extend(Reactor2x1, superClass);

    function Reactor2x1() {
      return Reactor2x1.__super__.constructor.apply(this, arguments);
    }

    Reactor2x1.prototype.name = "2x1 Reactor";

    Reactor2x1.prototype.hp = 30;

    Reactor2x1.prototype.cost = 50;

    Reactor2x1.prototype.mass = 50;

    Reactor2x1.prototype.genEnergy = 15.5;

    Reactor2x1.prototype.storeEnergy = 20000;

    Reactor2x1.prototype.image = "Reactor2x1.png";

    Reactor2x1.prototype.size = [2, 1];

    return Reactor2x1;

  })(parts.Reactor2x2);

  parts.Reactor1x1 = (function(superClass) {
    extend(Reactor1x1, superClass);

    function Reactor1x1() {
      return Reactor1x1.__super__.constructor.apply(this, arguments);
    }

    Reactor1x1.prototype.name = "1x1 Reactor";

    Reactor1x1.prototype.hp = 15;

    Reactor1x1.prototype.cost = 25;

    Reactor1x1.prototype.mass = 10;

    Reactor1x1.prototype.genEnergy = 10;

    Reactor1x1.prototype.storeEnergy = 2000;

    Reactor1x1.prototype.image = "Reactor1x1.png";

    Reactor1x1.prototype.size = [1, 1];

    return Reactor1x1;

  })(parts.Reactor2x2);

  parts.Solar1x1 = (function(superClass) {
    extend(Solar1x1, superClass);

    function Solar1x1() {
      return Solar1x1.__super__.constructor.apply(this, arguments);
    }

    Solar1x1.prototype.name = "1x1 Solar Panel";

    Solar1x1.prototype.desc = "Use this to power your ship. Solar panels are light but don't generate much energy.";

    Solar1x1.prototype.hp = 0;

    Solar1x1.prototype.cost = 4;

    Solar1x1.prototype.mass = 2.5;

    Solar1x1.prototype.genEnergy = 3;

    Solar1x1.prototype.storeEnergy = 0;

    Solar1x1.prototype.flip = false;

    Solar1x1.prototype.image = "solar1x1.png";

    Solar1x1.prototype.size = [1, 1];

    return Solar1x1;

  })(parts.Reactor2x2);

  parts.Solar2x2 = (function(superClass) {
    extend(Solar2x2, superClass);

    function Solar2x2() {
      return Solar2x2.__super__.constructor.apply(this, arguments);
    }

    Solar2x2.prototype.name = "2x2 Solar Panel";

    Solar2x2.prototype.hp = 0;

    Solar2x2.prototype.cost = 16;

    Solar2x2.prototype.mass = 10;

    Solar2x2.prototype.genEnergy = 12;

    Solar2x2.prototype.storeEnergy = 0;

    Solar2x2.prototype.flip = false;

    Solar2x2.prototype.image = "solar2x2.png";

    Solar2x2.prototype.size = [2, 2];

    return Solar2x2;

  })(parts.Solar1x1);

  parts.Solar3x3 = (function(superClass) {
    extend(Solar3x3, superClass);

    function Solar3x3() {
      return Solar3x3.__super__.constructor.apply(this, arguments);
    }

    Solar3x3.prototype.name = "3x3 Solar Panel";

    Solar3x3.prototype.hp = 0;

    Solar3x3.prototype.cost = 36;

    Solar3x3.prototype.mass = 22.5;

    Solar3x3.prototype.genEnergy = 3 * 9;

    Solar3x3.prototype.storeEnergy = 0;

    Solar3x3.prototype.flip = false;

    Solar3x3.prototype.image = "solar3x3.png";

    Solar3x3.prototype.size = [3, 3];

    return Solar3x3;

  })(parts.Solar1x1);

  parts.EnergyTransfer = (function(superClass) {
    extend(EnergyTransfer, superClass);

    function EnergyTransfer() {
      return EnergyTransfer.__super__.constructor.apply(this, arguments);
    }

    EnergyTransfer.prototype.name = "Energy Transfer";

    EnergyTransfer.prototype.desc = "Gives energy to units in 800m range. Gives 960e per ship.";

    EnergyTransfer.prototype.hp = 10;

    EnergyTransfer.prototype.cost = 30;

    EnergyTransfer.prototype.mass = 30;

    EnergyTransfer.prototype.image = "EnergyTransfer.png";

    EnergyTransfer.prototype.attach = true;

    EnergyTransfer.prototype.size = [2, 2];

    EnergyTransfer.prototype.tab = "energy";

    EnergyTransfer.prototype.range = 800;

    EnergyTransfer.prototype.trasferEnergy = 60;

    EnergyTransfer.prototype.init = function() {
      return this.unit.energyCaster = true;
    };

    EnergyTransfer.prototype.tick = function() {
      var amount, distance, giveTo, i, j, len, len1, ref, ref1, results, thing;
      if ((sim.step + this.unit.id) % 16 === 0 && this.unit.energy > 100) {
        this.working = false;
        giveTo = [];
        ref = this.unit.closestFriends();
        for (i = 0, len = ref.length; i < len; i++) {
          thing = ref[i];
          if (thing.energy < thing.storeEnergy && thing.energy > -1) {
            if (thing.energyCaster && thing.energy / thing.storeEnergy > this.unit.energy / this.unit.storeEnergy) {
              continue;
            }
            distance = v2.distance(this.unit.pos, thing.pos);
            if (distance < this.range) {
              giveTo.push(thing);
            }
          }
        }
        ref1 = shuffle(giveTo);
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          thing = ref1[j];
          amount = thing.storeEnergy - thing.energy;
          if (amount > this.trasferEnergy * 16) {
            amount = this.trasferEnergy * 16;
          }
          if (amount > this.unit.energy) {
            amount = this.unit.energy;
          }
          thing.energy += amount;
          this.unit.energy -= amount;
          results.push(this.working = true);
        }
        return results;
      }
    };

    EnergyTransfer.prototype.draw = function() {
      var r;
      EnergyTransfer.__super__.draw.call(this);
      if (this.working) {
        r = (this.range + 40) / 255;
        return baseAtlas.drawSprite("img/point02.png", this.unit.pos, [r, r], 0, [255, 255, 255, 10]);
      }
    };

    return EnergyTransfer;

  })(Part);

  parts.StasisField = (function(superClass) {
    extend(StasisField, superClass);

    function StasisField() {
      return StasisField.__super__.constructor.apply(this, arguments);
    }

    StasisField.prototype.name = "Stasis Field";

    StasisField.prototype.desc = "Slows and decloaks enemy ships. Drains 2% user's cloak/second.";

    StasisField.prototype.hp = 30;

    StasisField.prototype.cost = 25;

    StasisField.prototype.mass = 6;

    StasisField.prototype.image = "StasisField.png";

    StasisField.prototype.attach = true;

    StasisField.prototype.size = [2, 2];

    StasisField.prototype.tab = "defence";

    StasisField.prototype.range = 290;

    StasisField.prototype.maxSlow = 2.5;

    StasisField.prototype.slow = 2.5;

    StasisField.prototype.working = false;

    StasisField.prototype.tick = function() {
      var distance, i, len, other, ref, results, speed;
      this.working = false;
      this.stasisPos = [this.worldPos[0] + (Math.sin(this.unit.rot) * 100), this.worldPos[1] - (Math.cos(this.unit.rot) * 100)];
      if (this.unit.cloak > 0) {
        this.unit.cloak = this.unit.cloak * 0.99875;
      }
      ref = this.unit.closestEnemies();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        other = ref[i];
        if (other.slowed === true) {
          continue;
        }
        distance = v2.distance(this.stasisPos, other.pos);
        if (distance < other.radius + this.range) {
          other.jump -= 30;
          if (other.jump < 0) {
            other.jump = 0;
          }
          other.cloak -= 20;
          if (other.cloak < 0) {
            other.cloak = 0;
          }
          this.unit.cloak = 0;
          speed = v2.mag(other.vel);
          if (speed > this.maxSlow) {
            v2.scale(other.vel, 0.85);
          }
          this.working = true;
          results.push(other.slowed = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    StasisField.prototype.draw = function() {
      var a, r;
      StasisField.__super__.draw.call(this);
      if (this.working) {
        a = 100;
      } else {
        a = 25;
      }
      r = (this.range + 40) / 255;
      return baseAtlas.drawSprite("img/point02.png", [this.worldPos[0] + (Math.sin(this.unit.rot) * 100), this.worldPos[1] - (Math.cos(this.unit.rot) * 100)], [r, r], 0, [0, 0, 0, a]);
    };

    return StasisField;

  })(Part);

  parts.SupercapitalBridge = (function(superClass) {
    extend(SupercapitalBridge, superClass);

    function SupercapitalBridge() {
      return SupercapitalBridge.__super__.constructor.apply(this, arguments);
    }

    SupercapitalBridge.prototype.name = "Supercapital Bridge";

    SupercapitalBridge.prototype.desc = "Extends a ships cost limit by $500.";

    SupercapitalBridge.prototype.hp = 100;

    SupercapitalBridge.prototype.cost = 100;

    SupercapitalBridge.prototype.mass = 500;

    SupercapitalBridge.prototype.image = "pad4x4.png";

    SupercapitalBridge.prototype.attach = true;

    SupercapitalBridge.prototype.size = [4, 4];

    SupercapitalBridge.prototype.tab = "defence";

    SupercapitalBridge.prototype.limitBonus = 500;

    SupercapitalBridge.prototype.hide = true;

    SupercapitalBridge.prototype.disable = true;

    return SupercapitalBridge;

  })(Part);

  parts.ShieldGen2x2 = (function(superClass) {
    extend(ShieldGen2x2, superClass);

    function ShieldGen2x2() {
      return ShieldGen2x2.__super__.constructor.apply(this, arguments);
    }

    ShieldGen2x2.prototype.name = "Heavy Shield Generator";

    ShieldGen2x2.prototype.desc = "A powerful shield generator that guzzles energy.";

    ShieldGen2x2.prototype.hp = 0;

    ShieldGen2x2.prototype.cost = 50;

    ShieldGen2x2.prototype.mass = 40;

    ShieldGen2x2.prototype.genShield = 1;

    ShieldGen2x2.prototype.useEnergy = 110;

    ShieldGen2x2.prototype.energyLine = .50;

    ShieldGen2x2.prototype.shield = 25;

    ShieldGen2x2.prototype.image = "Shield2x2.png";

    ShieldGen2x2.prototype.attach = true;

    ShieldGen2x2.prototype.size = [2, 2];

    ShieldGen2x2.prototype.tab = "defence";

    ShieldGen2x2.prototype.tick = function() {
      if (this.unit.energy > this.useEnergy && this.unit.energy > this.unit.storeEnergy * this.energyLine) {
        this.unit.energy -= this.useEnergy * Math.max(0, Math.min(1, (this.unit.maxShield - this.unit.shield) / this.genShield));
        return this.unit.shield += this.genShield;
      }
    };

    return ShieldGen2x2;

  })(Part);

  parts.ShieldGen2x1 = (function(superClass) {
    extend(ShieldGen2x1, superClass);

    function ShieldGen2x1() {
      return ShieldGen2x1.__super__.constructor.apply(this, arguments);
    }

    ShieldGen2x1.prototype.name = "Advanced Shield Generator";

    ShieldGen2x1.prototype.desc = "An efficient, light-weight shield generator.";

    ShieldGen2x1.prototype.hp = 0;

    ShieldGen2x1.prototype.cost = 30;

    ShieldGen2x1.prototype.mass = 1;

    ShieldGen2x1.prototype.genShield = 0.1;

    ShieldGen2x1.prototype.useEnergy = 9;

    ShieldGen2x1.prototype.energyLine = .4;

    ShieldGen2x1.prototype.shield = 20;

    ShieldGen2x1.prototype.image = "Shield2x1.png";

    ShieldGen2x1.prototype.size = [2, 1];

    return ShieldGen2x1;

  })(parts.ShieldGen2x2);

  parts.ShieldGen1x1 = (function(superClass) {
    extend(ShieldGen1x1, superClass);

    function ShieldGen1x1() {
      return ShieldGen1x1.__super__.constructor.apply(this, arguments);
    }

    ShieldGen1x1.prototype.name = "Shield Capacitor";

    ShieldGen1x1.prototype.desc = "Allows stronger shields with limited regeneration assistance.";

    ShieldGen1x1.prototype.hp = 5;

    ShieldGen1x1.prototype.cost = 10;

    ShieldGen1x1.prototype.mass = 5;

    ShieldGen1x1.prototype.genShield = 0.075;

    ShieldGen1x1.prototype.useEnergy = 1;

    ShieldGen1x1.prototype.energyLine = .99;

    ShieldGen1x1.prototype.shield = 8;

    ShieldGen1x1.prototype.image = "Shield1x1.png";

    ShieldGen1x1.prototype.size = [1, 1];

    return ShieldGen1x1;

  })(parts.ShieldGen2x2);

  parts.CloakGenerator = (function(superClass) {
    extend(CloakGenerator, superClass);

    function CloakGenerator() {
      return CloakGenerator.__super__.constructor.apply(this, arguments);
    }

    CloakGenerator.prototype.name = "Cloak Generator";

    CloakGenerator.prototype.desc = "Cloaks 66T/second while stationary. Keeps 165T cloaked while moving.";

    CloakGenerator.prototype.cost = 25;

    CloakGenerator.prototype.mass = 10;

    CloakGenerator.prototype.hp = 5;

    CloakGenerator.prototype.image = "CloakGenerator.png";

    CloakGenerator.prototype.tab = "defence";

    CloakGenerator.prototype.attach = true;

    CloakGenerator.prototype.size = [2, 2];

    CloakGenerator.prototype.genCloak = 33 / 16;

    CloakGenerator.prototype.useEnergy = 380 / 16;

    CloakGenerator.prototype.tick = function() {
      if (this.unit.energy > this.useEnergy && this.unit.cloak < this.unit.mass) {
        if (this.unit.cloak > this.unit.mass / 2) {
          this.unit.energy -= this.useEnergy;
        }
        this.unit.cloak += this.genCloak;
        if (this.unit.cloak > this.unit.mass) {
          return this.unit.cloak = this.unit.mass;
        }
      }
    };

    return CloakGenerator;

  })(Part);

  Battery = (function(superClass) {
    extend(Battery, superClass);

    function Battery() {
      return Battery.__super__.constructor.apply(this, arguments);
    }

    Battery.prototype.name = "Battery";

    Battery.prototype.desc = "Batteries store energy and come with a full charge to power your ship.";

    Battery.prototype.tab = "energy";

    Battery.prototype.paintable = true;

    return Battery;

  })(Part);

  parts.Battery1x2 = (function(superClass) {
    extend(Battery1x2, superClass);

    function Battery1x2() {
      return Battery1x2.__super__.constructor.apply(this, arguments);
    }

    Battery1x2.prototype.hp = 10;

    Battery1x2.prototype.cost = 20;

    Battery1x2.prototype.mass = 20;

    Battery1x2.prototype.storeEnergy = 16000;

    Battery1x2.prototype.image = "Battery1x2.png";

    Battery1x2.prototype.attach = true;

    Battery1x2.prototype.size = [1, 2];

    return Battery1x2;

  })(Battery);

  parts.Battery1x1 = (function(superClass) {
    extend(Battery1x1, superClass);

    function Battery1x1() {
      return Battery1x1.__super__.constructor.apply(this, arguments);
    }

    Battery1x1.prototype.name = "Battery";

    Battery1x1.prototype.hp = 5;

    Battery1x1.prototype.cost = 10;

    Battery1x1.prototype.mass = 10;

    Battery1x1.prototype.storeEnergy = 8000;

    Battery1x1.prototype.image = "Battery1x1.png";

    Battery1x1.prototype.size = [1, 1];

    return Battery1x1;

  })(Battery);

  parts.Battery2x1 = (function(superClass) {
    extend(Battery2x1, superClass);

    function Battery2x1() {
      return Battery2x1.__super__.constructor.apply(this, arguments);
    }

    Battery2x1.prototype.name = "Battery";

    Battery2x1.prototype.hp = 10;

    Battery2x1.prototype.cost = 20;

    Battery2x1.prototype.mass = 20;

    Battery2x1.prototype.storeEnergy = 16000;

    Battery2x1.prototype.image = "Battery2x1.png";

    Battery2x1.prototype.size = [2, 1];

    return Battery2x1;

  })(Battery);

  parts.Battery2x2 = (function(superClass) {
    extend(Battery2x2, superClass);

    function Battery2x2() {
      return Battery2x2.__super__.constructor.apply(this, arguments);
    }

    Battery2x2.prototype.name = "Battery";

    Battery2x2.prototype.hp = 20;

    Battery2x2.prototype.cost = 40;

    Battery2x2.prototype.mass = 40;

    Battery2x2.prototype.storeEnergy = 32000;

    Battery2x2.prototype.image = "Battery2x2.png";

    Battery2x2.prototype.size = [2, 2];

    return Battery2x2;

  })(Battery);

  parts.Engine05 = (function(superClass) {
    extend(Engine05, superClass);

    function Engine05() {
      return Engine05.__super__.constructor.apply(this, arguments);
    }

    Engine05.prototype.name = "Battleship Thruster";

    Engine05.prototype.desc = "An ultra-heavy thruster to provide a minimum speed for the heaviest ships.";

    Engine05.prototype.trailTime = 6;

    Engine05.prototype.trailSize = .4;

    Engine05.prototype.hp = 0;

    Engine05.prototype.cost = 80;

    Engine05.prototype.mass = 700;

    Engine05.prototype.thrust = 1000;

    Engine05.prototype.turnSpeed = 1;

    Engine05.prototype.image = "engine05.png";

    Engine05.prototype.size = [2, 2];

    Engine05.prototype.useEnergy = 30;

    Engine05.prototype.exhaust = true;

    Engine05.prototype.attach = true;

    Engine05.prototype.disable = true;

    Engine05.prototype.stripe = true;

    Engine05.prototype.tab = "engines";

    return Engine05;

  })(Engine);

  parts.Engine09 = (function(superClass) {
    extend(Engine09, superClass);

    function Engine09() {
      return Engine09.__super__.constructor.apply(this, arguments);
    }

    Engine09.prototype.name = "Large Bulk Thruster";

    Engine09.prototype.desc = "Low energy thruster for high mass. Rated for 0-150 m/s ";

    Engine09.prototype.trailTime = 6;

    Engine09.prototype.trailSize = .2;

    Engine09.prototype.hp = 0;

    Engine09.prototype.cost = 47;

    Engine09.prototype.mass = 135;

    Engine09.prototype.thrust = 271;

    Engine09.prototype.turnSpeed = 1;

    Engine09.prototype.image = "engine09.png";

    Engine09.prototype.size = [2, 2];

    Engine09.prototype.useEnergy = 4;

    Engine09.prototype.exhaust = true;

    Engine09.prototype.attach = true;

    Engine09.prototype.stripe = true;

    Engine09.prototype.tab = "engines";

    return Engine09;

  })(Engine);

  parts.Engine02 = (function(superClass) {
    extend(Engine02, superClass);

    function Engine02() {
      return Engine02.__super__.constructor.apply(this, arguments);
    }

    Engine02.prototype.name = "Bulk Thruster";

    Engine02.prototype.desc = "Low energy thruster for high mass. Rated for 0-125 m/s ";

    Engine02.prototype.trailTime = 6;

    Engine02.prototype.trailSize = .2;

    Engine02.prototype.hp = 0;

    Engine02.prototype.cost = 35;

    Engine02.prototype.mass = 100;

    Engine02.prototype.thrust = 200;

    Engine02.prototype.turnSpeed = 1;

    Engine02.prototype.image = "engine02.png";

    Engine02.prototype.size = [1, 3];

    Engine02.prototype.useEnergy = 3;

    Engine02.prototype.exhaust = true;

    Engine02.prototype.attach = true;

    Engine02.prototype.stripe = true;

    Engine02.prototype.tab = "engines";

    return Engine02;

  })(Engine);

  parts.Engine01 = (function(superClass) {
    extend(Engine01, superClass);

    function Engine01() {
      return Engine01.__super__.constructor.apply(this, arguments);
    }

    Engine01.prototype.name = "Cruiser Thruster";

    Engine01.prototype.desc = "Efficient thruster for medium ships. Rated for 100-350 m/s";

    Engine01.prototype.trailTime = 6;

    Engine01.prototype.trailSize = .26;

    Engine01.prototype.hp = 0;

    Engine01.prototype.cost = 65;

    Engine01.prototype.mass = 60;

    Engine01.prototype.thrust = 270;

    Engine01.prototype.turnSpeed = 4;

    Engine01.prototype.image = "engine01.png";

    Engine01.prototype.size = [1, 3];

    Engine01.prototype.useEnergy = 13;

    Engine01.prototype.exhaust = true;

    Engine01.prototype.attach = true;

    Engine01.prototype.stripe = true;

    Engine01.prototype.tab = "engines";

    return Engine01;

  })(Engine);

  parts.Engine08 = (function(superClass) {
    extend(Engine08, superClass);

    function Engine08() {
      return Engine08.__super__.constructor.apply(this, arguments);
    }

    Engine08.prototype.name = "Compact Cruiser Thruster";

    Engine08.prototype.desc = "Efficient thruster for medium ships. Rated for 100-350 m/s";

    Engine08.prototype.trailTime = 6;

    Engine08.prototype.trailSize = .26;

    Engine08.prototype.hp = 0;

    Engine08.prototype.cost = 44;

    Engine08.prototype.mass = 40;

    Engine08.prototype.thrust = 180;

    Engine08.prototype.turnSpeed = 4;

    Engine08.prototype.image = "engine08.png";

    Engine08.prototype.size = [2, 1];

    Engine08.prototype.useEnergy = 9;

    Engine08.prototype.exhaust = true;

    Engine08.prototype.attach = true;

    Engine08.prototype.stripe = true;

    Engine08.prototype.tab = "engines";

    return Engine08;

  })(Engine);

  parts.Engine04 = (function(superClass) {
    extend(Engine04, superClass);

    function Engine04() {
      return Engine04.__super__.constructor.apply(this, arguments);
    }

    Engine04.prototype.name = "Scout Thruster";

    Engine04.prototype.desc = "The smallest thruster available. Rated for 100-400 m/s";

    Engine04.prototype.trailTime = 64;

    Engine04.prototype.trailSize = .1;

    Engine04.prototype.hp = 0;

    Engine04.prototype.cost = 20;

    Engine04.prototype.mass = 15;

    Engine04.prototype.thrust = 90;

    Engine04.prototype.turnSpeed = 1;

    Engine04.prototype.image = "engine04.png";

    Engine04.prototype.size = [1, 2];

    Engine04.prototype.useEnergy = 10;

    Engine04.prototype.exhaust = true;

    Engine04.prototype.attach = true;

    Engine04.prototype.stripe = true;

    Engine04.prototype.tab = "engines";

    return Engine04;

  })(Engine);

  parts.Engine043Long = (function(superClass) {
    extend(Engine043Long, superClass);

    function Engine043Long() {
      return Engine043Long.__super__.constructor.apply(this, arguments);
    }

    Engine043Long.prototype.size = [2, 1];

    Engine043Long.prototype.image = "engine04long.png";

    return Engine043Long;

  })(parts.Engine04);

  parts.Engine06 = (function(superClass) {
    extend(Engine06, superClass);

    function Engine06() {
      return Engine06.__super__.constructor.apply(this, arguments);
    }

    Engine06.prototype.hp = 0;

    Engine06.prototype.cost = 55;

    Engine06.prototype.mass = 60;

    Engine06.prototype.thrust = 157;

    Engine06.prototype.turnSpeed = 3;

    Engine06.prototype.image = "engine06.png";

    Engine06.prototype.size = [2, 2];

    Engine06.prototype.useEnergy = 25;

    Engine06.prototype.exhaust = true;

    Engine06.prototype.attach = true;

    Engine06.prototype.hide = true;

    Engine06.prototype.disable = true;

    Engine06.prototype.stripe = true;

    Engine06.prototype.tab = "engines";

    return Engine06;

  })(Engine);

  parts.Engine03 = (function(superClass) {
    extend(Engine03, superClass);

    function Engine03() {
      return Engine03.__super__.constructor.apply(this, arguments);
    }

    Engine03.prototype.name = "Fighter Thruster";

    Engine03.prototype.desc = "A light thruster good for fast ships. Rated for 250+ m/s";

    Engine03.prototype.trailTime = 64;

    Engine03.prototype.trailSize = .13;

    Engine03.prototype.hp = 0;

    Engine03.prototype.cost = 45;

    Engine03.prototype.mass = 15;

    Engine03.prototype.thrust = 135;

    Engine03.prototype.turnSpeed = 1;

    Engine03.prototype.image = "engine03.png";

    Engine03.prototype.size = [1, 2];

    Engine03.prototype.useEnergy = 12;

    Engine03.prototype.exhaust = true;

    Engine03.prototype.attach = true;

    Engine03.prototype.stripe = true;

    Engine03.prototype.tab = "engines";

    return Engine03;

  })(Engine);

  parts.Engine03Long = (function(superClass) {
    extend(Engine03Long, superClass);

    function Engine03Long() {
      return Engine03Long.__super__.constructor.apply(this, arguments);
    }

    Engine03Long.prototype.size = [2, 1];

    Engine03Long.prototype.image = "engine03long.png";

    return Engine03Long;

  })(parts.Engine03);

  parts.Engine07 = (function(superClass) {
    extend(Engine07, superClass);

    function Engine07() {
      return Engine07.__super__.constructor.apply(this, arguments);
    }

    Engine07.prototype.name = "Interceptor Afterburner";

    Engine07.prototype.desc = "A huge inefficient thruster. Burns a lot of energy to make ships move very fast. ";

    Engine07.prototype.trailTime = 64;

    Engine07.prototype.hp = 0;

    Engine07.prototype.cost = 145;

    Engine07.prototype.mass = 80;

    Engine07.prototype.thrust = 900;

    Engine07.prototype.turnSpeed = 4;

    Engine07.prototype.image = "engine07.png";

    Engine07.prototype.size = [2, 2];

    Engine07.prototype.trailSize = .22;

    Engine07.prototype.useEnergy = 169;

    Engine07.prototype.exhaust = true;

    Engine07.prototype.attach = true;

    Engine07.prototype.stripe = true;

    Engine07.prototype.tab = "engines";

    return Engine07;

  })(Engine);

  parts.JumpEngine = (function(superClass) {
    extend(JumpEngine, superClass);

    function JumpEngine() {
      return JumpEngine.__super__.constructor.apply(this, arguments);
    }

    JumpEngine.prototype.name = "Jump Engine";

    JumpEngine.prototype.desc = "Allows you to perform short jumps. Drains some energy and 2% cloak per second.";

    JumpEngine.prototype.trailTime = 0;

    JumpEngine.prototype.hp = 25;

    JumpEngine.prototype.cost = 25;

    JumpEngine.prototype.mass = 6;

    JumpEngine.prototype.jumpCount = 1;

    JumpEngine.prototype.rechargeRate = 240;

    JumpEngine.prototype.thrust = 0;

    JumpEngine.prototype.turnSpeed = 0;

    JumpEngine.prototype.useEnergy = 10;

    JumpEngine.prototype.exhaust = false;

    JumpEngine.prototype.image = "engineJump.png";

    JumpEngine.prototype.size = [2, 1];

    JumpEngine.prototype.trailSize = 0;

    JumpEngine.prototype.attach = true;

    JumpEngine.prototype.stripe = true;

    JumpEngine.prototype.tab = "engines";

    JumpEngine.prototype.tick = function() {
      if (this.unit.energy >= this.useEnergy) {
        this.unit.energy -= this.useEnergy;
        if (this.unit.jump < this.unit.jumpDistance) {
          this.unit.jump = Math.min(this.unit.jump + this.rechargeRate / this.unit.mass, this.unit.jumpDistance);
        }
        if (this.unit.cloak > 0) {
          this.unit.cloak = this.unit.cloak * 0.99875;
        }
      }
      return this.working = this.unit.jump > this.unit.minJump;
    };

    JumpEngine.prototype.draw = function() {
      JumpEngine.__super__.draw.call(this);
      if (this.working) {
        return baseAtlas.drawSprite("parts/engineJumpPip.png", this.worldPos, [1, 1], this.unit.rot);
      }
    };

    return JumpEngine;

  })(Engine);

  Wing = (function(superClass) {
    extend(Wing, superClass);

    function Wing() {
      return Wing.__super__.constructor.apply(this, arguments);
    }

    Wing.prototype.name = "Wing";

    Wing.prototype.desc = "Adds turn rate to your units, more wings make ships turn faster.";

    Wing.prototype.tab = "engines";

    Wing.prototype.stripe = true;

    Wing.prototype.attach = false;

    Wing.prototype.canShowDamage = true;

    return Wing;

  })(Part);

  parts.Wing2x2 = (function(superClass) {
    extend(Wing2x2, superClass);

    function Wing2x2() {
      return Wing2x2.__super__.constructor.apply(this, arguments);
    }

    Wing2x2.prototype.hp = 16;

    Wing2x2.prototype.cost = 32;

    Wing2x2.prototype.mass = 8;

    Wing2x2.prototype.turnSpeed = 30;

    Wing2x2.prototype.image = "Wing2x2.png";

    Wing2x2.prototype.size = [2, 2];

    return Wing2x2;

  })(Wing);

  parts.Wing1x2 = (function(superClass) {
    extend(Wing1x2, superClass);

    function Wing1x2() {
      return Wing1x2.__super__.constructor.apply(this, arguments);
    }

    Wing1x2.prototype.hp = 8;

    Wing1x2.prototype.cost = 16;

    Wing1x2.prototype.mass = 4;

    Wing1x2.prototype.turnSpeed = 15;

    Wing1x2.prototype.image = "Wing1x2.png";

    Wing1x2.prototype.size = [1, 2];

    return Wing1x2;

  })(Wing);

  parts.Wing2x1 = (function(superClass) {
    extend(Wing2x1, superClass);

    function Wing2x1() {
      return Wing2x1.__super__.constructor.apply(this, arguments);
    }

    Wing2x1.prototype.hp = 6;

    Wing2x1.prototype.cost = 12;

    Wing2x1.prototype.mass = 3;

    Wing2x1.prototype.turnSpeed = 11.25;

    Wing2x1.prototype.image = "Wing2x1.png";

    Wing2x1.prototype.size = [2, 1];

    return Wing2x1;

  })(Wing);

  parts.Wing1x1Angle = (function(superClass) {
    extend(Wing1x1Angle, superClass);

    function Wing1x1Angle() {
      return Wing1x1Angle.__super__.constructor.apply(this, arguments);
    }

    Wing1x1Angle.prototype.hp = 4;

    Wing1x1Angle.prototype.cost = 8;

    Wing1x1Angle.prototype.mass = 2;

    Wing1x1Angle.prototype.turnSpeed = 7.5;

    Wing1x1Angle.prototype.image = "Wing1x1Angle.png";

    Wing1x1Angle.prototype.size = [1, 1];

    return Wing1x1Angle;

  })(Wing);

  parts.Wing1x1Round = (function(superClass) {
    extend(Wing1x1Round, superClass);

    function Wing1x1Round() {
      return Wing1x1Round.__super__.constructor.apply(this, arguments);
    }

    Wing1x1Round.prototype.hp = 4;

    Wing1x1Round.prototype.cost = 8;

    Wing1x1Round.prototype.mass = 2;

    Wing1x1Round.prototype.turnSpeed = 7.5;

    Wing1x1Round.prototype.image = "Wing1x1Round.png";

    Wing1x1Round.prototype.size = [1, 1];

    return Wing1x1Round;

  })(Wing);

  parts.Wing1x1Notch = (function(superClass) {
    extend(Wing1x1Notch, superClass);

    function Wing1x1Notch() {
      return Wing1x1Notch.__super__.constructor.apply(this, arguments);
    }

    Wing1x1Notch.prototype.hp = 0;

    Wing1x1Notch.prototype.cost = 4;

    Wing1x1Notch.prototype.mass = 0.1;

    Wing1x1Notch.prototype.turnSpeed = 3.15;

    Wing1x1Notch.prototype.image = "Wing1x1Notch.png";

    Wing1x1Notch.prototype.size = [1, 1];

    return Wing1x1Notch;

  })(Wing);

  types.PDLaserBullet = (function(superClass) {
    extend(PDLaserBullet, superClass);

    function PDLaserBullet() {
      return PDLaserBullet.__super__.constructor.apply(this, arguments);
    }

    PDLaserBullet.prototype.image = "parts/fireBeamLarge.png";

    PDLaserBullet.prototype.sound = "sounds/weapons/lightPD.wav";

    PDLaserBullet.prototype.size = [.3, .3];

    PDLaserBullet.prototype.color = [179, 207, 255, 255];

    return PDLaserBullet;

  })(LaserBullet);

  parts.PDTurret = (function(superClass) {
    extend(PDTurret, superClass);

    function PDTurret() {
      return PDTurret.__super__.constructor.apply(this, arguments);
    }

    PDTurret.prototype.name = "Point Defence";

    PDTurret.prototype.desc = "Point defence laser. Counters missiles.";

    PDTurret.prototype.hp = 10;

    PDTurret.prototype.cost = 5;

    PDTurret.prototype.image = "turHex2.png";

    PDTurret.prototype.size = [2, 2];

    PDTurret.prototype.range = 400;

    PDTurret.prototype.reloadTime = 40;

    PDTurret.prototype.trackSpeed = 25;

    PDTurret.prototype.bulletCls = types.PDLaserBullet;

    PDTurret.prototype.shotEnergy = 1100;

    PDTurret.prototype.instant = true;

    PDTurret.prototype.mass = 10;

    PDTurret.prototype.bulletSpeed = 2000;

    PDTurret.prototype.damage = 18;

    PDTurret.prototype.maxLife = .5;

    PDTurret.prototype.hitsMissiles = true;

    return PDTurret;

  })(Turret);

  types.HeavyPDBullet = (function(superClass) {
    extend(HeavyPDBullet, superClass);

    function HeavyPDBullet() {
      return HeavyPDBullet.__super__.constructor.apply(this, arguments);
    }

    HeavyPDBullet.prototype.image = "parts/fireHex1.png";

    HeavyPDBullet.prototype.sound = "sounds/weapons/heavyPD.wav";

    HeavyPDBullet.prototype.size = [.7, .7];

    HeavyPDBullet.prototype.color = [179, 207, 255, 255];

    HeavyPDBullet.prototype.radius = 12;

    HeavyPDBullet.prototype.hitsMultiple = true;

    HeavyPDBullet.prototype.hitUnit = function(thing) {
      thing.applyDamage(this.damage);
      if (this.energyDamage) {
        thing.applyEnergyDamage(this.energyDamage);
      }
      return this.dead = true;
    };

    return HeavyPDBullet;

  })(Bullet);

  parts.HeavyPDTurret = (function(superClass) {
    extend(HeavyPDTurret, superClass);

    function HeavyPDTurret() {
      return HeavyPDTurret.__super__.constructor.apply(this, arguments);
    }

    HeavyPDTurret.prototype.name = "Heavy Point Defence Turret";

    HeavyPDTurret.prototype.desc = "Point defence turret. Hits multiple projectiles. Counters missiles.";

    HeavyPDTurret.prototype.hp = 10;

    HeavyPDTurret.prototype.cost = 5;

    HeavyPDTurret.prototype.image = "turHex1.png";

    HeavyPDTurret.prototype.size = [2, 2];

    HeavyPDTurret.prototype.reloadTime = 52;

    HeavyPDTurret.prototype.trackSpeed = 90;

    HeavyPDTurret.prototype.bulletCls = types.HeavyPDBullet;

    HeavyPDTurret.prototype.range = 405;

    HeavyPDTurret.prototype.shotEnergy = 250 * 16;

    HeavyPDTurret.prototype.mass = 30;

    HeavyPDTurret.prototype.bulletSpeed = 55;

    HeavyPDTurret.prototype.damage = 60;

    HeavyPDTurret.prototype.hitsMissiles = true;

    return HeavyPDTurret;

  })(Turret);

  types.RingBullet = (function(superClass) {
    extend(RingBullet, superClass);

    function RingBullet() {
      return RingBullet.__super__.constructor.apply(this, arguments);
    }

    RingBullet.prototype.image = "parts/fireRing.png";

    RingBullet.prototype.sound = "sounds/weapons/zingg.wav";

    RingBullet.prototype.hitExplosion = "RingHitExplosion";

    RingBullet.prototype.size = [1, 1];

    RingBullet.prototype.color = [179, 207, 255, 255];

    return RingBullet;

  })(Bullet);

  parts.RingTurret = (function(superClass) {
    extend(RingTurret, superClass);

    function RingTurret() {
      return RingTurret.__super__.constructor.apply(this, arguments);
    }

    RingTurret.prototype.name = "Fusion Ring";

    RingTurret.prototype.desc = "Close ranged burst weapon.";

    RingTurret.prototype.hp = 10;

    RingTurret.prototype.cost = 5;

    RingTurret.prototype.image = "turRing.png";

    RingTurret.prototype.size = [2, 2];

    RingTurret.prototype.reloadTime = 80;

    RingTurret.prototype.trackSpeed = 90;

    RingTurret.prototype.bulletCls = types.RingBullet;

    RingTurret.prototype.range = 330;

    RingTurret.prototype.shotEnergy = 250 * 16;

    RingTurret.prototype.mass = 20;

    RingTurret.prototype.bulletSpeed = 35;

    RingTurret.prototype.damage = 100;

    RingTurret.prototype.spin = 0;

    RingTurret.prototype.draw = function() {
      if (this.working) {
        this.spin += .0010 * this.damage;
        this.image = "turRing.png";
      } else {
        this.spin += .0001 * this.damage;
        this.image = "turRingReload.png";
      }
      return baseAtlas.drawSprite("parts/" + this.image, this.worldPos, [1, 1], this.spin);
    };

    return RingTurret;

  })(Turret);

  types.RamBullet = (function(superClass) {
    extend(RamBullet, superClass);

    function RamBullet() {
      return RamBullet.__super__.constructor.apply(this, arguments);
    }

    RamBullet.prototype.image = "parts/fireWavePull.png";

    RamBullet.prototype.sound = "sounds/weapons/WavePull.wav";

    RamBullet.prototype.size = [.5, .5];

    RamBullet.prototype.color = [179, 207, 255, 255];

    RamBullet.prototype.radius = 30;

    RamBullet.prototype.direction = -1;

    RamBullet.prototype.waveEffect = 300;

    RamBullet.prototype.hitUnit = function(unit) {
      var amount, dot, p;
      unit.applyDamage(this.damage);
      p = this.waveEffect * this.damage / unit.mass;
      v2.norm(this.vel, _wave);
      v2.scale(_wave, -this.direction);
      dot = v2.dot(unit.vel, _wave);
      amount = 0;
      if (dot < p) {
        amount = p;
      }
      v2.scale(_wave, amount);
      v2.add(unit.vel, _wave);
      return this.dead = true;
    };

    return RamBullet;

  })(Bullet);

  parts.RamTurret = (function(superClass) {
    extend(RamTurret, superClass);

    function RamTurret() {
      return RamTurret.__super__.constructor.apply(this, arguments);
    }

    RamTurret.prototype.name = "Kinetic Ram";

    RamTurret.prototype.desc = "Knocks a target back with speed depending on its mass.";

    RamTurret.prototype.hp = 10;

    RamTurret.prototype.cost = 5;

    RamTurret.prototype.image = "turWavePush.png";

    RamTurret.prototype.size = [2, 2];

    RamTurret.prototype.reloadTime = 96;

    RamTurret.prototype.trackSpeed = 90;

    RamTurret.prototype.bulletCls = types.RamBullet;

    RamTurret.prototype.range = 125;

    RamTurret.prototype.shotEnergy = 1200;

    RamTurret.prototype.mass = 10;

    RamTurret.prototype.bulletSpeed = 35;

    RamTurret.prototype.damage = 80;

    RamTurret.prototype.hide = true;

    RamTurret.prototype.disable = true;

    return RamTurret;

  })(Turret);

  types.TorpBullet = (function(superClass) {
    extend(TorpBullet, superClass);

    function TorpBullet() {
      return TorpBullet.__super__.constructor.apply(this, arguments);
    }

    TorpBullet.prototype.image = "parts/fireTorp1.png";

    TorpBullet.prototype.sound = "sounds/weapons/torp2.wav";

    TorpBullet.prototype.size = [1, 1];

    TorpBullet.prototype.radius = 25;

    TorpBullet.prototype.missile = true;

    TorpBullet.prototype.trailTime = 46;

    TorpBullet.prototype.trailSize = 0.06;

    return TorpBullet;

  })(StraightMissile);

  parts.TorpTurret = (function(superClass) {
    extend(TorpTurret, superClass);

    function TorpTurret() {
      return TorpTurret.__super__.constructor.apply(this, arguments);
    }

    TorpTurret.prototype.name = "Torpedo Launcher";

    TorpTurret.prototype.desc = "Launches torpedos that move in straight line.";

    TorpTurret.prototype.hp = 10;

    TorpTurret.prototype.cost = 5;

    TorpTurret.prototype.image = "turTorp.png";

    TorpTurret.prototype.size = [2, 2];

    TorpTurret.prototype.reloadTime = 52;

    TorpTurret.prototype.trackSpeed = 45;

    TorpTurret.prototype.bulletCls = types.TorpBullet;

    TorpTurret.prototype.range = 1100;

    TorpTurret.prototype.shotEnergy = 1250;

    TorpTurret.prototype.mass = 10;

    TorpTurret.prototype.bulletSpeed = 16;

    TorpTurret.prototype.damage = 24;

    return TorpTurret;

  })(Turret);

  types.MissileBullet = (function(superClass) {
    extend(MissileBullet, superClass);

    function MissileBullet() {
      return MissileBullet.__super__.constructor.apply(this, arguments);
    }

    MissileBullet.prototype.image = "parts/fireMis1.png";

    MissileBullet.prototype.sound = "sounds/weapons/torp1.wav";

    MissileBullet.prototype.size = [.8, .8];

    MissileBullet.prototype.color = [0, 0, 0, 255];

    MissileBullet.prototype.missile = true;

    MissileBullet.prototype.tracking = true;

    return MissileBullet;

  })(TrackingMissile);

  parts.MissileTurret = (function(superClass) {
    extend(MissileTurret, superClass);

    function MissileTurret() {
      return MissileTurret.__super__.constructor.apply(this, arguments);
    }

    MissileTurret.prototype.name = "Missile Launcher";

    MissileTurret.prototype.desc = "Launches tracking missiles that chase targets.";

    MissileTurret.prototype.onlyInRange = true;

    MissileTurret.prototype.hp = 10;

    MissileTurret.prototype.cost = 5;

    MissileTurret.prototype.image = "turMissile.png";

    MissileTurret.prototype.size = [2, 2];

    MissileTurret.prototype.reloadTime = 33;

    MissileTurret.prototype.trackSpeed = 45;

    MissileTurret.prototype.bulletCls = types.MissileBullet;

    MissileTurret.prototype.range = 1000;

    MissileTurret.prototype.shotEnergy = 95 * 30;

    MissileTurret.prototype.mass = 30;

    MissileTurret.prototype.bulletSpeed = 22;

    MissileTurret.prototype.damage = 27;

    MissileTurret.prototype.radius = 40;

    MissileTurret.prototype.overshoot = 0.5;

    return MissileTurret;

  })(Turret);

  types.ArtilleryExplosion = (function(superClass) {
    extend(ArtilleryExplosion, superClass);

    function ArtilleryExplosion() {
      return ArtilleryExplosion.__super__.constructor.apply(this, arguments);
    }

    ArtilleryExplosion.prototype.sound = "sounds/weapons/thud3.wav";

    ArtilleryExplosion.prototype.soundVolume = .20;

    ArtilleryExplosion.prototype.maxLife = 10;

    ArtilleryExplosion.prototype.draw = function() {
      var color, fade, s;
      ArtilleryExplosion.__super__.draw.call(this);
      if (this.dead) {
        return;
      }
      fade = this.life / this.maxLife;
      s = this.radius / 2;
      color = [255, 255, 255, (1 - Math.pow(fade, 2)) * 180];
      return baseAtlas.drawSprite("img/fire02.png", this.pos, [s, s], this.rot, color);
    };

    return ArtilleryExplosion;

  })(types.AoeExplosion);

  types.ArtilleryBullet = (function(superClass) {
    extend(ArtilleryBullet, superClass);

    function ArtilleryBullet() {
      return ArtilleryBullet.__super__.constructor.apply(this, arguments);
    }

    ArtilleryBullet.prototype.image = "parts/fireLong1.png";

    ArtilleryBullet.prototype.sound = "sounds/weapons/artillery.wav";

    ArtilleryBullet.prototype.color = [255, 240, 244, 255];

    ArtilleryBullet.prototype.size = [1, 1];

    ArtilleryBullet.prototype.missile = true;

    ArtilleryBullet.prototype.explodeClass = "ArtilleryExplosion";

    ArtilleryBullet.prototype.draw = function() {
      var color, dist, size;
      ArtilleryBullet.__super__.draw.call(this);
      if (this.hitPos) {
        dist = Math.min(v2.distance(this.pos, this.hitPos), 1000);
        size = Math.pow(1.003, -dist) * this.aoe / 162;
        color = [255, 0, 0, 80];
        baseAtlas.drawSprite("img/point02.png", this.hitPos, [this.aoe / 256, this.aoe / 256], 0, color);
        baseAtlas.drawSprite("img/fire02.png", this.hitPos, [size * 2, size * 2], 0, color);
      }
    };

    return ArtilleryBullet;

  })(AoeBullet);

  parts.ArtilleryTurret = (function(superClass) {
    extend(ArtilleryTurret, superClass);

    function ArtilleryTurret() {
      return ArtilleryTurret.__super__.constructor.apply(this, arguments);
    }

    ArtilleryTurret.prototype.name = "Artillery Gun";

    ArtilleryTurret.prototype.desc = "Launches a slow moving shell that explodes at the targeted area.";

    ArtilleryTurret.prototype.onlyInRange = false;

    ArtilleryTurret.prototype.hp = 10;

    ArtilleryTurret.prototype.cost = 5;

    ArtilleryTurret.prototype.image = "turLong1.png";

    ArtilleryTurret.prototype.size = [2, 2];

    ArtilleryTurret.prototype.reloadTime = 89;

    ArtilleryTurret.prototype.trackSpeed = 25;

    ArtilleryTurret.prototype.bulletCls = types.ArtilleryBullet;

    ArtilleryTurret.prototype.exactRange = true;

    ArtilleryTurret.prototype.range = 1600;

    ArtilleryTurret.prototype.minRange = 675;

    ArtilleryTurret.prototype.shotEnergy = 4100;

    ArtilleryTurret.prototype.mass = 65;

    ArtilleryTurret.prototype.bulletSpeed = 9;

    ArtilleryTurret.prototype.damage = 120;

    ArtilleryTurret.prototype.aoe = 210;

    return ArtilleryTurret;

  })(Turret);

  types.SidewinderBullet = (function(superClass) {
    extend(SidewinderBullet, superClass);

    function SidewinderBullet() {
      return SidewinderBullet.__super__.constructor.apply(this, arguments);
    }

    SidewinderBullet.prototype.image = "parts/fireMine.png";

    SidewinderBullet.prototype.sound = "sounds/weapons/torp4.wav";

    SidewinderBullet.prototype.soundVolume = .05;

    SidewinderBullet.prototype.size = [.8, .8];

    SidewinderBullet.prototype.color = [0, 0, 0, 255];

    SidewinderBullet.prototype.missile = true;

    SidewinderBullet.prototype.tracking = true;

    SidewinderBullet.prototype.turnVel = [1, 1];

    SidewinderBullet.prototype.trailTime = 32;

    SidewinderBullet.prototype.trailSize = 0.12;

    SidewinderBullet.prototype.tick = function() {
      var minDistance, minUnit;
      SidewinderBullet.__super__.tick.call(this);
      if ((sim.step + this.id) % 4 === 0) {
        if (!this.target || this.target.dead || this.target.cloaked()) {
          minDistance = 0;
          minUnit = null;
          sim.unitSpaces[otherSide(this.side)].findInRange(this.pos, 500, (function(_this) {
            return function(unit) {
              var dist;
              dist = v2.distance(unit.pos, _this.pos);
              if (minUnit === null || dist < minDistance) {
                if (!unit.cloaked()) {
                  minUnit = unit;
                  minDistance = dist;
                }
              }
              return false;
            };
          })(this));
          if (minUnit) {
            return this.target = minUnit;
          }
        }
      }
    };

    SidewinderBullet.prototype.move = function() {
      if (this.dead) {
        return;
      }
      if (this.target && !this.target.dead && !this.target.cloaked()) {
        this.dist = v2.distance(this.target.pos, this.pos);
        v2.sub(this.target.pos, this.pos, this.vel);
      }
      v2.norm(this.vel);
      this.rot = v2.angle(this.vel);
      if (this.direction === 0) {
        this.turnVel[0] = -Math.cos(this.rot) * 2;
        this.turnVel[1] = -Math.sin(this.rot) * 2;
      }
      if (this.direction === 1) {
        this.turnVel[0] = Math.cos(this.rot) * 2;
        this.turnVel[1] = Math.sin(this.rot) * 2;
      }
      v2.scale(this.turnVel, Math.max(0.01, (this.maxLife - this.life * 2) / this.maxLife), this.turnVel);
      v2.scale(this.vel, Math.max(0.01, (this.life * 2) / this.maxLife), this.vel);
      v2.add(this.vel, this.turnVel);
      v2.scale(this.vel, this.speed);
      v2.add(this.pos, this.vel);
      this.rot = v2.angle(this.vel);
      return this.life += 1;
    };

    return SidewinderBullet;

  })(TrackingMissile);

  parts.SidewinderTurret = (function(superClass) {
    extend(SidewinderTurret, superClass);

    function SidewinderTurret() {
      return SidewinderTurret.__super__.constructor.apply(this, arguments);
    }

    SidewinderTurret.prototype.name = "Sidewinder Missile";

    SidewinderTurret.prototype.desc = "Sidewinder is a slow moving tracking missile.";

    SidewinderTurret.prototype.onlyInRange = true;

    SidewinderTurret.prototype.hp = 10;

    SidewinderTurret.prototype.cost = 5;

    SidewinderTurret.prototype.image = "turMine.png";

    SidewinderTurret.prototype.size = [2, 2];

    SidewinderTurret.prototype.reloadTime = 96;

    SidewinderTurret.prototype.trackSpeed = 45;

    SidewinderTurret.prototype.bulletCls = types.SidewinderBullet;

    SidewinderTurret.prototype.range = 780;

    SidewinderTurret.prototype.shotEnergy = 2000;

    SidewinderTurret.prototype.mass = 10;

    SidewinderTurret.prototype.bulletSpeed = 19;

    SidewinderTurret.prototype.damage = 35;

    SidewinderTurret.prototype.radius = 40;

    SidewinderTurret.prototype.overshoot = 0.5;

    SidewinderTurret.prototype.volley = 2;

    SidewinderTurret.prototype.volleyDelay = 1;

    SidewinderTurret.prototype.spread = [1, -1];

    SidewinderTurret.prototype.ticks = SidewinderTurret.volleyDelay;

    SidewinderTurret.prototype.shots = 0;

    SidewinderTurret.prototype.tick = function() {
      SidewinderTurret.__super__.tick.call(this);
      this.ticks -= 1;
      if (this.ticks <= 0) {
        this.ticks = this.volleyDelay;
        if (this.shots > 0) {
          return this.makeRealBullet(this.shots % 2);
        }
      }
    };

    SidewinderTurret.prototype.makeRealBullet = function(direction) {
      var particle;
      this.shots -= 1;
      particle = new this.bulletCls();
      sim.things[particle.id] = particle;
      particle.side = this.unit.side;
      particle.life = 0;
      particle.dead = false;
      particle.z = this.unit.z + .001;
      particle.turretNum = this.turretNum;
      particle.origin = this.unit;
      particle.target = this.target;
      particle.direction = direction;
      particle.speed = this.bulletSpeed;
      particle.damage = this.damage / 2;
      particle.maxLife = this.range / particle.speed * 1.5;
      v2.set(this.worldPos, particle.pos);
      v2.pointTo(particle.vel, this.rot);
      v2.scale(particle.vel, particle.speed);
      return particle.rot = this.rot;
    };

    SidewinderTurret.prototype.makeBullet = function(distance) {
      this.unit.cloak = 0;
      this.shots = this.volley;
      return this.ticks = 0;
    };

    return SidewinderTurret;

  })(Turret);

  types.PlasmaBullet = (function(superClass) {
    extend(PlasmaBullet, superClass);

    function PlasmaBullet() {
      return PlasmaBullet.__super__.constructor.apply(this, arguments);
    }

    PlasmaBullet.prototype.image = "parts/fireShot1.png";

    PlasmaBullet.prototype.sound = "sounds/weapons/blaster2.wav";

    PlasmaBullet.prototype.size = [.6, .6];

    PlasmaBullet.prototype.color = [179, 207, 255, 255];

    return PlasmaBullet;

  })(Bullet);

  parts.PlasmaTurret = (function(superClass) {
    extend(PlasmaTurret, superClass);

    function PlasmaTurret() {
      return PlasmaTurret.__super__.constructor.apply(this, arguments);
    }

    PlasmaTurret.prototype.name = "Plasma Turret";

    PlasmaTurret.prototype.desc = "Fires powerful long range projectiles.";

    PlasmaTurret.prototype.hp = 10;

    PlasmaTurret.prototype.cost = 5;

    PlasmaTurret.prototype.image = "turPlasma.png";

    PlasmaTurret.prototype.size = [2, 2];

    PlasmaTurret.prototype.reloadTime = 52;

    PlasmaTurret.prototype.trackSpeed = 25;

    PlasmaTurret.prototype.bulletCls = types.PlasmaBullet;

    PlasmaTurret.prototype.range = 820;

    PlasmaTurret.prototype.shotEnergy = 100 * 48;

    PlasmaTurret.prototype.mass = 40;

    PlasmaTurret.prototype.bulletSpeed = 20;

    PlasmaTurret.prototype.damage = 53;

    return PlasmaTurret;

  })(Turret);

  types.LightPlasmaBullet = (function(superClass) {
    extend(LightPlasmaBullet, superClass);

    function LightPlasmaBullet() {
      return LightPlasmaBullet.__super__.constructor.apply(this, arguments);
    }

    LightPlasmaBullet.prototype.image = "parts/fireShot1.png";

    LightPlasmaBullet.prototype.sound = "sounds/weapons/blaster2.wav";

    LightPlasmaBullet.prototype.size = [.6, .6];

    LightPlasmaBullet.prototype.color = [179, 207, 255, 255];

    return LightPlasmaBullet;

  })(Bullet);

  parts.LightPlasmaTurret = (function(superClass) {
    extend(LightPlasmaTurret, superClass);

    function LightPlasmaTurret() {
      return LightPlasmaTurret.__super__.constructor.apply(this, arguments);
    }

    LightPlasmaTurret.prototype.hide = true;

    LightPlasmaTurret.prototype.disable = true;

    LightPlasmaTurret.prototype.name = "Light Plasma Turret";

    LightPlasmaTurret.prototype.desc = "Fires a moderate long range projectile.";

    LightPlasmaTurret.prototype.hp = 10;

    LightPlasmaTurret.prototype.cost = 5;

    LightPlasmaTurret.prototype.image = "turPlasma.png";

    LightPlasmaTurret.prototype.size = [2, 2];

    LightPlasmaTurret.prototype.reloadTime = 64;

    LightPlasmaTurret.prototype.trackSpeed = 25;

    LightPlasmaTurret.prototype.bulletCls = types.LightPlasmaBullet;

    LightPlasmaTurret.prototype.range = 950;

    LightPlasmaTurret.prototype.shotEnergy = 1700;

    LightPlasmaTurret.prototype.mass = 10;

    LightPlasmaTurret.prototype.bulletSpeed = 22;

    LightPlasmaTurret.prototype.damage = 26;

    return LightPlasmaTurret;

  })(Turret);

  types.LightBeam = (function(superClass) {
    extend(LightBeam, superClass);

    function LightBeam() {
      return LightBeam.__super__.constructor.apply(this, arguments);
    }

    LightBeam.prototype.image = "parts/fireBeamLarge.png";

    LightBeam.prototype.sound = "sounds/weapons/beam2.wav";

    LightBeam.prototype.size = [.5, .5];

    LightBeam.prototype.color = [179, 207, 255, 255];

    return LightBeam;

  })(LaserBullet);

  parts.LightBeamTurret = (function(superClass) {
    extend(LightBeamTurret, superClass);

    function LightBeamTurret() {
      return LightBeamTurret.__super__.constructor.apply(this, arguments);
    }

    LightBeamTurret.prototype.name = "Light Beam";

    LightBeamTurret.prototype.desc = "Close range beam weapon.";

    LightBeamTurret.prototype.hp = 10;

    LightBeamTurret.prototype.cost = 5;

    LightBeamTurret.prototype.image = "turBeam2.png";

    LightBeamTurret.prototype.size = [2, 2];

    LightBeamTurret.prototype.reloadTime = 7;

    LightBeamTurret.prototype.trackSpeed = 25;

    LightBeamTurret.prototype.bulletCls = types.LightBeam;

    LightBeamTurret.prototype.range = 350;

    LightBeamTurret.prototype.instant = true;

    LightBeamTurret.prototype.shotEnergy = 80 * 7;

    LightBeamTurret.prototype.mass = 5;

    LightBeamTurret.prototype.bulletSpeed = 15;

    LightBeamTurret.prototype.damage = 9;

    LightBeamTurret.prototype.maxLife = 8;

    return LightBeamTurret;

  })(Turret);

  types.HeavyBeam = (function(superClass) {
    extend(HeavyBeam, superClass);

    function HeavyBeam() {
      return HeavyBeam.__super__.constructor.apply(this, arguments);
    }

    HeavyBeam.prototype.image = "parts/fireBeamLarge.png";

    HeavyBeam.prototype.sound = "sounds/weapons/beam4.wav";

    HeavyBeam.prototype.size = [1, 1];

    HeavyBeam.prototype.color = [179, 207, 255, 255];

    return HeavyBeam;

  })(LaserBullet);

  parts.HeavyBeamTurret = (function(superClass) {
    extend(HeavyBeamTurret, superClass);

    function HeavyBeamTurret() {
      return HeavyBeamTurret.__super__.constructor.apply(this, arguments);
    }

    HeavyBeamTurret.prototype.name = "Heavy Beam";

    HeavyBeamTurret.prototype.desc = "Mid range beam weapon.";

    HeavyBeamTurret.prototype.hp = 10;

    HeavyBeamTurret.prototype.cost = 5;

    HeavyBeamTurret.prototype.image = "turBeam1.png";

    HeavyBeamTurret.prototype.size = [2, 2];

    HeavyBeamTurret.prototype.reloadTime = 40;

    HeavyBeamTurret.prototype.trackSpeed = 25;

    HeavyBeamTurret.prototype.bulletCls = types.HeavyBeam;

    HeavyBeamTurret.prototype.shotEnergy = 5000;

    HeavyBeamTurret.prototype.instant = true;

    HeavyBeamTurret.prototype.range = 610;

    HeavyBeamTurret.prototype.mass = 40;

    HeavyBeamTurret.prototype.bulletSpeed = 2000;

    HeavyBeamTurret.prototype.damage = 38;

    HeavyBeamTurret.prototype.maxLife = .5;

    return HeavyBeamTurret;

  })(Turret);

  types.FlackExplosion = (function(superClass) {
    extend(FlackExplosion, superClass);

    function FlackExplosion() {
      return FlackExplosion.__super__.constructor.apply(this, arguments);
    }

    FlackExplosion.prototype.maxLife = 10;

    FlackExplosion.prototype.sound = null;

    FlackExplosion.prototype.draw = function() {
      var color, fade, s;
      FlackExplosion.__super__.draw.call(this);
      FlackExplosion.__super__.draw.call(this);
      if (this.dead) {
        return;
      }
      fade = this.life / this.maxLife;
      s = this.aoe / 80;
      color = [255, 255, 255, (1 - Math.pow(fade, 2)) * 180];
      return baseAtlas.drawSprite("parts/fireFlackExp1.png", this.pos, [s, s], this.rot, color);
    };

    return FlackExplosion;

  })(types.AoeExplosion);

  types.FlackBullet = (function(superClass) {
    extend(FlackBullet, superClass);

    function FlackBullet() {
      return FlackBullet.__super__.constructor.apply(this, arguments);
    }

    FlackBullet.prototype.image = "parts/fireFlack1.png";

    FlackBullet.prototype.sound = "sounds/weapons/zingg.wav";

    FlackBullet.prototype.color = [255, 240, 244, 255];

    FlackBullet.prototype.size = [1, 1];

    FlackBullet.prototype.explodeClass = "FlackExplosion";

    return FlackBullet;

  })(AoeBullet);

  parts.FlackTurret = (function(superClass) {
    extend(FlackTurret, superClass);

    function FlackTurret() {
      return FlackTurret.__super__.constructor.apply(this, arguments);
    }

    FlackTurret.prototype.name = "Heavy Flak";

    FlackTurret.prototype.desc = "Anti-fighter weapon that explodes with AoE at the targeted area.";

    FlackTurret.prototype.hp = 10;

    FlackTurret.prototype.cost = 5;

    FlackTurret.prototype.image = "turFlack.png";

    FlackTurret.prototype.size = [2, 2];

    FlackTurret.prototype.reloadTime = 16;

    FlackTurret.prototype.trackSpeed = 25;

    FlackTurret.prototype.bulletCls = types.FlackBullet;

    FlackTurret.prototype.range = 460;

    FlackTurret.prototype.mass = 30;

    FlackTurret.prototype.shotEnergy = 50 * 32;

    FlackTurret.prototype.exactRange = true;

    FlackTurret.prototype.bulletSpeed = 27;

    FlackTurret.prototype.damage = 18;

    FlackTurret.prototype.aoe = 210;

    return FlackTurret;

  })(Turret);

  types.SniperLaser = (function(superClass) {
    extend(SniperLaser, superClass);

    SniperLaser.prototype.image = "parts/hit1.png";

    SniperLaser.prototype.sound = "sounds/weapons/blaster2.wav";

    SniperLaser.prototype.size = [2, 2];

    SniperLaser.prototype.color = [179, 207, 255, 255];

    function SniperLaser() {
      SniperLaser.__super__.constructor.call(this);
      this.hitOnce = {};
    }

    SniperLaser.prototype.draw = function() {
      if (this.dead) {
        return;
      }
      return baseAtlas.drawSprite(this.image, this.pos, this.size, this.rot + intp.t, this.color);
    };

    SniperLaser.prototype.hitUnit = function(unit) {
      if (!this.hitOnce[unit.id]) {
        unit.applyDamage(this.damage);
        return this.hitOnce[unit.id] = true;
      }
    };

    return SniperLaser;

  })(Bullet);

  parts.SniperGun = (function(superClass) {
    extend(SniperGun, superClass);

    function SniperGun() {
      return SniperGun.__super__.constructor.apply(this, arguments);
    }

    SniperGun.prototype.hide = true;

    SniperGun.prototype.disable = true;

    SniperGun.prototype.name = "Sniper Gun";

    SniperGun.prototype.desc = "Fires a sniper round with high DPS. Its only good at max range and requires massive banks. The sniper ship must not be moving, and it has 18% chance of firing in any one second.";

    SniperGun.prototype.hp = 10;

    SniperGun.prototype.cost = 5;

    SniperGun.prototype.image = "turSnipe1.png";

    SniperGun.prototype.size = [2, 2];

    SniperGun.prototype.reloadTime = 120;

    SniperGun.prototype.trackSpeed = 25;

    SniperGun.prototype.bulletCls = types.SniperLaser;

    SniperGun.prototype.shotEnergy = 100000;

    SniperGun.prototype.range = 1700;

    SniperGun.prototype.minRange = 300;

    SniperGun.prototype.mass = 80;

    SniperGun.prototype.bulletSpeed = 15;

    SniperGun.prototype.damage = 500;

    SniperGun.prototype.hitsMultiple = true;

    SniperGun.prototype.hitsCloak = true;

    SniperGun.prototype.fire = function() {
      if (this.unit.vel[0] === 0 && this.unit.vel[1] === 0 && Math.random() < .1) {
        return SniperGun.__super__.fire.call(this);
      }
    };

    return SniperGun;

  })(Turret);

  types.EMPOrb = (function(superClass) {
    extend(EMPOrb, superClass);

    function EMPOrb() {
      return EMPOrb.__super__.constructor.apply(this, arguments);
    }

    EMPOrb.prototype.image = "parts/fireEnergyBall.png";

    EMPOrb.prototype.sound = "sounds/weapons/blaster1.wav";

    EMPOrb.prototype.soundVolume = .05;

    EMPOrb.prototype.size = [1, 1];

    EMPOrb.prototype.color = [179, 207, 255, 255];

    EMPOrb.prototype.draw = function() {
      if (this.dead) {
        return;
      }
      return baseAtlas.drawSprite(this.image, this.pos, this.size, this.rot + intp.t, this.color);
    };

    return EMPOrb;

  })(Bullet);

  parts.EMPGun = (function(superClass) {
    extend(EMPGun, superClass);

    function EMPGun() {
      return EMPGun.__super__.constructor.apply(this, arguments);
    }

    EMPGun.prototype.name = "EMP Gun";

    EMPGun.prototype.desc = "Fires an EMP orb that drains energy from targets and deals low damage.";

    EMPGun.prototype.hp = 10;

    EMPGun.prototype.cost = 5;

    EMPGun.prototype.image = "turEMP.png";

    EMPGun.prototype.size = [2, 2];

    EMPGun.prototype.reloadTime = 61;

    EMPGun.prototype.trackSpeed = 25;

    EMPGun.prototype.bulletCls = types.EMPOrb;

    EMPGun.prototype.shotEnergy = 3600;

    EMPGun.prototype.range = 620;

    EMPGun.prototype.mass = 2;

    EMPGun.prototype.bulletSpeed = 36;

    EMPGun.prototype.damage = 24;

    EMPGun.prototype.energyDamage = 4200;

    return EMPGun;

  })(Turret);

  types.EMPOrb2 = (function(superClass) {
    extend(EMPOrb2, superClass);

    function EMPOrb2() {
      return EMPOrb2.__super__.constructor.apply(this, arguments);
    }

    EMPOrb2.prototype.image = "parts/fizzleMine.png";

    EMPOrb2.prototype.sound = "sounds/weapons/blaster1.wav";

    EMPOrb2.prototype.soundVolume = .05;

    EMPOrb2.prototype.size = [1, 1];

    EMPOrb2.prototype.color = [179, 207, 255, 255];

    EMPOrb2.prototype.split = 0;

    EMPOrb2.prototype.clientTick = function() {
      var exp, exp2;
      if (this.life > this.maxLife / 4 && this.split === 0) {
        exp = new types.Debree();
        exp.image = "parts/fizzleMinePart.png";
        exp.z = this.z + rand() * .01;
        exp.pos = v2.create(this.pos);
        exp.rot = this.rot;
        exp.vel[0] = Math.cos(this.rot) * 3;
        exp.vel[1] = Math.sin(this.rot) * 3;
        exp.vrot = 0;
        intp.particles[exp.id] = exp;
        exp2 = new types.Debree();
        exp2.image = "parts/fizzleMinePart.png";
        exp2.z = exp.z;
        exp2.pos = v2.create(this.pos);
        v2.set(exp.vel, exp2.vel);
        v2.scale(exp2.vel, -1);
        exp2.rot = exp.rot + Math.PI;
        exp2.vrot = 0;
        intp.particles[exp2.id] = exp2;
        return this.split = 1;
      }
    };

    EMPOrb2.prototype.draw = function() {
      var image;
      if (this.dead) {
        return;
      }
      if (this.life > this.maxLife / 4 && this.split === 0) {
        image = "img/fire02.png";
      } else if (this.life > this.maxLife / 4) {
        image = "parts/fizzleMineEnergy.png";
      } else {
        image = this.image;
      }
      return baseAtlas.drawSprite(image, this.pos, this.size, this.rot + intp.t, this.color);
    };

    EMPOrb2.prototype.postFire = function() {
      this.maxLife += 24;
      this._slowVel = v2.create(this.vel);
      return v2.scale(this._slowVel, 0.2);
    };

    EMPOrb2.prototype.move = function() {
      if (this.dead) {
        return;
      }
      if (this.life > this.maxLife / 4) {
        return v2.add(this.pos, this.vel);
      } else {
        return v2.add(this.pos, this._slowVel);
      }
    };

    EMPOrb2.prototype.tick = function() {
      var exp;
      if (this.life < this.maxLife / 4) {
        this.life += Math.round(Math.random());
      } else {
        this.life += 1;
        this.scan();
      }
      if (this.life > this.maxLife) {
        this.dead = true;
      }
      if (this.dead) {
        exp = new types[this.hitExplosion]();
        exp.z = 1000;
        exp.pos = [this.pos[0], this.pos[1]];
        if (this.t !== null) {
          v2.add(exp.pos, v2.scale(this.vel, this.t));
        }
        exp.vel = [0, 0];
        exp.rot = 0;
        exp.radius = 1;
        return sim.things[exp.id] = exp;
      }
    };

    return EMPOrb2;

  })(Bullet);

  parts.EMPGun2 = (function(superClass) {
    extend(EMPGun2, superClass);

    function EMPGun2() {
      return EMPGun2.__super__.constructor.apply(this, arguments);
    }

    EMPGun2.prototype.name = "Orb Launcher";

    EMPGun2.prototype.desc = "Deploys an orb that launches out after a second, at high speed.";

    EMPGun2.prototype.hp = 10;

    EMPGun2.prototype.cost = 5;

    EMPGun2.prototype.image = "turFizzleGun.png";

    EMPGun2.prototype.size = [2, 2];

    EMPGun2.prototype.reloadTime = 32;

    EMPGun2.prototype.trackSpeed = 25;

    EMPGun2.prototype.bulletCls = types.EMPOrb2;

    EMPGun2.prototype.shotEnergy = 1400;

    EMPGun2.prototype.range = 1400;

    EMPGun2.prototype.minRange = 450;

    EMPGun2.prototype.mass = 20;

    EMPGun2.prototype.bulletSpeed = 44;

    EMPGun2.prototype.damage = 8;

    EMPGun2.prototype.energyDamage = 0;

    EMPGun2.prototype.disable = false;

    return EMPGun2;

  })(Turret);

  types.BombExplosion = (function(superClass) {
    extend(BombExplosion, superClass);

    function BombExplosion() {
      return BombExplosion.__super__.constructor.apply(this, arguments);
    }

    BombExplosion.prototype.maxLife = 10;

    BombExplosion.prototype.sound = "sounds/weapons/thud3.wav";

    BombExplosion.prototype.soundVolume = .25;

    BombExplosion.prototype.draw = function() {
      var ex, i, n, results;
      BombExplosion.__super__.draw.call(this);
      if (this.life === 0) {
        results = [];
        for (n = i = 1; i < 15; n = ++i) {
          ex = new types.Debree();
          ex.image = "parts/fireFlame" + (chooseInt(1, 4)) + ".png";
          ex.z = this.z + rand() * .01;
          ex.pos = [0, 0];
          ex.vel = [0, 0];
          v2.set(this.pos, ex.pos);
          v2.scale(v2.random(ex.vel), Math.random() * 6);
          ex.rot = rand() * Math.PI * 2;
          ex.vrot = rand();
          ex.maxLife = 16;
          ex._pos = v2.create(ex.pos);
          ex._pos2 = v2.create(ex.pos);
          ex.rot = ex.rot;
          ex._rot = ex.rot;
          ex._rot2 = ex.rot;
          results.push(intp.particles[ex.id] = ex);
        }
        return results;
      }
    };

    return BombExplosion;

  })(types.AoeExplosion);

  types.Bomb = (function(superClass) {
    extend(Bomb, superClass);

    function Bomb() {
      return Bomb.__super__.constructor.apply(this, arguments);
    }

    Bomb.prototype.image = "parts/bombDormant.png";

    Bomb.prototype.sound = "sounds/weapons/wewewee.wav";

    Bomb.prototype.soundVolume = .03;

    Bomb.prototype.size = [1, 1];

    Bomb.prototype.color = [255, 255, 255, 255];

    Bomb.prototype.explodeClass = "BombExplosion";

    Bomb.prototype.trailSize = .1;

    Bomb.prototype.trailTime = 32;

    Bomb.prototype.postFire = function() {
      this.maxLife += 28;
      this._slowVel = v2.create(this.vel);
      return v2.scale(this._slowVel, 0);
    };

    Bomb.prototype.move = function() {
      if (this.dead) {
        return;
      }
      if (this.life > 28) {
        return v2.add(this.pos, this.vel);
      } else {
        return v2.add(this.pos, this._slowVel);
      }
    };

    Bomb.prototype.tick = function() {
      var exp;
      this.life += 1;
      if (this.life > this.maxLife) {
        this.dead = true;
        if (this.explode) {
          exp = new types.BombExplosion();
          exp.z = 1000;
          exp.pos = [this.pos[0], this.pos[1]];
          exp.vel = [0, 0];
          exp.rot = 0;
          exp.aoe = this.aoe;
          exp.side = this.side;
          exp.damage = this.damage;
          return sim.things[exp.id] = exp;
        }
      }
    };

    Bomb.prototype.draw = function() {
      var color, dist, size;
      if (!this.trail) {
        this.trail = new Trail(this.id, this.trailSize, this.trailTime, this.color, this.z);
      }
      this.trail.grow(this.pos);
      Bomb.__super__.draw.call(this);
      this.z = 1;
      this.trail.z = 1 - 0.0001;
      if (this.life === 28) {
        this.image = "parts/bombActive.png";
        playSound("sounds/weapons/wizzzz.wav");
      }
      if (this.hitPos) {
        dist = Math.min(v2.distance(this.pos, this.hitPos), 1000);
        size = Math.pow(1.003, -dist) * this.aoe / 162;
        color = [255, 0, 0, 80];
        baseAtlas.drawSprite("img/point02.png", this.hitPos, [this.aoe / 256, this.aoe / 256], 0, color);
        baseAtlas.drawSprite("img/fire02.png", this.hitPos, [size * 2, size * 2], 0, color);
      }
    };

    return Bomb;

  })(AoeBullet);

  parts.BombGun = (function(superClass) {
    extend(BombGun, superClass);

    function BombGun() {
      return BombGun.__super__.constructor.apply(this, arguments);
    }

    BombGun.prototype.name = "Phase Bomb Launcher";

    BombGun.prototype.desc = "Fires a powerful mid-range but easy to dodge projectile.";

    BombGun.prototype.hp = 10;

    BombGun.prototype.cost = 5;

    BombGun.prototype.image = "turBomb.png";

    BombGun.prototype.size = [2, 2];

    BombGun.prototype.reloadTime = 60;

    BombGun.prototype.trackSpeed = 25;

    BombGun.prototype.bulletCls = types.Bomb;

    BombGun.prototype.shotEnergy = 3600;

    BombGun.prototype.range = 650;

    BombGun.prototype.mass = 20;

    BombGun.prototype.bulletSpeed = 16;

    BombGun.prototype.damage = 160;

    BombGun.prototype.onlyInRange = true;

    BombGun.prototype.exactRange = true;

    BombGun.prototype.aoe = 100;

    return BombGun;

  })(Turret);

  types.AutoBullet = (function(superClass) {
    extend(AutoBullet, superClass);

    function AutoBullet() {
      return AutoBullet.__super__.constructor.apply(this, arguments);
    }

    AutoBullet.prototype.image = "parts/fireAuto.png";

    AutoBullet.prototype.sound = "sounds/weapons/autocannon.wav";

    AutoBullet.prototype.size = [.6, .6];

    AutoBullet.prototype.color = [179, 207, 255, 255];

    AutoBullet.prototype.hitExplosion = "SmallHitExplosion";

    return AutoBullet;

  })(Bullet);

  parts.AutoTurret = (function(superClass) {
    extend(AutoTurret, superClass);

    function AutoTurret() {
      return AutoTurret.__super__.constructor.apply(this, arguments);
    }

    AutoTurret.prototype.name = "Auto Cannon";

    AutoTurret.prototype.desc = "Fires five bullets in rapid bursts.";

    AutoTurret.prototype.hp = 10;

    AutoTurret.prototype.cost = 5;

    AutoTurret.prototype.image = "turAutoCannon.png";

    AutoTurret.prototype.size = [2, 2];

    AutoTurret.prototype.reloadTime = 53;

    AutoTurret.prototype.trackSpeed = 25;

    AutoTurret.prototype.bulletCls = types.AutoBullet;

    AutoTurret.prototype.range = 560;

    AutoTurret.prototype.shotEnergy = 355 * 5;

    AutoTurret.prototype.mass = 10;

    AutoTurret.prototype.bulletSpeed = 40;

    AutoTurret.prototype.damage = 8 * 5;

    AutoTurret.prototype.fired = 10;

    AutoTurret.prototype.volley = 5;

    AutoTurret.prototype.spread = [0, .1, -.1, .2, -.2];

    AutoTurret.prototype.tick = function() {
      AutoTurret.__super__.tick.call(this);
      if (this.fired < 10) {
        if (this.fired % 2 === 0) {
          this.rot += this.spread[this.fired / 2];
          this.makeRealBullet();
        }
        this.fired += 1;
        return this.working = true;
      }
    };

    AutoTurret.prototype.makeBullet = function(distance) {
      this.unit.cloak = 0;
      return this.fired = 0;
    };

    AutoTurret.prototype.makeRealBullet = function() {
      var particle;
      particle = new this.bulletCls();
      sim.things[particle.id] = particle;
      particle.side = this.unit.side;
      particle.life = 0;
      particle.dead = false;
      particle.z = this.unit.z + .001;
      particle.turretNum = this.turretNum;
      particle.origin = this.unit;
      particle.target = this.target;
      particle.speed = this.bulletSpeed;
      particle.damage = this.damage / 5;
      particle.maxLife = this.range / particle.speed * 1.5;
      v2.set(this.worldPos, particle.pos);
      v2.pointTo(particle.vel, this.rot);
      v2.scale(particle.vel, particle.speed);
      return particle.rot = this.rot;
    };

    return AutoTurret;

  })(Turret);

  types.ShotgunBullet = (function(superClass) {
    extend(ShotgunBullet, superClass);

    function ShotgunBullet() {
      return ShotgunBullet.__super__.constructor.apply(this, arguments);
    }

    ShotgunBullet.prototype.image = "parts/fireAuto.png";

    ShotgunBullet.prototype.sound = "sounds/weapons/autocannon.wav";

    ShotgunBullet.prototype.size = [.6, .6];

    ShotgunBullet.prototype.color = [179, 207, 255, 255];

    ShotgunBullet.prototype.hitExplosion = "SmallHitExplosion";

    return ShotgunBullet;

  })(Bullet);

  parts.Shotgun = (function(superClass) {
    extend(Shotgun, superClass);

    function Shotgun() {
      return Shotgun.__super__.constructor.apply(this, arguments);
    }

    Shotgun.prototype.name = "Shotgun";

    Shotgun.prototype.desc = "Fires five bullets in rapid bursts.";

    Shotgun.prototype.hp = 10;

    Shotgun.prototype.cost = 5;

    Shotgun.prototype.image = "turAutoCannon.png";

    Shotgun.prototype.size = [2, 2];

    Shotgun.prototype.reloadTime = 96;

    Shotgun.prototype.trackSpeed = 25;

    Shotgun.prototype.bulletCls = types.AutoBullet;

    Shotgun.prototype.range = 450;

    Shotgun.prototype.shotEnergy = 355 * 5;

    Shotgun.prototype.mass = 15;

    Shotgun.prototype.bulletSpeed = 30;

    Shotgun.prototype.damage = 8 * 9;

    Shotgun.prototype.fired = 9;

    Shotgun.prototype.volley = 9;

    Shotgun.prototype.spread = [0, .25, -.25, .5, -.5, .75, -.75, 1, -1];

    Shotgun.prototype.hide = true;

    Shotgun.prototype.disable = true;

    Shotgun.prototype.tick = function() {
      Shotgun.__super__.tick.call(this);
      if (this.fired < 9) {
        if (this.fired % 1 === 0) {
          this.rot += this.spread[this.fired / 1];
          this.makeRealBullet();
        }
        this.fired += 1;
        return this.working = true;
      }
    };

    Shotgun.prototype.makeBullet = function(distance) {
      this.unit.cloak = 0;
      return this.fired = 0;
    };

    Shotgun.prototype.makeRealBullet = function() {
      var particle;
      particle = new this.bulletCls();
      sim.things[particle.id] = particle;
      particle.side = this.unit.side;
      particle.life = 0;
      particle.dead = false;
      particle.z = this.unit.z + .001;
      particle.turretNum = this.turretNum;
      particle.origin = this.unit;
      particle.target = this.target;
      particle.speed = this.bulletSpeed;
      particle.damage = this.damage / 5;
      particle.maxLife = this.range / particle.speed * 1.5;
      v2.set(this.worldPos, particle.pos);
      v2.pointTo(particle.vel, this.rot);
      v2.scale(particle.vel, particle.speed);
      return particle.rot = this.rot;
    };

    return Shotgun;

  })(Turret);

  types.MachineBullet = (function(superClass) {
    extend(MachineBullet, superClass);

    function MachineBullet() {
      return MachineBullet.__super__.constructor.apply(this, arguments);
    }

    MachineBullet.prototype.image = "parts/fireBeamSmall.png";

    MachineBullet.prototype.sound = "sounds/weapons/autocannon.wav";

    MachineBullet.prototype.size = [.6, .6];

    MachineBullet.prototype.color = [179, 207, 255, 255];

    MachineBullet.prototype.hitExplosion = "SmallHitExplosion";

    return MachineBullet;

  })(Bullet);

  parts.MachineGun = (function(superClass) {
    extend(MachineGun, superClass);

    function MachineGun() {
      return MachineGun.__super__.constructor.apply(this, arguments);
    }

    MachineGun.prototype.name = "Machine Gun";

    MachineGun.prototype.desc = "Fires fast bullets.";

    MachineGun.prototype.hp = 10;

    MachineGun.prototype.cost = 5;

    MachineGun.prototype.image = "turAutoCannon.png";

    MachineGun.prototype.size = [2, 2];

    MachineGun.prototype.reloadTime = 5;

    MachineGun.prototype.trackSpeed = 25;

    MachineGun.prototype.bulletCls = types.MachineBullet;

    MachineGun.prototype.range = 780;

    MachineGun.prototype.shotEnergy = 200;

    MachineGun.prototype.mass = 10;

    MachineGun.prototype.bulletSpeed = 100;

    MachineGun.prototype.damage = 4;

    MachineGun.prototype.hide = true;

    MachineGun.prototype.disable = true;

    MachineGun.prototype.makeBullet = function(distance) {
      this.rot += (Math.random() - 0.5) * 0.3;
      return MachineGun.__super__.makeBullet.call(this);
    };

    return MachineGun;

  })(Turret);

  types.TeslaBolt = (function(superClass) {
    extend(TeslaBolt, superClass);

    function TeslaBolt() {
      return TeslaBolt.__super__.constructor.apply(this, arguments);
    }

    TeslaBolt.prototype.image = "parts/zap1.png";

    TeslaBolt.prototype.sound = "sounds/weapons/tesla2.wav";

    TeslaBolt.prototype.size = [.6, .6];

    TeslaBolt.prototype.color = [179, 207, 255, 255];

    TeslaBolt.prototype.drawLength = 250;

    return TeslaBolt;

  })(LaserBullet);

  parts.TeslaTurret = (function(superClass) {
    extend(TeslaTurret, superClass);

    function TeslaTurret() {
      return TeslaTurret.__super__.constructor.apply(this, arguments);
    }

    TeslaTurret.prototype.name = "Tesla Turret";

    TeslaTurret.prototype.desc = "Fires lighting bolts that arc between units.";

    TeslaTurret.prototype.hp = 10;

    TeslaTurret.prototype.cost = 5;

    TeslaTurret.prototype.image = "turTesla.png";

    TeslaTurret.prototype.size = [2, 2];

    TeslaTurret.prototype.reloadTime = 10;

    TeslaTurret.prototype.trackSpeed = 25;

    TeslaTurret.prototype.bulletCls = types.TeslaBolt;

    TeslaTurret.prototype.range = 540;

    TeslaTurret.prototype.bounceRange = 540;

    TeslaTurret.prototype.shotEnergy = 1600;

    TeslaTurret.prototype.mass = 40;

    TeslaTurret.prototype.damage = 13;

    TeslaTurret.prototype.instant = true;

    TeslaTurret.prototype.bulletSpeed = 2000;

    TeslaTurret.prototype.maxLife = 1;

    TeslaTurret.prototype.makeBullet = function(distance) {
      var i, id, len, ref, results, unit;
      this.unit.cloak = 0;
      this.zapped = [];
      this.zap(this.worldPos, this.target);
      ref = this.zapped;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        id = ref[i];
        unit = sim.things[id];
        results.push(unit.applyDamage(this.damage / this.zapped.length));
      }
      return results;
    };

    TeslaTurret.prototype.zap = function(from, unit) {
      var closestUnit, minD, particle, range;
      this.zapped.push(unit.id);
      particle = new this.bulletCls();
      particle.image = "parts/zap" + (Math.floor(Math.random() * 4 + 1)) + ".png";
      sim.things[particle.id] = particle;
      particle.side = this.unit.side;
      particle.life = 0;
      particle.dead = false;
      particle.z = this.unit.z + .001;
      if (this.zapped.length === 1) {
        particle.turretNum = this.turretNum;
        particle.origin = this.unit;
        unit.applyEnergyDamage(this.energyDamage);
      } else {
        particle.sound = null;
      }
      particle.target = unit;
      v2.set(from, particle.pos);
      particle.targetPos = v2.create(particle.target.pos);
      if (this.zapped.length === 10) {
        return;
      }
      range = this.bounceRange;
      minD = range;
      closestUnit = null;
      sim.unitSpaces[otherSide(this.unit.side)].findInRange(unit.pos, range + 500, (function(_this) {
        return function(other) {
          var d, ref;
          if (other.cloakFade === 0 && (ref = other.id, indexOf.call(_this.zapped, ref) < 0)) {
            d = v2.distance(unit.pos, other.pos) - other.radius;
            if (d < 0) {
              d = 0;
            }
            if (d < minD) {
              minD = d;
              closestUnit = other;
            }
          }
          return false;
        };
      })(this));
      if (closestUnit) {
        return this.zap(unit.pos, closestUnit);
      }
    };

    return TeslaTurret;

  })(Turret);

  _wave = v2.create();

  _a = v2.create();

  _b = v2.create();

  types.WavePullArch = (function(superClass) {
    extend(WavePullArch, superClass);

    WavePullArch.prototype.image = "parts/fireWavePull.png";

    WavePullArch.prototype.sound = "sounds/weapons/WavePull.wav";

    WavePullArch.prototype.size = [.5, .5];

    WavePullArch.prototype.color = [179, 207, 255, 255];

    WavePullArch.prototype.radius = 30;

    WavePullArch.prototype.maxRadius = 100;

    WavePullArch.prototype.direction = 1;

    WavePullArch.prototype.waveEffect = 0.55;

    WavePullArch.prototype.hitsMultiple = true;

    WavePullArch.prototype.hitsCloak = true;

    function WavePullArch() {
      this.size = v2.create([.5, .5]);
      this.hitOnce = {};
      WavePullArch.__super__.constructor.call(this);
    }

    WavePullArch.prototype.draw = function() {
      this.color[3] = 128 * (1 - this.radius / this.maxRadius);
      this.size[0] = this.radius / 100;
      this.size[1] = this.radius / 100;
      return WavePullArch.__super__.draw.call(this);
    };

    WavePullArch.prototype.tick = function() {
      WavePullArch.__super__.tick.call(this);
      this.radius += (this.maxRadius - 30) / this.maxLife;
      if (this.radius > this.maxRadius) {
        return this.radius = this.maxRadius;
      }
    };

    WavePullArch.prototype.hitUnit = function(unit) {
      var amount, dot, p;
      if (!this.hitOnce[unit.id]) {
        unit.applyDamage(this.damage);
        this.hitOnce[unit.id] = true;
      }
      p = this.waveEffect * this.damage;
      v2.norm(this.vel, _wave);
      v2.scale(_wave, -this.direction);
      dot = v2.dot(unit.vel, _wave);
      amount = 0;
      if (dot < p) {
        amount = p;
      }
      v2.scale(_wave, amount);
      return v2.add(unit.vel, _wave);
    };

    return WavePullArch;

  })(Bullet);

  parts.WavePullTurret = (function(superClass) {
    extend(WavePullTurret, superClass);

    function WavePullTurret() {
      return WavePullTurret.__super__.constructor.apply(this, arguments);
    }

    WavePullTurret.prototype.name = "Gravity Pull Wave";

    WavePullTurret.prototype.desc = "Projects a gravity wave that pulls and damages as it passes through units.";

    WavePullTurret.prototype.hp = 10;

    WavePullTurret.prototype.cost = 5;

    WavePullTurret.prototype.image = "turWavePull.png";

    WavePullTurret.prototype.size = [2, 2];

    WavePullTurret.prototype.reloadTime = 64;

    WavePullTurret.prototype.trackSpeed = 90;

    WavePullTurret.prototype.bulletCls = types.WavePullArch;

    WavePullTurret.prototype.range = 850;

    WavePullTurret.prototype.shotEnergy = 1200;

    WavePullTurret.prototype.mass = 10;

    WavePullTurret.prototype.bulletSpeed = 35;

    WavePullTurret.prototype.damage = 4;

    WavePullTurret.prototype.multiHit = true;

    return WavePullTurret;

  })(Turret);

  types.WavePushArch = (function(superClass) {
    extend(WavePushArch, superClass);

    function WavePushArch() {
      return WavePushArch.__super__.constructor.apply(this, arguments);
    }

    WavePushArch.prototype.image = "parts/fireWavePush.png";

    WavePushArch.prototype.sound = "sounds/weapons/WavePush.wav";

    WavePushArch.prototype.direction = -1;

    WavePushArch.prototype.maxRadius = 100;

    WavePushArch.prototype.waveEffect = 0.55;

    return WavePushArch;

  })(types.WavePullArch);

  parts.WavePushTurret = (function(superClass) {
    extend(WavePushTurret, superClass);

    function WavePushTurret() {
      return WavePushTurret.__super__.constructor.apply(this, arguments);
    }

    WavePushTurret.prototype.name = "Gravity Push Wave";

    WavePushTurret.prototype.desc = "Projects a gravity wave that pushes and damages as it passes through units.";

    WavePushTurret.prototype.image = "turWavePush.png";

    WavePushTurret.prototype.bulletCls = types.WavePushArch;

    WavePushTurret.prototype.range = 775;

    WavePushTurret.prototype.damage = 5;

    WavePushTurret.prototype.multiHit = true;

    return WavePushTurret;

  })(parts.WavePullTurret);

  types.FlameBulletGhost = (function(superClass) {
    extend(FlameBulletGhost, superClass);

    function FlameBulletGhost() {
      return FlameBulletGhost.__super__.constructor.apply(this, arguments);
    }

    FlameBulletGhost.prototype.draw = function() {
      this.color[0] = Math.max(0, 255 - (260 * this.radius / this.maxRadius));
      this.color[1] = Math.max(0, 255 - (440 * this.radius / this.maxRadius));
      this.color[2] = Math.max(0, 255 - (700 * this.radius / this.maxRadius));
      this.color[3] = 64 * (1.2 - this.radius / this.maxRadius);
      this.size[0] = this.radius / 100;
      this.size[1] = this.radius / 100;
      return FlameBulletGhost.__super__.draw.call(this);
    };

    FlameBulletGhost.prototype.tick = function() {
      FlameBulletGhost.__super__.tick.call(this);
      this.radius += (this.maxRadius - 3) / this.maxLife;
      if (this.radius > this.maxRadius) {
        return this.radius = this.maxRadius;
      }
    };

    FlameBulletGhost.prototype.scan = function() {
      return null;
    };

    return FlameBulletGhost;

  })(Bullet);

  types.FlameBullet = (function(superClass) {
    extend(FlameBullet, superClass);

    FlameBullet.prototype.image = "parts/fireFlame1.png";

    FlameBullet.prototype.sound = "sounds/weapons/fireFlame.wav";

    FlameBullet.prototype.size = [0.7, 0.7];

    FlameBullet.prototype.color = [179, 207, 255, 255];

    FlameBullet.prototype.radius = 2;

    FlameBullet.prototype.maxRadius = 64;

    FlameBullet.prototype.hitsMultiple = true;

    FlameBullet.prototype.hitsCloak = true;

    FlameBullet.prototype.createGhost = 0;

    FlameBullet.prototype.originPos = [0, 0];

    function FlameBullet() {
      FlameBullet.__super__.constructor.call(this);
      this.hitOnce = {};
    }

    FlameBullet.prototype.draw = function() {
      var ex, ref, s, w;
      this.createGhost += 1;
      if (this.life < 2 && this.createGhost % 3 === 0) {
        if (this.origin) {
          w = (ref = this.origin.weapons) != null ? ref[this.turretNum || 0] : void 0;
          if (w) {
            v2.set(w.worldPos, this.originPos);
            ex = new types.FlameBulletGhost();
            ex.main = false;
            ex.image = "parts/fireFlame" + (chooseInt(1, 4)) + ".png";
            ex.z = this.z + rand() * .01;
            ex.pos = v2.create(this.originPos);
            ex.vel = v2.create(this.vel);
            s = .3 + .4 * Math.random();
            ex.size = [s, s];
            ex.radius = this.radius * 5;
            ex.maxRadius = this.maxRadius * 5;
            ex.rot = rand() * Math.PI * 2;
            ex.vrot = 0;
            ex.maxLife = this.maxLife;
            ex._pos = v2.create(ex.pos);
            ex._pos2 = v2.create(ex.pos);
            ex.rot = ex.rot;
            ex._rot = ex.rot;
            ex._rot2 = ex.rot;
            intp.particles[ex.id] = ex;
          }
        }
      }
      this.color[0] = Math.max(0, 255 - (260 * this.radius / this.maxRadius));
      this.color[1] = Math.max(0, 255 - (440 * this.radius / this.maxRadius));
      this.color[2] = Math.max(0, 255 - (700 * this.radius / this.maxRadius));
      this.color[3] = 64 * (1.2 - this.radius / this.maxRadius);
      this.size[0] = this.radius * 0.1;
      this.size[1] = this.radius * 0.1;
      return FlameBullet.__super__.draw.call(this);
    };

    FlameBullet.prototype.tick = function() {
      FlameBullet.__super__.tick.call(this);
      this.radius += (this.maxRadius - 30) / this.maxLife;
      if (this.radius > this.maxRadius) {
        return this.radius = this.maxRadius;
      }
    };

    FlameBullet.prototype.hitUnit = function(unit) {
      var maxBurn;
      if (!this.hitOnce[unit.id]) {
        unit.applyDamage(this.damage);
        maxBurn = (unit.hp + unit.shield) * 1.0;
        if (unit.burn < maxBurn) {
          unit.burn += this.burnAmount * this.damage;
          if (unit.burn > maxBurn) {
            unit.burn = maxBurn;
          }
        }
        return this.hitOnce[unit.id] = true;
      }
    };

    FlameBullet.prototype.postFire = function() {
      v2.add(this.pos, this.vel);
      v2.add(this.pos, this.vel);
      this.z += 10;
      this.rot = Math.PI * 2 * Math.random();
      return this.image = "parts/fireFlame" + (chooseInt(1, 4)) + ".png";
    };

    return FlameBullet;

  })(Bullet);

  parts.FlameTurret = (function(superClass) {
    extend(FlameTurret, superClass);

    function FlameTurret() {
      return FlameTurret.__super__.constructor.apply(this, arguments);
    }

    FlameTurret.prototype.name = "Flamethrower";

    FlameTurret.prototype.desc = "Fires a flame that lights units on fire that deals burn damage over time.";

    FlameTurret.prototype.hp = 10;

    FlameTurret.prototype.cost = 5;

    FlameTurret.prototype.image = "turFlame.png";

    FlameTurret.prototype.size = [2, 2];

    FlameTurret.prototype.reloadTime = 8;

    FlameTurret.prototype.trackSpeed = 90;

    FlameTurret.prototype.bulletCls = types.FlameBullet;

    FlameTurret.prototype.range = 360;

    FlameTurret.prototype.shotEnergy = 400;

    FlameTurret.prototype.mass = 14;

    FlameTurret.prototype.bulletSpeed = 16;

    FlameTurret.prototype.damage = 3;

    FlameTurret.prototype.dealsBurnDamage = true;

    FlameTurret.prototype.burnAmount = 7;

    FlameTurret.prototype.disable = false;

    return FlameTurret;

  })(Turret);

  parts.AOEWarhead = (function(superClass) {
    extend(AOEWarhead, superClass);

    function AOEWarhead() {
      return AOEWarhead.__super__.constructor.apply(this, arguments);
    }

    AOEWarhead.prototype.name = "Explosive Warhead";

    AOEWarhead.prototype.desc = "Kamikaze warhead dealing damage within an area";

    AOEWarhead.prototype.hp = 0;

    AOEWarhead.prototype.cost = 6;

    AOEWarhead.prototype.mass = 10;

    AOEWarhead.prototype.image = "AOEWarhead.png";

    AOEWarhead.prototype.attach = true;

    AOEWarhead.prototype.size = [2, 2];

    AOEWarhead.prototype.aoe = 390;

    AOEWarhead.prototype.life = 16;

    AOEWarhead.prototype.damage = 16;

    AOEWarhead.prototype.tab = "defence";

    AOEWarhead.prototype.explodes = true;

    AOEWarhead.prototype.init = function() {
      return this.unit.warhead = true;
    };

    AOEWarhead.prototype.tick = function() {
      var i, len, other, ref, results;
      if (this.unit.warheadTest !== sim.step && (this.unit.shapeDamage == null)) {
        this.unit.warheadTest = sim.step;
        ref = this.unit.closestEnemies();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          other = ref[i];
          if (v2.distance(other.pos, this.unit.pos) < this.unit.radius + other.radius + 50) {
            results.push(this.unit.hp = 0);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    AOEWarhead.prototype.postDeath = function() {
      var exp;
      exp = new types.AoeExplosion();
      exp.side = this.unit.side;
      exp.z = 1000;
      exp.pos = v2.create(this.worldPos);
      exp.vel = [0, 0];
      exp.rot = 0;
      exp.maxLife = this.life;
      exp.damage = this.damage;
      exp.aoe = this.aoe;
      exp.radius = 2;
      sim.things[exp.id] = exp;
    };

    return AOEWarhead;

  })(Part);

  parts.EMPWarhead = (function(superClass) {
    extend(EMPWarhead, superClass);

    function EMPWarhead() {
      return EMPWarhead.__super__.constructor.apply(this, arguments);
    }

    EMPWarhead.prototype.name = "EMP Warhead";

    EMPWarhead.prototype.desc = "Kamikaze EMP blast draining energy within an area";

    EMPWarhead.prototype.hp = 0;

    EMPWarhead.prototype.cost = 15;

    EMPWarhead.prototype.mass = 5;

    EMPWarhead.prototype.image = "empField.png";

    EMPWarhead.prototype.attach = true;

    EMPWarhead.prototype.size = [2, 2];

    EMPWarhead.prototype.aoe = 300;

    EMPWarhead.prototype.life = 16;

    EMPWarhead.prototype.energyDamage = 6000;

    EMPWarhead.prototype.tab = "defence";

    EMPWarhead.prototype.explodes = true;

    EMPWarhead.prototype.init = function() {
      return this.unit.warhead = true;
    };

    EMPWarhead.prototype.tick = function() {
      var i, len, other, ref, results;
      if (this.unit.warheadTest !== sim.step && (this.unit.shapeDamage == null)) {
        this.unit.warheadTest = sim.step;
        ref = this.unit.closestEnemies();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          other = ref[i];
          if (v2.distance(other.pos, this.unit.pos) < this.unit.radius + other.radius + 50) {
            results.push(this.unit.hp = 0);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    EMPWarhead.prototype.postDeath = function() {
      var exp;
      exp = new types.AoeExplosion();
      exp.side = this.unit.side;
      exp.image = "parts/zaphit" + (chooseInt(1, 3)) + ".png";
      exp.z = 1000;
      exp.pos = v2.create(this.worldPos);
      exp.vel = [0, 0];
      exp.rot = rand() * 100;
      exp.maxLife = this.life;
      exp.energyDamage = this.energyDamage;
      exp.aoe = this.aoe;
      exp.radius = 8;
      sim.things[exp.id] = exp;
    };

    return EMPWarhead;

  })(Part);

  parts.FlameWarhead = (function(superClass) {
    extend(FlameWarhead, superClass);

    function FlameWarhead() {
      return FlameWarhead.__super__.constructor.apply(this, arguments);
    }

    FlameWarhead.prototype.hide = true;

    FlameWarhead.prototype.disable = true;

    FlameWarhead.prototype.name = "Flame Warhead";

    FlameWarhead.prototype.desc = "Kamikaze flame blast applying burn damage within an area";

    FlameWarhead.prototype.hp = 0;

    FlameWarhead.prototype.cost = 5;

    FlameWarhead.prototype.mass = 5;

    FlameWarhead.prototype.image = "decals/Symbol15.png";

    FlameWarhead.prototype.attach = true;

    FlameWarhead.prototype.size = [2, 2];

    FlameWarhead.prototype.aoe = 250;

    FlameWarhead.prototype.life = 25;

    FlameWarhead.prototype.damage = 5;

    FlameWarhead.prototype.burnAmount = 10;

    FlameWarhead.prototype.tab = "defence";

    FlameWarhead.prototype.explodes = true;

    FlameWarhead.prototype.init = function() {
      return this.unit.warhead = true;
    };

    FlameWarhead.prototype.tick = function() {
      var i, len, other, ref, results;
      if (this.unit.warheadTest !== sim.step && (this.unit.shapeDamage == null)) {
        this.unit.warheadTest = sim.step;
        ref = this.unit.closestEnemies();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          other = ref[i];
          if (v2.distance(other.pos, this.unit.pos) < this.unit.radius + other.radius + 50) {
            results.push(this.unit.hp = 0);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    FlameWarhead.prototype.postDeath = function() {
      var exp;
      exp = new types.AoeExplosion();
      exp.side = this.unit.side;
      exp.image = "parts/fireFlame" + (chooseInt(1, 4)) + ".png";
      exp.z = 1000;
      exp.pos = v2.create(this.worldPos);
      exp.vel = [0, 0];
      exp.rot = rand() * 100;
      exp.maxLife = this.life;
      exp.color[0] = 233;
      exp.color[1] = 146;
      exp.color[2] = 86;
      exp.damage = this.damage;
      exp.burnAmount = this.burnAmount * this.damage;
      exp.aoe = this.aoe;
      exp.radius = 8;
      sim.things[exp.id] = exp;
    };

    return FlameWarhead;

  })(Part);

  parts.ShapedWarhead = (function(superClass) {
    extend(ShapedWarhead, superClass);

    function ShapedWarhead() {
      return ShapedWarhead.__super__.constructor.apply(this, arguments);
    }

    ShapedWarhead.prototype.name = "Shaped Warhead";

    ShapedWarhead.prototype.desc = "Explodes on impact dealing instant damage";

    ShapedWarhead.prototype.hp = 25;

    ShapedWarhead.prototype.cost = 5;

    ShapedWarhead.prototype.mass = 20;

    ShapedWarhead.prototype.image = "ShapedWarhead.png";

    ShapedWarhead.prototype.attach = true;

    ShapedWarhead.prototype.size = [2, 2];

    ShapedWarhead.prototype.aoe = 100;

    ShapedWarhead.prototype.damage = 50;

    ShapedWarhead.prototype.doesShapedDamage = true;

    ShapedWarhead.prototype.explodes = true;

    ShapedWarhead.prototype.tab = "defence";

    ShapedWarhead.prototype.init = function() {
      var i, len, part, ref, results;
      this.unit.warhead = true;
      if (this.unit.shapeDamage == null) {
        this.unit.shapeDamage = 0;
        ref = this.unit.parts;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          part = ref[i];
          if (part.doesShapedDamage) {
            results.push(this.unit.shapeDamage += this.damage);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    ShapedWarhead.prototype.tick = function() {
      var i, len, other, ref, results;
      if (this.unit.warheadTest !== sim.step) {
        this.unit.warheadTest = sim.step;
        ref = this.unit.closestEnemies();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          other = ref[i];
          if ((other.maxHP + other.maxShield) * 2 < this.unit.shapeDamage) {
            continue;
          }
          if (v2.distance(other.pos, this.unit.pos) > (other.radius + this.unit.radius)) {
            continue;
          }
          results.push(this.unit.hp = 0);
        }
        return results;
      }
    };

    ShapedWarhead.prototype.postDeath = function() {
      var exp;
      exp = new types.AoeExplosion();
      exp.side = this.unit.side;
      exp.z = 1000;
      exp.pos = v2.create(this.worldPos);
      exp.vel = [0, 0];
      exp.rot = 0;
      exp.maxLife = this.life;
      exp.damage = this.damage;
      exp.aoe = this.aoe;
      exp.radius = 2;
      sim.things[exp.id] = exp;
    };

    return ShapedWarhead;

  })(Part);

  ModPart = (function(superClass) {
    extend(ModPart, superClass);

    function ModPart() {
      this.effected_weapons = bind(this.effected_weapons, this);
      return ModPart.__super__.constructor.apply(this, arguments);
    }

    ModPart.prototype.adjacent = true;

    ModPart.prototype.attach = true;

    ModPart.prototype.size = [2, 2];

    ModPart.prototype.weaponRange = 0;

    ModPart.prototype.weaponRangeFlat = 0;

    ModPart.prototype.weaponDamage = 0;

    ModPart.prototype.weaponSpeed = 0;

    ModPart.prototype.weaponReload = 0;

    ModPart.prototype.weaponEnergy = 0;

    ModPart.prototype.stripe = true;

    ModPart.prototype.tab = "weapons";

    ModPart.prototype.effected_weapons = function() {
      var effected, i, len, ref, w;
      effected = [];
      ref = this.unit.weapons;
      for (i = 0, len = ref.length; i < len; i++) {
        w = ref[i];
        if (v2.distance(w.pos, this.pos) < 45) {
          effected.push(w);
        }
      }
      return effected;
    };

    ModPart.prototype.init = function() {
      var effect, i, len, results, w, ws;
      ws = this.effected_weapons();
      effect = (1 / 0.85) * (Math.pow(0.85, ws.length));
      results = [];
      for (i = 0, len = ws.length; i < len; i++) {
        w = ws[i];
        w.weaponRange *= 1 + this.weaponRange / 100 * effect;
        w.weaponRangeFlat += this.weaponRangeFlat * effect;
        w.weaponDamage *= 1 + this.weaponDamage / 100 * effect;
        w.weaponSpeed += this.weaponSpeed / 100 * effect;
        w.weaponReload *= 1 + this.weaponReload / 100 * effect;
        results.push(w.weaponEnergy *= 1 + this.weaponEnergy / 100 * effect);
      }
      return results;
    };

    return ModPart;

  })(Part);

  parts.TargetingMod = (function(superClass) {
    extend(TargetingMod, superClass);

    function TargetingMod() {
      return TargetingMod.__super__.constructor.apply(this, arguments);
    }

    TargetingMod.prototype.name = "Targeting Subsystem";

    TargetingMod.prototype.desc = "Increaces range of adjacent weapons at cost of reload rate. -15% effect for each supported weapon.";

    TargetingMod.prototype.hp = 10;

    TargetingMod.prototype.cost = 20;

    TargetingMod.prototype.mass = 30;

    TargetingMod.prototype.image = "TargetingMod.png";

    TargetingMod.prototype.weaponRange = 25;

    TargetingMod.prototype.weaponReload = 30;

    return TargetingMod;

  })(ModPart);

  parts.DamageMod = (function(superClass) {
    extend(DamageMod, superClass);

    function DamageMod() {
      return DamageMod.__super__.constructor.apply(this, arguments);
    }

    DamageMod.prototype.name = "Overcharger";

    DamageMod.prototype.desc = "Increases damage of adjacent weapons at cost of reload rate. -15% effect for each supported weapon";

    DamageMod.prototype.cost = 10;

    DamageMod.prototype.mass = 10;

    DamageMod.prototype.image = "DamageMod.png";

    DamageMod.prototype.weaponDamage = 30;

    DamageMod.prototype.weaponReload = 15;

    return DamageMod;

  })(ModPart);

  parts.ReloaderMod = (function(superClass) {
    extend(ReloaderMod, superClass);

    function ReloaderMod() {
      return ReloaderMod.__super__.constructor.apply(this, arguments);
    }

    ReloaderMod.prototype.name = "Reloader";

    ReloaderMod.prototype.desc = "Decreases reload time of adjacent weapons. -15% effect for each supported weapon";

    ReloaderMod.prototype.cost = 25;

    ReloaderMod.prototype.mass = 10;

    ReloaderMod.prototype.image = "ReloaderMod.png";

    ReloaderMod.prototype.weaponReload = -34;

    return ReloaderMod;

  })(ModPart);

  parts.BulletSpeedMod = (function(superClass) {
    extend(BulletSpeedMod, superClass);

    function BulletSpeedMod() {
      return BulletSpeedMod.__super__.constructor.apply(this, arguments);
    }

    BulletSpeedMod.prototype.name = "Speed Coils";

    BulletSpeedMod.prototype.desc = "Adds flat range and flat % bullet speed to adjacent weapons at cost of reload rate. -15% effect for each supported weapon.";

    BulletSpeedMod.prototype.cost = 5;

    BulletSpeedMod.prototype.mass = 1;

    BulletSpeedMod.prototype.hp = 5;

    BulletSpeedMod.prototype.image = "BulletSpeedMod.png";

    BulletSpeedMod.prototype.weaponSpeed = 50;

    BulletSpeedMod.prototype.weaponReload = 15;

    BulletSpeedMod.prototype.weaponRangeFlat = 50;

    return BulletSpeedMod;

  })(ModPart);

  parts.DampenerMod = (function(superClass) {
    extend(DampenerMod, superClass);

    function DampenerMod() {
      return DampenerMod.__super__.constructor.apply(this, arguments);
    }

    DampenerMod.prototype.name = "Dampener";

    DampenerMod.prototype.desc = "Decreases energy usage of adjacent weapons at the cost of bullet speed. -15% effect for each supported weapon.";

    DampenerMod.prototype.cost = 5;

    DampenerMod.prototype.mass = 5;

    DampenerMod.prototype.hp = 10;

    DampenerMod.prototype.image = "dampener.png";

    DampenerMod.prototype.weaponSpeed = -8;

    DampenerMod.prototype.weaponEnergy = -26.5;

    return DampenerMod;

  })(ModPart);

  AiPart = (function(superClass) {
    extend(AiPart, superClass);

    function AiPart() {
      return AiPart.__super__.constructor.apply(this, arguments);
    }

    AiPart.prototype.hp = 0;

    AiPart.prototype.hide = true;

    AiPart.prototype.name = "Missile Only AI";

    AiPart.prototype.desc = "Makes the adjacent turrets shoot only at missiles if close to missile ships. (does not work yet)";

    AiPart.prototype.cost = 5;

    AiPart.prototype.image = "ai01.png";

    AiPart.prototype.attach = true;

    AiPart.prototype.adjacent = true;

    AiPart.prototype.size = [1, 1];

    AiPart.prototype.mass = 1;

    AiPart.prototype.stripe = true;

    AiPart.prototype.tab = "weapons";

    return AiPart;

  })(Part);

  parts.Ai1 = (function(superClass) {
    extend(Ai1, superClass);

    function Ai1() {
      return Ai1.__super__.constructor.apply(this, arguments);
    }

    Ai1.prototype.hp = 0;

    Ai1.prototype.hide = true;

    Ai1.prototype.name = "Missile Only AI";

    Ai1.prototype.desc = "Makes the adjacent turrets shoot only at missiles if close to missile ships. (does not work yet)";

    Ai1.prototype.cost = 5;

    Ai1.prototype.image = "ai01.png";

    Ai1.prototype.attach = true;

    Ai1.prototype.adjacent = true;

    Ai1.prototype.size = [1, 1];

    Ai1.prototype.mass = 1;

    Ai1.prototype.stripe = true;

    Ai1.prototype.tab = "weapons";

    Ai1.prototype.disable = true;

    return Ai1;

  })(AiPart);

  parts.OverKillAi = (function(superClass) {
    extend(OverKillAi, superClass);

    function OverKillAi() {
      this.effected_weapons = bind(this.effected_weapons, this);
      return OverKillAi.__super__.constructor.apply(this, arguments);
    }

    OverKillAi.prototype.hide = false;

    OverKillAi.prototype.name = "No Overkill";

    OverKillAi.prototype.desc = "Makes the adjacent turrets not shoot if it would kill an enemy twice in one shot.";

    OverKillAi.prototype.cost = 1;

    OverKillAi.prototype.hp = 4;

    OverKillAi.prototype.image = "OverKillAi.png";

    OverKillAi.prototype.attach = true;

    OverKillAi.prototype.adjacent = true;

    OverKillAi.prototype.size = [1, 1];

    OverKillAi.prototype.mass = 1;

    OverKillAi.prototype.effected_weapons = function() {
      var effected, i, len, ref, w;
      effected = [];
      ref = this.unit.weapons;
      for (i = 0, len = ref.length; i < len; i++) {
        w = ref[i];
        if (v2.distance(w.pos, this.pos) < 45) {
          effected.push(w);
        }
      }
      return effected;
    };

    OverKillAi.prototype.init = function() {
      var i, len, results, w, ws;
      ws = this.effected_weapons();
      results = [];
      for (i = 0, len = ws.length; i < len; i++) {
        w = ws[i];
        results.push(w.noOverkill = true);
      }
      return results;
    };

    return OverKillAi;

  })(AiPart);

  parts.Ai3 = (function(superClass) {
    extend(Ai3, superClass);

    function Ai3() {
      return Ai3.__super__.constructor.apply(this, arguments);
    }

    Ai3.prototype.name = "Accurate AI";

    Ai3.prototype.desc = "Makes the adjacent turrets shoot only at targets is sure really to hit. (does not work yet)";

    Ai3.prototype.cost = 50;

    Ai3.prototype.image = "ai09.png";

    Ai3.prototype.attach = true;

    Ai3.prototype.adjacent = true;

    Ai3.prototype.size = [1, 1];

    Ai3.prototype.mass = 10;

    Ai3.prototype.disable = true;

    return Ai3;

  })(AiPart);

  parts.Ai4 = (function(superClass) {
    extend(Ai4, superClass);

    function Ai4() {
      return Ai4.__super__.constructor.apply(this, arguments);
    }

    Ai4.prototype.name = "AOE AI";

    Ai4.prototype.desc = "Makes the adjacent turrets shoot in the middle of groups trying to hit it with AOE damage. (does not work yet)";

    Ai4.prototype.cost = 50;

    Ai4.prototype.image = "ai03.png";

    Ai4.prototype.attach = true;

    Ai4.prototype.adjacent = true;

    Ai4.prototype.size = [1, 1];

    Ai4.prototype.mass = 10;

    Ai4.prototype.disable = true;

    return Ai4;

  })(AiPart);

  parts.SymbolDecal1 = (function(superClass) {
    extend(SymbolDecal1, superClass);

    function SymbolDecal1() {
      return SymbolDecal1.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal1.prototype.name = "Insignia";

    SymbolDecal1.prototype.desc = "Place this on your ship to show off your affiliation.";

    SymbolDecal1.prototype.hp = 0;

    SymbolDecal1.prototype.decal = true;

    SymbolDecal1.prototype.cost = 0;

    SymbolDecal1.prototype.image = "decals/Symbol1.png";

    SymbolDecal1.prototype.size = [2, 2];

    SymbolDecal1.prototype.mass = 0;

    SymbolDecal1.prototype.tab = "decal";

    SymbolDecal1.prototype.dlc = "Paint Job";

    SymbolDecal1.prototype.opacity = 1;

    return SymbolDecal1;

  })(Part);

  parts.SymbolDecal2 = (function(superClass) {
    extend(SymbolDecal2, superClass);

    function SymbolDecal2() {
      return SymbolDecal2.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal2.prototype.image = "decals/Symbol2.png";

    return SymbolDecal2;

  })(parts.SymbolDecal1);

  parts.SymbolDecal3 = (function(superClass) {
    extend(SymbolDecal3, superClass);

    function SymbolDecal3() {
      return SymbolDecal3.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal3.prototype.image = "decals/Symbol3.png";

    return SymbolDecal3;

  })(parts.SymbolDecal1);

  parts.SymbolDecal4 = (function(superClass) {
    extend(SymbolDecal4, superClass);

    function SymbolDecal4() {
      return SymbolDecal4.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal4.prototype.image = "decals/Symbol4.png";

    return SymbolDecal4;

  })(parts.SymbolDecal1);

  parts.SymbolDecal5 = (function(superClass) {
    extend(SymbolDecal5, superClass);

    function SymbolDecal5() {
      return SymbolDecal5.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal5.prototype.image = "decals/Symbol5.png";

    return SymbolDecal5;

  })(parts.SymbolDecal1);

  parts.SymbolDecal6 = (function(superClass) {
    extend(SymbolDecal6, superClass);

    function SymbolDecal6() {
      return SymbolDecal6.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal6.prototype.image = "decals/Symbol6.png";

    return SymbolDecal6;

  })(parts.SymbolDecal1);

  parts.SymbolDecal7 = (function(superClass) {
    extend(SymbolDecal7, superClass);

    function SymbolDecal7() {
      return SymbolDecal7.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal7.prototype.image = "decals/Symbol7.png";

    return SymbolDecal7;

  })(parts.SymbolDecal1);

  parts.SymbolDecal8 = (function(superClass) {
    extend(SymbolDecal8, superClass);

    function SymbolDecal8() {
      return SymbolDecal8.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal8.prototype.image = "decals/Symbol8.png";

    return SymbolDecal8;

  })(parts.SymbolDecal1);

  parts.SymbolDecal9 = (function(superClass) {
    extend(SymbolDecal9, superClass);

    function SymbolDecal9() {
      return SymbolDecal9.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal9.prototype.image = "decals/Symbol9.png";

    return SymbolDecal9;

  })(parts.SymbolDecal1);

  parts.SymbolDecal10 = (function(superClass) {
    extend(SymbolDecal10, superClass);

    function SymbolDecal10() {
      return SymbolDecal10.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal10.prototype.image = "decals/Symbol10.png";

    return SymbolDecal10;

  })(parts.SymbolDecal1);

  parts.SymbolDecal11 = (function(superClass) {
    extend(SymbolDecal11, superClass);

    function SymbolDecal11() {
      return SymbolDecal11.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal11.prototype.image = "decals/Symbol11.png";

    return SymbolDecal11;

  })(parts.SymbolDecal1);

  parts.SymbolDecal12 = (function(superClass) {
    extend(SymbolDecal12, superClass);

    function SymbolDecal12() {
      return SymbolDecal12.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal12.prototype.image = "decals/Symbol12.png";

    return SymbolDecal12;

  })(parts.SymbolDecal1);

  parts.SymbolDecal13 = (function(superClass) {
    extend(SymbolDecal13, superClass);

    function SymbolDecal13() {
      return SymbolDecal13.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal13.prototype.image = "decals/Symbol13.png";

    return SymbolDecal13;

  })(parts.SymbolDecal1);

  parts.SymbolDecal14 = (function(superClass) {
    extend(SymbolDecal14, superClass);

    function SymbolDecal14() {
      return SymbolDecal14.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal14.prototype.image = "decals/Symbol14.png";

    return SymbolDecal14;

  })(parts.SymbolDecal1);

  parts.SymbolDecal15 = (function(superClass) {
    extend(SymbolDecal15, superClass);

    function SymbolDecal15() {
      return SymbolDecal15.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal15.prototype.image = "decals/Symbol15.png";

    return SymbolDecal15;

  })(parts.SymbolDecal1);

  parts.SymbolDecal16 = (function(superClass) {
    extend(SymbolDecal16, superClass);

    function SymbolDecal16() {
      return SymbolDecal16.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal16.prototype.image = "decals/Symbol16.png";

    return SymbolDecal16;

  })(parts.SymbolDecal1);

  parts.SymbolDecal17 = (function(superClass) {
    extend(SymbolDecal17, superClass);

    function SymbolDecal17() {
      return SymbolDecal17.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal17.prototype.image = "decals/Symbol17.png";

    return SymbolDecal17;

  })(parts.SymbolDecal1);

  parts.SymbolDecal18 = (function(superClass) {
    extend(SymbolDecal18, superClass);

    function SymbolDecal18() {
      return SymbolDecal18.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal18.prototype.image = "decals/Symbol18.png";

    return SymbolDecal18;

  })(parts.SymbolDecal1);

  parts.SymbolDecal19 = (function(superClass) {
    extend(SymbolDecal19, superClass);

    function SymbolDecal19() {
      return SymbolDecal19.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal19.prototype.image = "decals/Symbol19.png";

    return SymbolDecal19;

  })(parts.SymbolDecal1);

  parts.SymbolDecal20 = (function(superClass) {
    extend(SymbolDecal20, superClass);

    function SymbolDecal20() {
      return SymbolDecal20.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal20.prototype.image = "decals/Symbol20.png";

    return SymbolDecal20;

  })(parts.SymbolDecal1);

  parts.SymbolDecal21 = (function(superClass) {
    extend(SymbolDecal21, superClass);

    function SymbolDecal21() {
      return SymbolDecal21.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal21.prototype.image = "decals/Symbol21.png";

    return SymbolDecal21;

  })(parts.SymbolDecal1);

  parts.SymbolDecal22 = (function(superClass) {
    extend(SymbolDecal22, superClass);

    function SymbolDecal22() {
      return SymbolDecal22.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal22.prototype.image = "decals/Symbol22.png";

    return SymbolDecal22;

  })(parts.SymbolDecal1);

  parts.SymbolDecal23 = (function(superClass) {
    extend(SymbolDecal23, superClass);

    function SymbolDecal23() {
      return SymbolDecal23.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal23.prototype.image = "decals/Symbol23.png";

    return SymbolDecal23;

  })(parts.SymbolDecal1);

  parts.SymbolDecal24 = (function(superClass) {
    extend(SymbolDecal24, superClass);

    function SymbolDecal24() {
      return SymbolDecal24.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal24.prototype.image = "decals/Symbol24.png";

    return SymbolDecal24;

  })(parts.SymbolDecal1);

  parts.SymbolDecal25 = (function(superClass) {
    extend(SymbolDecal25, superClass);

    function SymbolDecal25() {
      return SymbolDecal25.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal25.prototype.image = "decals/Symbol25.png";

    return SymbolDecal25;

  })(parts.SymbolDecal1);

  parts.SymbolDecal26 = (function(superClass) {
    extend(SymbolDecal26, superClass);

    function SymbolDecal26() {
      return SymbolDecal26.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal26.prototype.image = "decals/Symbol26.png";

    return SymbolDecal26;

  })(parts.SymbolDecal1);

  parts.SymbolDecal27 = (function(superClass) {
    extend(SymbolDecal27, superClass);

    function SymbolDecal27() {
      return SymbolDecal27.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal27.prototype.image = "decals/Symbol27.png";

    return SymbolDecal27;

  })(parts.SymbolDecal1);

  parts.SymbolDecal28 = (function(superClass) {
    extend(SymbolDecal28, superClass);

    function SymbolDecal28() {
      return SymbolDecal28.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal28.prototype.image = "decals/Symbol28.png";

    return SymbolDecal28;

  })(parts.SymbolDecal1);

  parts.SymbolDecal29 = (function(superClass) {
    extend(SymbolDecal29, superClass);

    function SymbolDecal29() {
      return SymbolDecal29.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal29.prototype.image = "decals/Symbol29.png";

    SymbolDecal29.prototype.disable = true;

    return SymbolDecal29;

  })(parts.SymbolDecal1);

  parts.SymbolDecal30 = (function(superClass) {
    extend(SymbolDecal30, superClass);

    function SymbolDecal30() {
      return SymbolDecal30.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal30.prototype.image = "decals/Symbol30.png";

    SymbolDecal30.prototype.disable = true;

    return SymbolDecal30;

  })(parts.SymbolDecal1);

  parts.SymbolDecal31 = (function(superClass) {
    extend(SymbolDecal31, superClass);

    function SymbolDecal31() {
      return SymbolDecal31.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal31.prototype.image = "decals/Symbol31.png";

    SymbolDecal31.prototype.disable = true;

    return SymbolDecal31;

  })(parts.SymbolDecal1);

  parts.SymbolDecal32 = (function(superClass) {
    extend(SymbolDecal32, superClass);

    function SymbolDecal32() {
      return SymbolDecal32.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal32.prototype.image = "decals/Symbol32.png";

    SymbolDecal32.prototype.disable = true;

    return SymbolDecal32;

  })(parts.SymbolDecal1);

  parts.SymbolDecal33 = (function(superClass) {
    extend(SymbolDecal33, superClass);

    function SymbolDecal33() {
      return SymbolDecal33.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal33.prototype.image = "decals/Symbol33.png";

    SymbolDecal33.prototype.disable = true;

    return SymbolDecal33;

  })(parts.SymbolDecal1);

  parts.SymbolDecal34 = (function(superClass) {
    extend(SymbolDecal34, superClass);

    function SymbolDecal34() {
      return SymbolDecal34.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal34.prototype.image = "decals/Symbol34.png";

    SymbolDecal34.prototype.disable = true;

    return SymbolDecal34;

  })(parts.SymbolDecal1);

  parts.SymbolDecal35 = (function(superClass) {
    extend(SymbolDecal35, superClass);

    function SymbolDecal35() {
      return SymbolDecal35.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal35.prototype.image = "decals/Symbol35.png";

    SymbolDecal35.prototype.disable = true;

    return SymbolDecal35;

  })(parts.SymbolDecal1);

  parts.SymbolDecal36 = (function(superClass) {
    extend(SymbolDecal36, superClass);

    function SymbolDecal36() {
      return SymbolDecal36.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal36.prototype.image = "decals/Symbol36.png";

    SymbolDecal36.prototype.disable = true;

    return SymbolDecal36;

  })(parts.SymbolDecal1);

  parts.SymbolDecal37 = (function(superClass) {
    extend(SymbolDecal37, superClass);

    function SymbolDecal37() {
      return SymbolDecal37.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal37.prototype.image = "decals/Symbol37.png";

    SymbolDecal37.prototype.disable = true;

    return SymbolDecal37;

  })(parts.SymbolDecal1);

  parts.SymbolDecal38 = (function(superClass) {
    extend(SymbolDecal38, superClass);

    function SymbolDecal38() {
      return SymbolDecal38.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal38.prototype.image = "decals/Symbol38.png";

    SymbolDecal38.prototype.disable = true;

    return SymbolDecal38;

  })(parts.SymbolDecal1);

  parts.SymbolDecal39 = (function(superClass) {
    extend(SymbolDecal39, superClass);

    function SymbolDecal39() {
      return SymbolDecal39.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal39.prototype.image = "decals/Symbol39.png";

    SymbolDecal39.prototype.disable = true;

    return SymbolDecal39;

  })(parts.SymbolDecal1);

  parts.SymbolDecal40 = (function(superClass) {
    extend(SymbolDecal40, superClass);

    function SymbolDecal40() {
      return SymbolDecal40.__super__.constructor.apply(this, arguments);
    }

    SymbolDecal40.prototype.image = "decals/Symbol40.png";

    SymbolDecal40.prototype.disable = true;

    return SymbolDecal40;

  })(parts.SymbolDecal1);

  parts.Stripe1x1 = (function(superClass) {
    extend(Stripe1x1, superClass);

    function Stripe1x1() {
      return Stripe1x1.__super__.constructor.apply(this, arguments);
    }

    Stripe1x1.prototype.name = "Stripe";

    Stripe1x1.prototype.desc = "Stripes make your ships cool.";

    Stripe1x1.prototype.size = [1, 1];

    Stripe1x1.prototype.image = "decals/Stripe1x1.png";

    Stripe1x1.prototype.tab = "stripes";

    Stripe1x1.prototype.opacity = 1;

    return Stripe1x1;

  })(parts.SymbolDecal1);

  parts.Stripe1x1Corner = (function(superClass) {
    extend(Stripe1x1Corner, superClass);

    function Stripe1x1Corner() {
      return Stripe1x1Corner.__super__.constructor.apply(this, arguments);
    }

    Stripe1x1Corner.prototype.size = [1, 1];

    Stripe1x1Corner.prototype.image = "decals/Stripe1x1Corner.png";

    return Stripe1x1Corner;

  })(parts.Stripe1x1);

  parts.Stripe1x2 = (function(superClass) {
    extend(Stripe1x2, superClass);

    function Stripe1x2() {
      return Stripe1x2.__super__.constructor.apply(this, arguments);
    }

    Stripe1x2.prototype.size = [1, 2];

    Stripe1x2.prototype.image = "decals/Stripe1x2.png";

    return Stripe1x2;

  })(parts.Stripe1x1);

  parts.Stripe2x1 = (function(superClass) {
    extend(Stripe2x1, superClass);

    function Stripe2x1() {
      return Stripe2x1.__super__.constructor.apply(this, arguments);
    }

    Stripe2x1.prototype.size = [2, 1];

    Stripe2x1.prototype.image = "decals/Stripe2x1.png";

    return Stripe2x1;

  })(parts.Stripe1x1);

  parts.Stripe2x2 = (function(superClass) {
    extend(Stripe2x2, superClass);

    function Stripe2x2() {
      return Stripe2x2.__super__.constructor.apply(this, arguments);
    }

    Stripe2x2.prototype.size = [2, 2];

    Stripe2x2.prototype.image = "decals/Stripe2x2.png";

    return Stripe2x2;

  })(parts.Stripe1x1);

  parts.Stripe2x2Corner = (function(superClass) {
    extend(Stripe2x2Corner, superClass);

    function Stripe2x2Corner() {
      return Stripe2x2Corner.__super__.constructor.apply(this, arguments);
    }

    Stripe2x2Corner.prototype.size = [2, 2];

    Stripe2x2Corner.prototype.image = "decals/Stripe2x2Corner.png";

    return Stripe2x2Corner;

  })(parts.Stripe1x1);

  parts.Stripe2x2Round = (function(superClass) {
    extend(Stripe2x2Round, superClass);

    function Stripe2x2Round() {
      return Stripe2x2Round.__super__.constructor.apply(this, arguments);
    }

    Stripe2x2Round.prototype.size = [2, 2];

    Stripe2x2Round.prototype.image = "decals/Stripe2x2Round.png";

    return Stripe2x2Round;

  })(parts.Stripe1x1);

  parts.StripeDouble2x1 = (function(superClass) {
    extend(StripeDouble2x1, superClass);

    function StripeDouble2x1() {
      return StripeDouble2x1.__super__.constructor.apply(this, arguments);
    }

    StripeDouble2x1.prototype.size = [2, 1];

    StripeDouble2x1.prototype.image = "decals/StripeDouble2x1.png";

    return StripeDouble2x1;

  })(parts.Stripe1x1);

  parts.StripeDouble2x2 = (function(superClass) {
    extend(StripeDouble2x2, superClass);

    function StripeDouble2x2() {
      return StripeDouble2x2.__super__.constructor.apply(this, arguments);
    }

    StripeDouble2x2.prototype.size = [2, 2];

    StripeDouble2x2.prototype.image = "decals/StripeDouble2x2.png";

    return StripeDouble2x2;

  })(parts.Stripe1x1);

  parts.Stripe1x1Slash = (function(superClass) {
    extend(Stripe1x1Slash, superClass);

    function Stripe1x1Slash() {
      return Stripe1x1Slash.__super__.constructor.apply(this, arguments);
    }

    Stripe1x1Slash.prototype.size = [1, 1];

    Stripe1x1Slash.prototype.image = "decals/Stripe1x1Slash.png";

    Stripe1x1Slash.prototype.dlc = "Curves and Shadows";

    return Stripe1x1Slash;

  })(parts.Stripe1x1);

  parts.Stripe1x1SlashInside = (function(superClass) {
    extend(Stripe1x1SlashInside, superClass);

    function Stripe1x1SlashInside() {
      return Stripe1x1SlashInside.__super__.constructor.apply(this, arguments);
    }

    Stripe1x1SlashInside.prototype.size = [1, 1];

    Stripe1x1SlashInside.prototype.image = "decals/Stripe1x1SlashInside.png";

    Stripe1x1SlashInside.prototype.dlc = "Curves and Shadows";

    return Stripe1x1SlashInside;

  })(parts.Stripe1x1);

  parts.Stripe2x2Slash = (function(superClass) {
    extend(Stripe2x2Slash, superClass);

    function Stripe2x2Slash() {
      return Stripe2x2Slash.__super__.constructor.apply(this, arguments);
    }

    Stripe2x2Slash.prototype.size = [2, 2];

    Stripe2x2Slash.prototype.image = "decals/Stripe2x2Slash.png";

    Stripe2x2Slash.prototype.dlc = "Curves and Shadows";

    return Stripe2x2Slash;

  })(parts.Stripe1x1);

  parts.Stripe2x2End = (function(superClass) {
    extend(Stripe2x2End, superClass);

    function Stripe2x2End() {
      return Stripe2x2End.__super__.constructor.apply(this, arguments);
    }

    Stripe2x2End.prototype.size = [2, 2];

    Stripe2x2End.prototype.image = "decals/Stripe2x2End.png";

    Stripe2x2End.prototype.dlc = "Curves and Shadows";

    return Stripe2x2End;

  })(parts.Stripe1x1);

  parts.Stripe1x1Fill1 = (function(superClass) {
    extend(Stripe1x1Fill1, superClass);

    function Stripe1x1Fill1() {
      return Stripe1x1Fill1.__super__.constructor.apply(this, arguments);
    }

    Stripe1x1Fill1.prototype.size = [1, 1];

    Stripe1x1Fill1.prototype.image = "decals/Stripe1x1Fill1.png";

    Stripe1x1Fill1.prototype.dlc = "Curves and Shadows";

    return Stripe1x1Fill1;

  })(parts.Stripe1x1);

  parts.Stripe1x1Fill2 = (function(superClass) {
    extend(Stripe1x1Fill2, superClass);

    function Stripe1x1Fill2() {
      return Stripe1x1Fill2.__super__.constructor.apply(this, arguments);
    }

    Stripe1x1Fill2.prototype.size = [1, 1];

    Stripe1x1Fill2.prototype.image = "decals/Stripe1x1Fill2.png";

    Stripe1x1Fill2.prototype.dlc = "Curves and Shadows";

    return Stripe1x1Fill2;

  })(parts.Stripe1x1);

  parts.Stripe1x1Fill3 = (function(superClass) {
    extend(Stripe1x1Fill3, superClass);

    function Stripe1x1Fill3() {
      return Stripe1x1Fill3.__super__.constructor.apply(this, arguments);
    }

    Stripe1x1Fill3.prototype.size = [1, 1];

    Stripe1x1Fill3.prototype.image = "decals/Stripe1x1Fill3.png";

    Stripe1x1Fill3.prototype.dlc = "Curves and Shadows";

    return Stripe1x1Fill3;

  })(parts.Stripe1x1);

  parts.Stripe1x1Fill4 = (function(superClass) {
    extend(Stripe1x1Fill4, superClass);

    function Stripe1x1Fill4() {
      return Stripe1x1Fill4.__super__.constructor.apply(this, arguments);
    }

    Stripe1x1Fill4.prototype.size = [1, 1];

    Stripe1x1Fill4.prototype.image = "decals/Stripe1x1Fill4.png";

    Stripe1x1Fill4.prototype.dlc = "Curves and Shadows";

    return Stripe1x1Fill4;

  })(parts.Stripe1x1);

  parts.Stripe1x1Fill5 = (function(superClass) {
    extend(Stripe1x1Fill5, superClass);

    function Stripe1x1Fill5() {
      return Stripe1x1Fill5.__super__.constructor.apply(this, arguments);
    }

    Stripe1x1Fill5.prototype.size = [1, 1];

    Stripe1x1Fill5.prototype.image = "decals/Stripe1x1Fill5.png";

    Stripe1x1Fill5.prototype.dlc = "Curves and Shadows";

    return Stripe1x1Fill5;

  })(parts.Stripe1x1);

  parts.Stripe1x1Fill6 = (function(superClass) {
    extend(Stripe1x1Fill6, superClass);

    function Stripe1x1Fill6() {
      return Stripe1x1Fill6.__super__.constructor.apply(this, arguments);
    }

    Stripe1x1Fill6.prototype.size = [1, 1];

    Stripe1x1Fill6.prototype.image = "decals/Stripe1x1Fill6.png";

    Stripe1x1Fill6.prototype.dlc = "Curves and Shadows";

    return Stripe1x1Fill6;

  })(parts.Stripe1x1);

  parts.LetterA = (function(superClass) {
    extend(LetterA, superClass);

    function LetterA() {
      return LetterA.__super__.constructor.apply(this, arguments);
    }

    LetterA.prototype.name = "Lettering";

    LetterA.prototype.desc = "Mark your ships.";

    LetterA.prototype.image = "decals/letterA.png";

    LetterA.prototype.tab = "letters";

    LetterA.prototype.flip = false;

    LetterA.prototype.opacity = 1;

    return LetterA;

  })(parts.SymbolDecal1);

  parts.LetterB = (function(superClass) {
    extend(LetterB, superClass);

    function LetterB() {
      return LetterB.__super__.constructor.apply(this, arguments);
    }

    LetterB.prototype.image = "decals/letterB.png";

    return LetterB;

  })(parts.LetterA);

  parts.LetterC = (function(superClass) {
    extend(LetterC, superClass);

    function LetterC() {
      return LetterC.__super__.constructor.apply(this, arguments);
    }

    LetterC.prototype.image = "decals/letterC.png";

    return LetterC;

  })(parts.LetterA);

  parts.LetterD = (function(superClass) {
    extend(LetterD, superClass);

    function LetterD() {
      return LetterD.__super__.constructor.apply(this, arguments);
    }

    LetterD.prototype.image = "decals/letterD.png";

    return LetterD;

  })(parts.LetterA);

  parts.LetterE = (function(superClass) {
    extend(LetterE, superClass);

    function LetterE() {
      return LetterE.__super__.constructor.apply(this, arguments);
    }

    LetterE.prototype.image = "decals/letterE.png";

    return LetterE;

  })(parts.LetterA);

  parts.LetterF = (function(superClass) {
    extend(LetterF, superClass);

    function LetterF() {
      return LetterF.__super__.constructor.apply(this, arguments);
    }

    LetterF.prototype.image = "decals/letterF.png";

    return LetterF;

  })(parts.LetterA);

  parts.LetterG = (function(superClass) {
    extend(LetterG, superClass);

    function LetterG() {
      return LetterG.__super__.constructor.apply(this, arguments);
    }

    LetterG.prototype.image = "decals/letterG.png";

    return LetterG;

  })(parts.LetterA);

  parts.LetterH = (function(superClass) {
    extend(LetterH, superClass);

    function LetterH() {
      return LetterH.__super__.constructor.apply(this, arguments);
    }

    LetterH.prototype.image = "decals/letterH.png";

    return LetterH;

  })(parts.LetterA);

  parts.LetterI = (function(superClass) {
    extend(LetterI, superClass);

    function LetterI() {
      return LetterI.__super__.constructor.apply(this, arguments);
    }

    LetterI.prototype.image = "decals/letterI.png";

    return LetterI;

  })(parts.LetterA);

  parts.LetterJ = (function(superClass) {
    extend(LetterJ, superClass);

    function LetterJ() {
      return LetterJ.__super__.constructor.apply(this, arguments);
    }

    LetterJ.prototype.image = "decals/letterJ.png";

    return LetterJ;

  })(parts.LetterA);

  parts.LetterK = (function(superClass) {
    extend(LetterK, superClass);

    function LetterK() {
      return LetterK.__super__.constructor.apply(this, arguments);
    }

    LetterK.prototype.image = "decals/letterK.png";

    return LetterK;

  })(parts.LetterA);

  parts.LetterL = (function(superClass) {
    extend(LetterL, superClass);

    function LetterL() {
      return LetterL.__super__.constructor.apply(this, arguments);
    }

    LetterL.prototype.image = "decals/letterL.png";

    return LetterL;

  })(parts.LetterA);

  parts.LetterM = (function(superClass) {
    extend(LetterM, superClass);

    function LetterM() {
      return LetterM.__super__.constructor.apply(this, arguments);
    }

    LetterM.prototype.image = "decals/letterM.png";

    return LetterM;

  })(parts.LetterA);

  parts.LetterN = (function(superClass) {
    extend(LetterN, superClass);

    function LetterN() {
      return LetterN.__super__.constructor.apply(this, arguments);
    }

    LetterN.prototype.image = "decals/letterN.png";

    return LetterN;

  })(parts.LetterA);

  parts.LetterO = (function(superClass) {
    extend(LetterO, superClass);

    function LetterO() {
      return LetterO.__super__.constructor.apply(this, arguments);
    }

    LetterO.prototype.image = "decals/letterO.png";

    return LetterO;

  })(parts.LetterA);

  parts.LetterP = (function(superClass) {
    extend(LetterP, superClass);

    function LetterP() {
      return LetterP.__super__.constructor.apply(this, arguments);
    }

    LetterP.prototype.image = "decals/letterP.png";

    return LetterP;

  })(parts.LetterA);

  parts.LetterQ = (function(superClass) {
    extend(LetterQ, superClass);

    function LetterQ() {
      return LetterQ.__super__.constructor.apply(this, arguments);
    }

    LetterQ.prototype.image = "decals/letterQ.png";

    return LetterQ;

  })(parts.LetterA);

  parts.LetterR = (function(superClass) {
    extend(LetterR, superClass);

    function LetterR() {
      return LetterR.__super__.constructor.apply(this, arguments);
    }

    LetterR.prototype.image = "decals/letterR.png";

    return LetterR;

  })(parts.LetterA);

  parts.LetterS = (function(superClass) {
    extend(LetterS, superClass);

    function LetterS() {
      return LetterS.__super__.constructor.apply(this, arguments);
    }

    LetterS.prototype.image = "decals/letterS.png";

    return LetterS;

  })(parts.LetterA);

  parts.LetterT = (function(superClass) {
    extend(LetterT, superClass);

    function LetterT() {
      return LetterT.__super__.constructor.apply(this, arguments);
    }

    LetterT.prototype.image = "decals/letterT.png";

    return LetterT;

  })(parts.LetterA);

  parts.LetterU = (function(superClass) {
    extend(LetterU, superClass);

    function LetterU() {
      return LetterU.__super__.constructor.apply(this, arguments);
    }

    LetterU.prototype.image = "decals/letterU.png";

    return LetterU;

  })(parts.LetterA);

  parts.LetterV = (function(superClass) {
    extend(LetterV, superClass);

    function LetterV() {
      return LetterV.__super__.constructor.apply(this, arguments);
    }

    LetterV.prototype.image = "decals/letterV.png";

    return LetterV;

  })(parts.LetterA);

  parts.LetterW = (function(superClass) {
    extend(LetterW, superClass);

    function LetterW() {
      return LetterW.__super__.constructor.apply(this, arguments);
    }

    LetterW.prototype.image = "decals/letterW.png";

    return LetterW;

  })(parts.LetterA);

  parts.LetterX = (function(superClass) {
    extend(LetterX, superClass);

    function LetterX() {
      return LetterX.__super__.constructor.apply(this, arguments);
    }

    LetterX.prototype.image = "decals/letterX.png";

    return LetterX;

  })(parts.LetterA);

  parts.LetterY = (function(superClass) {
    extend(LetterY, superClass);

    function LetterY() {
      return LetterY.__super__.constructor.apply(this, arguments);
    }

    LetterY.prototype.image = "decals/letterY.png";

    return LetterY;

  })(parts.LetterA);

  parts.LetterZ = (function(superClass) {
    extend(LetterZ, superClass);

    function LetterZ() {
      return LetterZ.__super__.constructor.apply(this, arguments);
    }

    LetterZ.prototype.image = "decals/letterZ.png";

    return LetterZ;

  })(parts.LetterA);

  parts.LetterPound = (function(superClass) {
    extend(LetterPound, superClass);

    function LetterPound() {
      return LetterPound.__super__.constructor.apply(this, arguments);
    }

    LetterPound.prototype.image = "decals/letterPound.png";

    return LetterPound;

  })(parts.LetterA);

  parts.LetterDot = (function(superClass) {
    extend(LetterDot, superClass);

    function LetterDot() {
      return LetterDot.__super__.constructor.apply(this, arguments);
    }

    LetterDot.prototype.image = "decals/letterDot.png";

    return LetterDot;

  })(parts.LetterA);

  parts.Letter0 = (function(superClass) {
    extend(Letter0, superClass);

    function Letter0() {
      return Letter0.__super__.constructor.apply(this, arguments);
    }

    Letter0.prototype.image = "decals/letter0.png";

    return Letter0;

  })(parts.LetterA);

  parts.Letter1 = (function(superClass) {
    extend(Letter1, superClass);

    function Letter1() {
      return Letter1.__super__.constructor.apply(this, arguments);
    }

    Letter1.prototype.image = "decals/letter1.png";

    return Letter1;

  })(parts.LetterA);

  parts.Letter2 = (function(superClass) {
    extend(Letter2, superClass);

    function Letter2() {
      return Letter2.__super__.constructor.apply(this, arguments);
    }

    Letter2.prototype.image = "decals/letter2.png";

    return Letter2;

  })(parts.LetterA);

  parts.Letter3 = (function(superClass) {
    extend(Letter3, superClass);

    function Letter3() {
      return Letter3.__super__.constructor.apply(this, arguments);
    }

    Letter3.prototype.image = "decals/letter3.png";

    return Letter3;

  })(parts.LetterA);

  parts.Letter4 = (function(superClass) {
    extend(Letter4, superClass);

    function Letter4() {
      return Letter4.__super__.constructor.apply(this, arguments);
    }

    Letter4.prototype.image = "decals/letter4.png";

    return Letter4;

  })(parts.LetterA);

  parts.Letter5 = (function(superClass) {
    extend(Letter5, superClass);

    function Letter5() {
      return Letter5.__super__.constructor.apply(this, arguments);
    }

    Letter5.prototype.image = "decals/letter5.png";

    return Letter5;

  })(parts.LetterA);

  parts.Letter6 = (function(superClass) {
    extend(Letter6, superClass);

    function Letter6() {
      return Letter6.__super__.constructor.apply(this, arguments);
    }

    Letter6.prototype.image = "decals/letter6.png";

    return Letter6;

  })(parts.LetterA);

  parts.Letter7 = (function(superClass) {
    extend(Letter7, superClass);

    function Letter7() {
      return Letter7.__super__.constructor.apply(this, arguments);
    }

    Letter7.prototype.image = "decals/letter7.png";

    return Letter7;

  })(parts.LetterA);

  parts.Letter8 = (function(superClass) {
    extend(Letter8, superClass);

    function Letter8() {
      return Letter8.__super__.constructor.apply(this, arguments);
    }

    Letter8.prototype.image = "decals/letter8.png";

    return Letter8;

  })(parts.LetterA);

  parts.Letter9 = (function(superClass) {
    extend(Letter9, superClass);

    function Letter9() {
      return Letter9.__super__.constructor.apply(this, arguments);
    }

    Letter9.prototype.image = "decals/letter9.png";

    return Letter9;

  })(parts.LetterA);

  Faction = (function(superClass) {
    extend(Faction, superClass);

    function Faction() {
      return Faction.__super__.constructor.apply(this, arguments);
    }

    Faction.prototype.name = "Faction Insignia";

    Faction.prototype.desc = "Place this in your ship to show off your faction affiliation.";

    Faction.prototype.hp = 4;

    Faction.prototype.cost = 1;

    Faction.prototype.size = [2, 2];

    Faction.prototype.mass = 1;

    Faction.prototype.tab = "decal";

    Faction.prototype.opacity = 1;

    Faction.prototype.faction = "DEV";

    Faction.prototype.image = "factions/DEV.png";

    Faction.prototype.disable = true;

    return Faction;

  })(Part);

  parts.Faction1 = (function(superClass) {
    extend(Faction1, superClass);

    function Faction1() {
      return Faction1.__super__.constructor.apply(this, arguments);
    }

    Faction1.prototype.faction = "DEV";

    Faction1.prototype.image = "factions/DEV.png";

    return Faction1;

  })(Faction);

  parts.Faction2 = (function(superClass) {
    extend(Faction2, superClass);

    function Faction2() {
      return Faction2.__super__.constructor.apply(this, arguments);
    }

    Faction2.prototype.faction = "MOD";

    Faction2.prototype.image = "factions/MOD.png";

    return Faction2;

  })(Faction);

  parts.Faction3 = (function(superClass) {
    extend(Faction3, superClass);

    function Faction3() {
      return Faction3.__super__.constructor.apply(this, arguments);
    }

    Faction3.prototype.faction = "KC";

    Faction3.prototype.image = "factions/KC.png";

    return Faction3;

  })(Faction);

  parts.Faction4 = (function(superClass) {
    extend(Faction4, superClass);

    function Faction4() {
      return Faction4.__super__.constructor.apply(this, arguments);
    }

    Faction4.prototype.faction = "AUTO";

    Faction4.prototype.image = "factions/AUTO.png";

    return Faction4;

  })(Faction);

  parts.Faction5 = (function(superClass) {
    extend(Faction5, superClass);

    function Faction5() {
      return Faction5.__super__.constructor.apply(this, arguments);
    }

    Faction5.prototype.faction = "SIEG";

    Faction5.prototype.image = "factions/SIEG.png";

    return Faction5;

  })(Faction);

  parts.Faction6 = (function(superClass) {
    extend(Faction6, superClass);

    function Faction6() {
      return Faction6.__super__.constructor.apply(this, arguments);
    }

    Faction6.prototype.faction = "ISOI";

    Faction6.prototype.image = "factions/ISOI.png";

    return Faction6;

  })(Faction);

  parts.Faction7 = (function(superClass) {
    extend(Faction7, superClass);

    function Faction7() {
      return Faction7.__super__.constructor.apply(this, arguments);
    }

    Faction7.prototype.faction = "TKKA";

    Faction7.prototype.image = "factions/TKKA.png";

    return Faction7;

  })(Faction);

  window.tablePart = function() {
    var _, cls, dps, part, ref, ref1, ref2, ref3, table, tps;
    tps = Sim.prototype.ticksPerSec;
    table = [];
    for (_ in parts) {
      cls = parts[_];
      part = new cls();
      if (part.bulletCls) {
        continue;
      }
      table.push({
        name: part.constructor.name,
        image: part.image,
        cost: part.cost,
        hp: part.hp / part.cost,
        mass: part.mass / part.cost,
        genEnergy: part.genEnergy / part.cost,
        useEnergy: part.useEnergy / part.cost,
        storeEnergy: part.storeEnergy / part.cost,
        shield: part.shield / part.cost,
        genShield: part.genShield / part.cost,
        speed: part.speed / part.cost,
        turnSpeed: part.turnSpeed / part.cost
      });
    }
    console.table(table);
    table = [];
    for (_ in parts) {
      cls = parts[_];
      part = new cls();
      if (part.bulletCls) {
        dps = ((ref = part.bulletCls) != null ? ref.prototype.damage : void 0) / part.reloadTime;
        table.push({
          name: part.name,
          image: part.image,
          hp: part.hp,
          cost: part.cost,
          cost_ty: dps * (part.range - part.minRange) / 30,
          mass: part.mass,
          useEnergy: part.useEnergy,
          dps: dps,
          damage: (ref1 = part.bulletCls) != null ? ref1.prototype.damage : void 0,
          reload: part.reloadTime,
          bulletSpeed: !part.instant ? (ref2 = part.bulletCls) != null ? ref2.prototype.speed : void 0 : 40,
          range: part.range,
          minRange: part.minRange,
          aoe: part.aoe,
          instant: part.instant ? "yes" : void 0,
          exactRange: part.exactRange ? "yes" : void 0,
          missile: ((ref3 = part.bulletCls) != null ? ref3.prototype.missile : void 0) ? "yes" : void 0,
          hitsMissiles: part.hitsMissiles ? "yes*" : void 0
        });
      }
    }
    return console.table(table);
  };

}).call(this);
;


//from src/ai.js
// Generated by CoffeeScript 1.10.0
(function() {
  var _, _aAvgPos, _angleVec, _apos, _avec, _avoidVec, _backPos, _goto, _leftVec, _lvec, _mid, _next, _rightVec, _rvec, _upos, _uvec, attack, attackFilter, attackMoves, backstab, capAI, capAndGuardCP, chargeAI, circle, closest, counterNeed, doUnitAi, doUnitRules, esc_string, g, goAway, goInRange, goThere, gotoLocation, gotoNoStop, gotoNoStopSmooth, ifAbsolute, ifRelative, j, kite, len, r, ram, run_by, spreadCapCP, stayClose, stayInRange, thingsMiddle, unitCompair, willBeAt;

  window.ais = {};

  ais.easy = ["BetaSwarm", "DeltaSwarm", "NukeSwarm", "Cython", "Novice", "Yarki", "Kornine", "Orbiter", "Zyro", "PointDefender", "BladeRanger", "BatteryRam", "TurtleFence"];

  ais.med = ["AlphaSwarm", "Micor", "TorpMan", "BeamMan", "NodeSwarm", "FlamethrowerArmadillo", "Orblin", "Belfry", "Ficon", "TorpSwarm", "Sidewinder", "FighterBomber", "Electro", "LazerBlade", "Rearguard", "Waxon", "LightShower", "Parity", "WaveMotion", "SparkShower", "FireFly", "AssaultandBattery", "RushDown", "BaitandMissile", "SiegeCore", "AlphaStriker"];

  ais.hard = ["Anubis", "LongPoint", "BullDogs", "Furia", "Dreadnaught", "SuperBelfry", "Razorback", "BattleStar", "CreepingHoard", "DoomTrain", "ThePounder", "Liberty", "CubeCollective", "DarkStar", "Podlings", "Keystone", "MBT", "Nayenne", "PushForce", "MiniCharger", "MeteorShower", "nulitor", "FireShower"];

  ais.unitProps = ["cost", "range", "energy%", "speed", "HP", "DPS"];

  ais.unitTypes = ["brick", "scout", "swarmer", "fighter", "interceptor", "bomber", "destroyer", "cruiser", "carrier", "battleship"];

  ais.attackTypes = ["Attack", "Flee", "Kite", "Ram", "Bomb", "Run-by", "Circle", "Backstab", "Wiggle", "Stay at range"];

  ais.capTypes = ["Capture", "Spread to", "Guard", "Protect"];

  ais.locationTypes = ["enemy spawn", "friendly spawn", "enemy home point", "friendly home point", "enemy army middle", "friendly army middle"];

  ais.relativeTypes = ["---", "stronger", "weaker", "faster", "slower", "more range", "less range", "more HP", "less HP", "more expensive", "less expensive", "has PD", "no PD", "cloaked", "not cloaked", "more DPS", "less DPS", "more brawling value", "less brawling value", "armed", "unarmed"];

  ais.absoluteTypes = ["faster", "slower", "more range", "less range", "more HP", "less HP", "more expensive", "less expensive", "more DPS", "less DPS", "more arc", "less arc"];

  ais.bulletTypes = ["any", "PD immune"];

  ais.chargeTypes = ["find recharger", "rest", "flee enemies", "find friendlies", "return to spawn"];

  ais.needTypes = ["point defense need", "fighter counter need", "cloak counter need"];

  window.allAiRules = {};

  allAiRules["energy"] = [["Field # at start", 2], ["Field # at priority #", 1, 2], ["Try to field # every # seconds", 2, 30], ["Field # for # of ship in slot # at priority #", 1, 1, 1, 5], ["Field # for # of @needTypes at priority #", 1, 1, "point defense need", 3], ["Field # when money over # at priority #", 1, 1000, 1]];

  allAiRules["engines"] = [["@capTypes command points within #m", "Capture", 10000], ["Goto @locationTypes", "enemy spawn"], ["Stay in #m range of friendly units", 500], ["Stay in #m range of slot # units", 500, 1], ["Stayaway in #m range from slot # units", 400, 1], ["Finish player orders"]];

  allAiRules["weapons"] = [["@attackTypes enemy within #m", "Attack", 1000], ["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m", "Attack", "slower", "weaker", 1000], ["@attackTypes enemy that is @absoluteTypes then # within #m", "Attack", "slower", 100, 1000]];

  allAiRules["armor"] = [["Avoid everything"], ["Avoid #dps danger areas", 5], ["Avoid over #damage shots", 20], ["Avoid over #damage @bulletTypes shots", 20, "any"], ["When Shields down to #%, flee", 30], ["When #% of energy, @chargeTypes", 20, "find recharger"], ["When below #% cloak, rest", 60], ["Find units that are out of energy"]];

  allAiRules["decal"] = [];

  esc_string = function(s) {
    return '"' + s.replace(/[\\"]/g, '\\$1') + '"';
  };

  window.csonify = function(obj, indent) {
    var json, key, prefix, value;
    if (indent == null) {
      indent = 0;
    }
    indent = indent ? indent + 1 : 1;
    prefix = Array(indent).join("    ");
    json = JSON.stringify(obj);
    if (json.length < 80) {
      return prefix + json;
    }
    if (typeof obj === 'string') {
      return prefix + esc_string(obj);
    }
    if (typeof obj !== 'object') {
      return prefix + obj;
    }
    if (Array.isArray(obj)) {
      return prefix + '[\n' + ((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = obj.length; j < len; j++) {
          value = obj[j];
          results.push(csonify(value, indent));
        }
        return results;
      })()).join('\n') + '\n' + prefix + ']';
    }
    return ((function() {
      var results;
      results = [];
      for (key in obj) {
        value = obj[key];
        results.push(prefix + esc_string(key) + ':\n' + csonify(value, indent));
      }
      return results;
    })()).join('\n');
  };

  ais.allRuleSet = {};

  for (_ in allAiRules) {
    g = allAiRules[_];
    for (j = 0, len = g.length; j < len; j++) {
      r = g[j];
      ais.allRuleSet[r[0]] = true;
    }
  }

  ais.goodRule = function(rule) {
    return ais.allRuleSet[rule[0]] === true;
  };

  ais.ruleToStr = function(rule) {
    var count, i, l, len1, part, parts, string;
    string = "";
    count = 1;
    parts = rule[0].split(/(\#|\@\w+)/);
    for (i = l = 0, len1 = parts.length; l < len1; i = ++l) {
      part = parts[i];
      if (part === "#" || part[0] === "@") {
        string += rule[count];
        count += 1;
      } else {
        string += part;
      }
    }
    return string;
  };

  closest = function(pos, fn, maxDist) {
    var dist, minDist, minT, ref, t;
    if (maxDist == null) {
      maxDist = 10000000;
    }
    minDist = 0;
    minT = null;
    ref = sim.things;
    for (_ in ref) {
      t = ref[_];
      if (fn(t)) {
        dist = v2.distance(pos, t.pos);
        if (dist > maxDist) {
          continue;
        }
        if (dist < minDist || minT === null) {
          minDist = dist;
          minT = t;
        }
      }
    }
    return minT;
  };

  goThere = function(unit, thing) {
    if (!thing) {
      return false;
    }
    goInRange(thing.radius * .5, thing.radius, unit, thing);
    return true;
  };

  stayInRange = function(range, unit, thing) {
    if (!thing) {
      return false;
    }
    g = v2.create();
    v2.sub(unit.pos, thing.pos, g);
    v2.norm(g);
    v2.scale(g, range);
    v2.add(g, thing.pos, g);
    return unit.aiOrder({
      type: "Move",
      dest: g
    });
  };

  goInRange = function(spread, range, unit, thing) {
    if (!thing) {
      return false;
    }
    if (v2.distance(unit.pos, thing.pos) < range) {
      return true;
    }
    if (unit.topOrderIs("Move") && v2.distance(unit.orders[0].dest, thing.pos) < spread) {
      return true;
    }
    r = v2.create();
    v2.random(r);
    v2.scale(r, spread * Math.random());
    v2.add(r, thing.pos);
    unit.aiOrder({
      type: "Move",
      dest: r
    });
    return true;
  };

  goAway = function(unit, thing, range) {
    var dest, dist;
    if (!thing || !thing.pos || !unit || !unit.pos) {
      return false;
    }
    dist = v2.distance(unit.pos, thing.pos);
    if (dist > range) {
      return false;
    }
    dest = v2.create();
    v2.sub(unit.pos, thing.pos, dest);
    v2.add(unit.pos, dest, dest);
    unit.aiOrder({
      type: "Move",
      dest: dest,
      range: 0
    });
    return true;
  };

  unitCompair = function(unit, enemy) {
    var enemyKillsIn, unitKillsIn;
    enemyKillsIn = unit.hp / enemy.weaponDPS;
    unitKillsIn = enemy.hp / unit.weaponDPS;
    if (unitKillsIn > enemyKillsIn) {
      return enemyKillsIn / unitKillsIn - 1;
    } else {
      return 1 - unitKillsIn / enemyKillsIn;
    }
  };

  willBeAt = function(unit, thing) {
    if (!thing || !unit || unit.dead) {
      return false;
    }
    if (unit.topOrderIs("Move")) {
      if (unit.orders[0].dest && v2.distance(unit.orders[0].dest, thing.pos) < thing.radius) {
        return true;
      }
    } else if (unit.topOrderIs("Follow")) {
      if (unit.orders[0].target && v2.distance(unit.orders[0].target.pos, thing.pos) < thing.radius) {
        return true;
      }
    } else {
      if (v2.distance(unit.pos, thing.pos) < thing.radius) {
        return true;
      }
    }
    return false;
  };

  spreadCapCP = function(unit, rule) {
    var closestUnguarded, cp, guarded, ref, ref1, tallyCps, u;
    if (unit.gardingCP && (unit.gardingCP.side !== unit.side || unit.gardingCP.capping > 0)) {
      goThere(unit, unit.gardingCP);
      return true;
    }
    tallyCps = [];
    ref = sim.things;
    for (_ in ref) {
      cp = ref[_];
      if (cp.commandPoint && (cp.side !== unit.side || cp.capping > 0)) {
        guarded = 0;
        ref1 = sim.things;
        for (_ in ref1) {
          u = ref1[_];
          if (u.unit && u.side === unit.side && u.id !== unit.id && u.number === unit.number) {
            if (u.gardingCP === cp) {
              guarded += 1;
            }
          }
        }
        tallyCps.push({
          cp: cp,
          dist: v2.distance(cp.pos, unit.pos),
          guarded: guarded
        });
      }
    }
    if (tallyCps.length === 0) {
      return false;
    }
    tallyCps.sort(function(a, b) {
      if (a.guarded !== b.guarded) {
        return a.guarded - b.guarded;
      } else {
        return a.dist - b.dist;
      }
    });
    closestUnguarded = tallyCps[0];
    goThere(unit, closestUnguarded.cp);
    unit.gardingCP = closestUnguarded.cp;
    return true;
  };

  capAndGuardCP = function(unit) {
    var closestUnguarded, cp, guarded, ref, ref1, tallyCps, u;
    tallyCps = [];
    ref = sim.things;
    for (_ in ref) {
      cp = ref[_];
      if (cp.commandPoint) {
        guarded = false;
        ref1 = sim.things;
        for (_ in ref1) {
          u = ref1[_];
          if (u.unit && u.side === unit.side && u.id !== unit.id && u.number === unit.number) {
            if (willBeAt(u, cp)) {
              guarded = true;
              break;
            }
          }
        }
        if (!guarded) {
          tallyCps.push({
            cp: cp,
            dist: v2.distance(cp.pos, unit.pos)
          });
        }
      }
    }
    if (tallyCps.length === 0) {
      return;
    }
    tallyCps.sort(function(a, b) {
      return a.dist - b.dist;
    });
    closestUnguarded = tallyCps[0];
    goThere(unit, closestUnguarded.cp);
    return true;
  };

  attack = function(enemy, unit) {
    if (enemy) {
      unit.aiOrder({
        type: "Follow",
        targetId: enemy.id
      });
      unit.softTarget = enemy;
      return true;
    }
  };

  kite = function(enemy, unit) {
    var distacne, w;
    if (!enemy) {
      return false;
    }
    w = unit.weapons[0];
    if (w) {
      distacne = v2.distance(enemy.pos, unit.pos);
      if (w.arc !== 360 && w.reload === 0 && distacne < unit.weaponRange) {
        return true;
      }
    }
    if (stayInRange(unit.weaponRange, unit, enemy)) {
      return true;
    }
  };

  ram = function(enemy, unit) {
    if (enemy && goInRange(0, unit.radius + enemy.radius, unit, enemy)) {
      return true;
    }
  };

  run_by = function(enemy, unit) {
    return gotoNoStop(unit, enemy.pos);
  };

  stayClose = function(enemy, unit) {
    if (enemy && goInRange(0, enemy.radius, unit, enemy)) {
      return true;
    }
  };

  _angleVec = v2.create();

  _leftVec = v2.create();

  _rightVec = v2.create();

  circle = function(enemy, unit) {
    var dist, k, range, th;
    v2.direction(unit.pos, enemy.pos, _angleVec);
    dist = v2.distance(unit.pos, enemy.pos);
    range = Math.max(enemy.weaponRange, 300);
    k = 3;
    th = v2.angle(_angleVec);
    v2.pointTo(_leftVec, th + Math.PI / 2);
    v2.scale(_leftVec, range * k);
    v2.pointTo(_rightVec, th - Math.PI / 2);
    v2.scale(_rightVec, range * k);
    v2.add(_leftVec, enemy.pos);
    v2.add(_rightVec, enemy.pos);
    v2.add(unit.pos, unit.vel, _angleVec);
    if (v2.distance(_angleVec, _leftVec) < v2.distance(_angleVec, _rightVec)) {
      unit.aiOrder({
        type: "Move",
        dest: _leftVec
      });
    } else {
      unit.aiOrder({
        type: "Move",
        dest: _rightVec
      });
    }
    return true;
  };

  _backPos = v2.create();

  backstab = function(enemy, unit, amount) {
    if (amount == null) {
      amount = 0.7;
    }
    v2.pointTo(_backPos, enemy.rot + Math.PI);
    v2.scale(_backPos, unit.weaponRange * amount);
    v2.add(_backPos, enemy.pos);
    return unit.aiOrder({
      type: "Move",
      dest: v2.create(_backPos)
    });
  };

  attackFilter = function(enemy, unit, type, range) {
    if (!enemy) {
      return false;
    }
    if (!enemy.unit) {
      return false;
    }
    if (enemy.side === unit.side) {
      return false;
    }
    if (enemy.cloakFade > 0) {
      type = type.toLowerCase();
      if (type === "ram" || type === "circle" || type === "flee") {
        return true;
      }
      return false;
    }
    return true;
  };

  attackMoves = function(enemy, unit, type, range) {
    var wiggle;
    if (!enemy) {
      return false;
    }
    switch (type.toLowerCase()) {
      case "attack":
        return attack(enemy, unit);
      case "flee":
        return goAway(unit, enemy, enemy.weaponRange + enemy.radius + enemy.maxSpeed * 16);
      case "kite":
        return kite(enemy, unit);
      case "ram":
        return ram(enemy, unit);
      case "run-by":
        if (v2.distance(enemy.pos, unit.pos) > 500) {
          return run_by(enemy, unit);
        } else {
          return true;
        }
        break;
      case "bomb":
        if (unit.energy < unit.moveEnergy * 160) {
          return false;
        }
        if (unit.weapons.length > 0 && unit.weapons[0].reload > unit.weapons[0].reloadTime * .5) {
          unit.message += "[coast]";
          return true;
        } else {
          unit.message += "[run-by]";
          run_by(enemy, unit);
          return true;
        }
        break;
      case "circle":
        return circle(enemy, unit);
      case "backstab":
        return backstab(enemy, unit);
      case "wiggle":
        if (unit.wiggling > 0) {
          unit.wiggling -= 1;
          return true;
        } else if (Math.random() < .2) {
          unit.wiggling = 2;
          wiggle = v2.create();
          v2.random(wiggle);
          v2.scale(wiggle, 1000);
          v2.add(wiggle, unit.pos);
          unit.aiOrder({
            type: "Move",
            dest: wiggle
          });
          return true;
        }
        break;
      case "stay at range":
        return goAway(unit, enemy, enemy.weaponRange + enemy.radius + unit.radius);
    }
  };

  gotoNoStop = function(unit, goto) {
    var go;
    v2.sub(goto, unit.pos, _next);
    v2.scale(_next, 10000 / v2.mag(_next));
    go = v2.create();
    v2.add(unit.pos, _next, go);
    return unit.aiOrder({
      type: "Move",
      dest: go,
      noStop: true
    });
  };

  _goto = v2.create();

  _next = v2.create();

  gotoNoStopSmooth = function(unit, goto) {
    var dest, i, l;
    v2.sub(_goto, unit.pos, _next);
    v2.scale(_next, 10000 / v2.mag(_next));
    v2.add(unit.pos, _next, _goto);
    if (unit.topOrderIs("Move")) {
      dest = v2.create();
      for (i = l = 0; l < 1; i = ++l) {
        dest[i] = unit.orders[0].dest[i] * .7 + _goto[i] * .3;
      }
      return unit.aiOrder({
        type: "Move",
        dest: dest,
        noStop: true
      });
    } else {
      return unit.aiOrder({
        type: "Move",
        dest: v2.create(_goto),
        noStop: true
      });
    }
  };

  capAI = function(unit, rule) {
    var cp;
    switch (rule[1].toLowerCase()) {
      case "capture":
        cp = closest(unit.pos, (function(t) {
          return t.commandPoint && (t.side !== unit.side || t.capping > 0);
        }), rule[2]);
        if (cp && goThere(unit, cp)) {
          return true;
        }
        break;
      case "spread to":
        if (spreadCapCP(unit, rule, rule[2])) {
          return true;
        }
        break;
      case "guard":
        if (capAndGuardCP(unit, rule, rule[2])) {
          return true;
        }
        break;
      case "protect":
        cp = closest(unit.pos, (function(t) {
          return t.commandPoint && t.side === unit.side && t.capping > 0;
        }), rule[2]);
        if (cp && goThere(unit, cp)) {
          return true;
        }
        break;
      default:
        return console.log("invalid capAI option", rule);
    }
  };

  chargeAI = function(unit, rule) {
    var enemy, filter, friendly, recharger;
    if (!unit.needsFullCharge && unit.energy / unit.storeEnergy < rule[1] / 100) {
      switch (rule[2].toLowerCase()) {
        case "find recharger":
          filter = function(t) {
            return t.unit && t.id !== unit.id && t.side === unit.side && t.energyCaster;
          };
          recharger = closest(unit.pos, filter);
          if (recharger) {
            if (v2.distance(unit.pos, recharger.pos) < 600) {
              unit.needsFullCharge = true;
            } else {
              goInRange(500, 600, unit, recharger);
              return true;
            }
          }
          return false;
        case "rest":
          unit.needsFullCharge = true;
          break;
        case "flee enemies":
          enemy = closest(unit.pos, (function(t) {
            return t.unit && t.side !== unit.side;
          }), 3000);
          if (attackMoves(enemy, unit, "flee", 3000)) {
            return true;
          }
          break;
        case "return to spawn":
          if (gotoLocation(unit, ["-", "friendly spawn"])) {
            return true;
          } else {
            unit.needsFullCharge = true;
          }
          break;
        case "find friendlies":
        case "find friendies":
          friendly = closest(unit.pos, (function(t) {
            return t.unit && t.id !== unit.id && t.side === unit.side;
          }));
          if (friendly && v2.distance(unit.pos, friendly.pos) > 500) {
            stayClose(friendly, unit);
            return true;
          }
          break;
        default:
          console.log("invalid chargeAI option", rule);
      }
    }
    if (unit.needsFullCharge) {
      if (unit.energy > unit.storeEnergy * .98) {
        unit.needsFullCharge = false;
        return false;
      } else {
        unit.aiOrder({
          type: "Stop"
        });
        return true;
      }
    }
  };

  _mid = v2.create();

  thingsMiddle = function(fn) {
    var number, ref, thing;
    v2.zero(_mid);
    number = 0;
    ref = sim.things;
    for (_ in ref) {
      thing = ref[_];
      if (fn(thing)) {
        v2.add(_mid, thing.pos);
        number += 1;
      }
    }
    if (number === 0) {
      return false;
    }
    v2.scale(_mid, 1 / number);
    return _mid;
  };

  gotoLocation = function(unit, rule) {
    var cp, pos, spawn;
    pos = null;
    switch (rule[1].toLowerCase()) {
      case "enemy spawn":
        spawn = closest(unit.pos, (function(t) {
          return t.spawn && t.side !== unit.side;
        }));
        if (spawn) {
          pos = spawn.pos;
        }
        break;
      case "friendly spawn":
        spawn = closest(unit.pos, (function(t) {
          return t.spawn && t.side === unit.side;
        }));
        if (spawn) {
          pos = spawn.pos;
        }
        break;
      case "enemy home point":
        spawn = closest(unit.pos, (function(t) {
          return t.spawn && t.side !== unit.side;
        }));
        if (spawn) {
          cp = closest(spawn.pos, (function(t) {
            return t.commandPoint;
          }));
        }
        if (cp) {
          pos = cp.pos;
        }
        break;
      case "friendly home point":
        spawn = closest(unit.pos, (function(t) {
          return t.spawn && t.side === unit.side;
        }));
        if (spawn) {
          cp = closest(spawn.pos, (function(t) {
            return t.commandPoint;
          }));
        }
        if (cp) {
          pos = cp.pos;
        }
        break;
      case "enemy army middle":
        pos = thingsMiddle(function(t) {
          return t.unit && t.side !== unit.side;
        });
        break;
      case "friendly army middle":
        pos = thingsMiddle(function(t) {
          return t.unit && t.side === unit.side;
        });
    }
    if (pos) {
      if (v2.distance(unit.pos, pos) > 300) {
        unit.aiOrder({
          type: "Move",
          dest: pos
        });
        return true;
      }
    }
  };

  ifRelative = function(clause, unit, other) {
    var l, len1, len2, m, ref, ref1, w;
    switch (clause.toLowerCase()) {
      case "---":
        return true;
      case "stronger":
        return unitCompair(unit, other) <= 0;
      case "weaker":
        return unitCompair(unit, other) >= 0;
      case "faster":
        return other.maxSpeed >= unit.maxSpeed;
      case "slower":
        return other.maxSpeed <= unit.maxSpeed;
      case "more range":
        return other.weaponRange >= unit.weaponRange;
      case "less range":
        return other.weaponRange <= unit.weaponRange;
      case "more hp":
        return other.hp >= unit.hp;
      case "less hp":
        return other.hp <= unit.hp;
      case "more expensive":
        return other.cost >= unit.cost;
      case "less expensive":
        return other.cost <= unit.cost;
      case "has pd":
        ref = other.weapons;
        for (l = 0, len1 = ref.length; l < len1; l++) {
          w = ref[l];
          if (w.hitsMissiles) {
            return true;
          }
        }
        return false;
      case "no pd":
        ref1 = other.weapons;
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          w = ref1[m];
          if (w.hitsMissiles) {
            return false;
          }
        }
        return true;
      case "cloaked":
        return other.cloaked();
      case "not cloaked":
        return !other.cloaked();
      case "more dps":
        return other.weaponDPS >= unit.weaponDPS;
      case "less dps":
        return other.weaponDPS <= unit.weaponDPS;
      case "more brawling value":
        return other.hp * other.weaponDPS / other.cost >= unit.hp * unit.weaponDPS / unit.cost;
      case "less brawling value":
        return other.hp * other.weaponDPS / other.cost <= unit.hp * unit.weaponDPS / unit.cost;
      case "armed":
        return other.weaponDPS >= 0.01;
      case "unarmed":
        return other.weaponDPS <= 0;
      default:
        return console.log("clause not defined", clause);
    }
  };

  ifAbsolute = function(clause, value, unit) {
    switch (clause.toLowerCase()) {
      case "---":
        return true;
      case "faster":
        return unit.maxSpeed * 16 >= value;
      case "slower":
        return unit.maxSpeed * 16 <= value;
      case "more range":
        return unit.weaponRange >= value;
      case "less range":
        return unit.weaponRange <= value;
      case "more hp":
        return unit.hp >= value;
      case "less hp":
        return unit.hp <= value;
      case "more expensive":
        return unit.cost >= value;
      case "less expensive":
        return unit.cost <= value;
      case "more dps":
        return unit.weaponDPS * 16 >= value;
      case "less dps":
        return unit.weaponDPS * 16 <= value;
      case "more arc":
        return unit.weaponArc >= value;
      case "less arc":
        return unit.weaponArc <= value;
      default:
        return console.log("clause not defined", clause);
    }
  };

  counterNeed = function(needType, player) {
    var l, len1, need, part, ref, ref1, ref2, ref3, u;
    need = 0;
    switch (needType.toLowerCase()) {
      case "point defense need":
        ref = sim.things;
        for (_ in ref) {
          u = ref[_];
          if (u.unit && u.side !== player.side) {
            ref1 = u.parts;
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              part = ref1[l];
              if (part.weapon && part.bulletCls.prototype.missile) {
                need += part.dps;
              }
            }
          }
        }
        break;
      case "fighter counter need":
        ref2 = sim.things;
        for (_ in ref2) {
          u = ref2[_];
          if (u.unit && u.side !== player.side) {
            if (u.maxHP < 100 && u.maxSpeed * 16 > 200) {
              need += .25;
            }
          }
        }
        break;
      case "cloak counter need":
        ref3 = sim.things;
        for (_ in ref3) {
          u = ref3[_];
          if (u.unit && u.side !== player.side) {
            if (u.cloaked()) {
              need += 1;
            }
          }
        }
    }
    return need;
  };

  _rvec = v2.create();

  _lvec = v2.create();

  _upos = v2.create();

  _uvec = v2.create();

  _avec = v2.create();

  _apos = v2.create();

  _aAvgPos = v2.create();

  _avoidVec = v2.create();

  ais.avoidShots = function(unit, avoidDamage, bulletType) {
    v2.zero(_avoidVec);
    sim.bulletSpaces[otherSide(unit.side)].findInRange(unit.pos, unit.radius + 500, (function(_this) {
      return function(b) {

        /*
         * insta hit weapons
        if b.unit and b.side != unit.side
            for w in b.weapons
                if w.instant
                    if w.damage < avoidDamage
                        continue
                    if w.target and w.target != unit
                         * weapon is targeting other unit
                        continue
                    v2.sub(unit.pos, w.worldPos, _avec)
                    if v2.mag(_avec) < w.range * 1.2
                         * avoid insta hit weapon
                        v2.norm(_avec)
                        v2.add(_avoidVec, _avec)
         */
        var i, l, ref, ref1, results;
        if (b.damage < avoidDamage) {
          return;
        }
        if (bulletType === "PD immune" && b.missile) {
          return;
        }
        if (b.missile && b.tracking && ((ref = b.target) != null ? ref.id : void 0) === unit.id) {
          v2.sub(unit.pos, b.pos, _avec);
          if (v2.mag(_avec) < 600) {
            v2.norm(_avec);
            return v2.add(_avoidVec, _avec);
          }
        } else if (b.hitPos) {
          v2.sub(unit.pos, b.hitPos, _avec);
          if (v2.mag(_avec) < b.aoe + unit.radius + 100) {
            v2.norm(_avec);
            return v2.add(_avoidVec, _avec);
          }
        } else {
          v2.sub(unit.pos, b.pos, _avec);
          if (v2.mag(_avec) < unit.radius + (b.maxLife - b.life) * b.speed) {
            v2.set(unit.pos, _upos);
            v2.set(unit.vel, _uvec);
            v2.set(b.pos, _apos);
            v2.set(b.vel, _avec);
            results = [];
            for (i = l = 0, ref1 = Math.min(64, b.maxLife - b.life); 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
              if (v2.distance(_upos, _apos) < unit.radius + 100) {
                v2.sub(_apos, _upos, _avec);
                v2.pointTo(_lvec, unit.rot + .3);
                v2.pointTo(_rvec, unit.rot - .3);
                if (v2.distance(_lvec, _avec) > v2.distance(_rvec, _avec)) {
                  results.push(v2.add(_avoidVec, _lvec));
                } else {
                  results.push(v2.add(_avoidVec, _rvec));
                }
              } else {
                v2.add(_upos, _uvec);
                results.push(v2.add(_apos, _avec));
              }
            }
            return results;
          }
        }
      };
    })(this));
    if (v2.mag(_avoidVec) > .1) {
      v2.scale(_avoidVec, 10);
      v2.add(_avoidVec, unit.pos, _apos);
      gotoNoStopSmooth(unit, _apos);
      return true;
    }
    return false;
  };

  window.doPlayerAIRules = function(player) {
    var b, buildPriority, buildQ, countsFielded, countsTotal, enemyHave, enemysFielded, l, len1, len2, len3, len4, m, myUnits, need, number, o, otherSlot, p, priorityBuild, ratio, ref, ref1, ref2, results, rule, rules, start, type, u, unit;
    if (sim.serverType === "1v1t") {
      return;
    }
    countsTotal = 0;
    enemysFielded = {};
    countsFielded = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    ref = sim.things;
    for (_ in ref) {
      u = ref[_];
      if (u.unit && u.owner === player.number && u.side === player.side) {
        countsFielded[u.number] += 1;
        countsTotal += 1;
      }
      if (u.unit && u.owner !== player.number && u.side !== player.side) {
        type = ais.classifyShip(u);
        enemysFielded[type] = (enemysFielded[type] || 0) + 1;
      }
    }
    buildQ = [];
    buildPriority = [];
    priorityBuild = function(need, priority, number) {
      var i, l, ref1, results;
      if (need > 100) {
        need = 100;
      }
      results = [];
      for (i = l = 0, ref1 = need; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
        results.push(buildPriority.push({
          number: number,
          priority: priority + Math.random() * .1
        }));
      }
      return results;
    };
    ref1 = player.aiRules;
    for (number = l = 0, len1 = ref1.length; l < len1; number = ++l) {
      rules = ref1[number];
      for (m = 0, len2 = rules.length; m < len2; m++) {
        rule = rules[m];
        switch (rule[0].toLowerCase()) {
          case "field # at priority #":
            need = rule[1] - countsFielded[number];
            if (need > 0) {
              priorityBuild(need, rule[2], number);
            }
            break;
          case "field # for # of enemy * at priority #":
            ratio = rule[1] / rule[2];
            enemyHave = enemysFielded[rule[3]] || 0;
            need = Math.floor(enemyHave * ratio) - countsFielded[number];
            if (need > 0) {
              priorityBuild(need, rule[4], number);
            }
            break;
          case "field # for # of ship in slot # at priority #":
            ratio = rule[1] / rule[2];
            otherSlot = parseInt(rule[3]) - 1;
            need = Math.floor(countsFielded[otherSlot] * ratio) - countsFielded[number];
            if (need > 0) {
              priorityBuild(need, rule[4], number);
            }
            break;
          case "try to field # every # seconds":
            if (sim.step !== 0 && sim.step % (rule[2] * 16) === 0) {
              need = rule[1];
              priorityBuild(need, 0, number);
            }
            break;
          case "field # at start":
            if (sim.step < 16 * 5) {
              need = rule[1] - countsFielded[number];
              priorityBuild(need, 0, number);
            }
            break;
          case "field # for # of @needtypes at priority #":
            ratio = rule[1] / rule[2] * counterNeed(rule[3], player);
            need = Math.floor(ratio - countsFielded[number]);
            if (need > 0) {
              priorityBuild(need, rule[4], number);
            }
            break;
          case "field # when money over # at priority #":
            if (player.money > rule[2]) {
              priorityBuild(rule[1], rule[3], number);
            }
        }
      }
    }
    buildPriority.sort(function(a, b) {
      return a.priority - b.priority;
    });
    for (o = 0, len3 = buildPriority.length; o < len3; o++) {
      b = buildPriority[o];
      buildQ.push(b.number);
    }
    if (buildQ.length !== 0) {
      player.buildQ = buildQ;
    }
    myUnits = [];
    ref2 = sim.things;
    for (_ in ref2) {
      unit = ref2[_];
      if (unit.underPlayerControl) {
        unit.message = "";
        continue;
      }
      if (unit.unit && unit.owner === player.number) {
        myUnits.push(unit);
      }
    }
    start = now();
    myUnits = shuffle(myUnits);
    results = [];
    for (p = 0, len4 = myUnits.length; p < len4; p++) {
      unit = myUnits[p];
      doUnitAi(unit, player.aiRules[unit.number], player);
      if (now() - start > 2) {
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  doUnitAi = function(unit, rules, player) {
    var l, len1, results, rule, used;
    unit.message = "";
    if (unit.wait && unit.wait > 0) {
      unit.wait -= 1;
      return;
    }
    if (rules.length) {
      results = [];
      for (l = 0, len1 = rules.length; l < len1; l++) {
        rule = rules[l];
        used = false;
        used = doUnitRules(unit, rule, player);
        if (used) {
          unit.message += ais.ruleToStr(rule);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  doUnitRules = function(unit, rule, player) {
    var clause, clause1, clause2, enemy, filter, friendly, range, target, type, value;
    switch (rule[0].toLowerCase()) {
      case "@captypes command points within #m":
        return capAI(unit, rule);
      case "@attacktypes enemy within #m":
        range = rule[2];
        filter = function(t) {
          return attackFilter(t, unit, rule[1], rule[2]);
        };
        enemy = closest(unit.pos, filter, range);
        if (attackMoves(enemy, unit, rule[1], rule[2])) {
          return true;
        }
        break;
      case "@attacktypes enemy @unittypes within #m":
        range = rule[3];
        filter = function(t) {
          if (!attackFilter(t, unit, rule[1], rule[2])) {
            return false;
          }
          return ais.classifyShip(t) === rule[2];
        };
        enemy = closest(unit.pos, filter, range);
        if (attackMoves(enemy, unit, rule[1], rule[2])) {
          return true;
        }
        break;
      case "@attacktypes enemy that is @relativetypes and @relativetypes within #m":
        type = rule[1];
        clause1 = rule[2];
        clause2 = rule[3];
        range = rule[4];
        filter = function(t) {
          if (!attackFilter(t, unit, rule[1], rule[2])) {
            return false;
          }
          return ifRelative(clause1, unit, t) && ifRelative(clause2, unit, t);
        };
        enemy = closest(unit.pos, filter, range);
        if (attackMoves(enemy, unit, type, range)) {
          return true;
        }
        break;
      case "@attacktypes enemy that is @absolutetypes then # within #m":
        type = rule[1];
        clause = rule[2];
        value = rule[3];
        range = rule[4];
        filter = function(t) {
          if (!attackFilter(t, unit, rule[1], rule[2])) {
            return false;
          }
          return ifAbsolute(clause, value, t);
        };
        enemy = closest(unit.pos, filter, range);
        if (attackMoves(enemy, unit, type, range)) {
          return true;
        }
        break;
      case "find units that are out of energy":
        target = closest(unit.pos, function(t) {
          return t.unit && t.id !== unit.id && t.side === unit.side && t.energy < t.storeEnergy * .75;
        });
        if (target) {
          goInRange(500, 600, unit, target);
          return true;
        }
        break;
      case "when #% of energy, @chargetypes":
        return chargeAI(unit, rule);
      case "when below #% cloak, rest":
        if (unit.cloak / unit.mass < rule[1] / 100 || unit.needsCloak) {
          if (unit.cloak < unit.mass) {
            unit.needsCloak = true;
            unit.aiOrder({
              type: "Stop"
            });
            return true;
          } else {
            return unit.needsCloak = false;
          }
        }
        break;
      case "when shields down to #%, flee":
        if (unit.shield / unit.maxShield < rule[1] / 100) {
          enemy = closest(unit.pos, (function(t) {
            return t.unit && t.side !== unit.side;
          }));
          if (enemy) {
            goAway(unit, enemy, enemy.weaponRange * 1.5);
            return true;
          }
        }
        break;
      case "stay in #m range of friendly units":
        friendly = closest(unit.pos, (function(t) {
          return t.unit && t.id !== unit.id && t.side === unit.side;
        }));
        if (friendly && v2.distance(unit.pos, friendly.pos) > rule[1]) {
          stayClose(friendly, unit);
          return true;
        }
        break;
      case "stay in #m range of slot # units":
        friendly = closest(unit.pos, (function(t) {
          return t.unit && t.number === (parseInt(rule[2]) - 1) && t.id !== unit.id && t.side === unit.side && t.owner === unit.owner;
        }));
        if (friendly && v2.distance(unit.pos, friendly.pos) > rule[1]) {
          stayClose(friendly, unit);
          return true;
        }
        break;
      case "stayaway in #m range from slot # units":
        friendly = closest(unit.pos, (function(t) {
          return t.unit && t.number === (parseInt(rule[2]) - 1) && t.id !== unit.id && t.side === unit.side && t.owner === unit.owner;
        }));
        if (friendly && goAway(unit, friendly, rule[1])) {
          return true;
        }
        break;
      case "goto @locationtypes":
        return gotoLocation(unit, rule);
      case "avoid everything":
        if (ais.avoidShots(unit, 1, "Any") || ais.avoidEnemies(unit, 1)) {
          return true;
        }
        break;
      case "avoid #dps danger areas":
        if (ais.avoidEnemies(unit, rule[1])) {
          return true;
        }
        break;
      case "avoid over #damage @bullettypes shots":
        if (ais.avoidShots(unit, rule[1], rule[2])) {
          return true;
        }
        break;
      case "avoid over #damage shots":
        if (ais.avoidShots(unit, rule[1], "any")) {
          return true;
        }
        break;
      case "finish player orders":
        if (unit.hasHumanOrder()) {
          if (unit.orders[0].ai) {
            unit.orders.shift();
          }
          return true;
        }
        return false;
    }
  };

  ais.avoidEnemies = function(unit, dps) {
    var doWhat, minDist, minEnemy, stayAwayRange;
    minDist = 9000000;
    minEnemy = null;
    doWhat = null;
    stayAwayRange = 0;
    sim.unitSpaces[otherSide(unit.side)].findInRange(unit.pos, 3000, (function(_this) {
      return function(enemy) {
        var dist;
        if (enemy.weaponDPS * 16 > dps) {
          dist = v2.distance(unit.pos, enemy.pos);
          if (dist < minDist) {
            stayAwayRange = enemy.weaponRange + enemy.radius + unit.radius + enemy.maxSpeed * 16;
            if (dist < stayAwayRange) {
              minDist = dist;
              minEnemy = enemy;
              return doWhat = "Flee";
            } else if (dist < stayAwayRange * 1.10) {
              minDist = dist;
              minEnemy = enemy;
              return doWhat = "Stop";
            }
          }
        }
      };
    })(this));
    if (doWhat === "Flee") {
      goAway(unit, minEnemy, stayAwayRange);
      return true;
    }
    if (doWhat === "Stop") {
      unit.aiOrder({
        type: "Stop"
      });
      return true;
    }
  };

  ais.classifyShip = function(unit) {
    var rymarq_system, saktoth_system;
    if (unit.shipClass != null) {
      return unit.shipClass;
    }
    rymarq_system = function() {
      var k, l, len1, list, part, ref, type, v;
      type = {};
      if (unit.weapons.length === 0) {
        type.brick = (unit.hp + unit.shield) * 2;
        type.scout = unit.maxSpeed * 16 * 2;
      } else {
        if (unit.cost < 150) {
          type.swarmer = (210 - unit.cost) * 5;
        }
        if (unit.maxSpeed * 16 > 200 && unit.weaponDPS * 16 > 20) {
          type.fighter = unit.weaponDPS * 16 * 6 + unit.maxSpeed * 16 * 1.5 + (unit.hp + unit.shield);
        }
        if (unit.weaponDamage >= 200) {
          type.bomber = unit.weaponDamage * 4 + unit.maxSpeed * 16 * 0.5 - 100;
          ref = unit.parts;
          for (l = 0, len1 = ref.length; l < len1; l++) {
            part = ref[l];
            if (part.name === "Phase Bomb Launcher") {
              type.bomber += 100;
            }
          }
        }
        if (unit.maxSpeed * 16 > 400) {
          type.interceptor = unit.weaponDPS * 16 * 2 + unit.maxSpeed * 16 * 3 + unit.weaponDamage * 2 - 20;
        }
        if (unit.weaponRange > 500 && unit.cost > 150) {
          type.destroyer = unit.maxSpeed * 16 * 3 + unit.weaponRange * 3 - 700;
        }
        if (unit.maxSpeed * 16 > 100) {
          type.cruiser = unit.maxSpeed * 16 * 1.5 + unit.weaponDPS * 16 * 3 + (unit.hp + unit.shield * 2) * 2;
        }
        if (unit.hp > 500) {
          type.battleship = (unit.hp + unit.shield) * 2 + unit.weaponRange * 3 - 700;
        }
      }
      if (unit.energyCaster) {
        type.carrier = 200 + unit.genEnergy * 16 * 10 + unit.storeEnergy / 800;
      }
      type.support = 10;
      list = (function() {
        var results;
        results = [];
        for (k in type) {
          v = type[k];
          results.push([Math.floor(v), k]);
        }
        return results;
      })();
      list = list.sort(function(a, b) {
        return b[0] - a[0];
      });
      return list[0][1];
    };
    saktoth_system = function() {
      var ref, ref1;
      if (unit.weaponDPS === 0) {
        return "scout";
      }
      if (unit.turnSpeed * 16 > .7 && unit.weaponRange > 700) {
        if (unit.maxSpeed * 16 > 300) {
          return "destroyer";
        } else {
          return "cruiser";
        }
      }
      if ((400 < (ref = unit.maxSpeed * 16) && ref < 600)) {
        return "interceptor";
      }
      if ((250 < (ref1 = unit.maxSpeed * 16) && ref1 < 400)) {
        return "fighter";
      }
      if (unit.energyCaster) {
        return "carrier";
      }
      if (unit.cost > 800 || unit.hp > 1000) {
        return "battleship";
      }
      if (unit.weaponDPS * 16 > 370) {
        return "godslayer";
      }
      return "unknown";
    };
    unit.shipClass = rymarq_system();
    return unit.shipClass;
  };

  ais.useAiFleet = function(aiName, side, aiBuildBar) {
    var color, i, l, len1, player, u;
    if (!aiName) {
      return;
    }
    if (side === "beta") {
      color = [46, 204, 113, 255];
    } else {
      color = [230, 126, 34, 255];
    }
    for (i = l = 0, len1 = aiBuildBar.length; l < len1; i = ++l) {
      u = aiBuildBar[i];
      if (typeof u === "object") {
        aiBuildBar[i] = JSON.stringify(u);
      }
    }
    player = sim.playerJoin("", "ai" + rid(), aiName, color, aiBuildBar, ais.buildBar2aiRules(aiBuildBar), true);
    player.side = side;
    player.afk = false;
    player.connected = true;
    player.ready = true;
    player.ai = true;
    return player;
  };

  ais.useAi = function(aiName, side) {
    if (side == null) {
      side = "beta";
    }
    if (!aiName) {
      return;
    }
    return ais.useAiFleet(aiName, side, ais.all[aiName]);
  };

  ais.buildBar2aiRules = function(buildBar) {
    var aiRules, data, l, len1, unitSpec;
    aiRules = [];
    for (l = 0, len1 = buildBar.length; l < len1; l++) {
      unitSpec = buildBar[l];
      if (unitSpec && unitSpec[0] === "{") {
        data = JSON.parse(unitSpec);
        if (data.aiRules) {
          aiRules.push(data.aiRules);
          continue;
        }
      }
      if (typeof unitSpec === "object") {
        aiRules.push(unitSpec.aiRules);
        continue;
      }
      aiRules.push([]);
    }
    return aiRules;
  };

  ais.simulateUnitFight = function(specA, specB) {
    var a, b, i, l, oldSim, ref;
    a = new types.Unit(specA);
    b = new types.Unit(specB);
    oldSim = window.sim;
    window.sim = new Sim();
    sim.local = true;
    a.pos = [0, 0];
    b.pos = [0, 100];
    a.side = "alpha";
    b.side = "beta";
    sim.things[a.id] = a;
    sim.things[b.id] = b;
    for (i = l = 0, ref = 16 * 10; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
      sim.simulate();
      console.log(i, a.hp, b.hp);
      if (a.dead || b.dead) {
        break;
      }
    }
    console.log(sim);
    window.sim = oldSim;
    if (a.hp > b.hp) {
      return true;
    }
  };

  ais.simulateAiFight = function(ai1, ai2) {
    var fightSim, i, id, l, oldSim, player1, player2, ref, ref1, sides, thing;
    oldSim = window.sim;
    fightSim = window.sim = new Sim();
    sim.local = true;
    player1 = ais.useAi(ai1, "alpha");
    player2 = ais.useAi(ai2, "beta");
    sim.start();
    for (i = l = 0, ref = 16 * (60 * 15); 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
      sim.simulate();
      if (sim.step % 16 === 0) {
        sides = {
          "alpha": 0,
          "beta": 0
        };
        ref1 = sim.things;
        for (id in ref1) {
          thing = ref1[id];
          if (thing.commandPoint) {
            sides[thing.side] += 1;
          }
        }
      }
      if (sim.winningSide) {
        break;
      }
    }
    console.log("ends at", sim.step, "winner:", sim.winningSide, window.sim = oldSim);
    if (fightSim.winningSide === "alpha") {
      return 1;
    } else if (fightSim.winningSide === "beta") {
      return -1;
    } else {
      return 0;
    }
  };

  ais.winMatrix = function() {
    var ai, header, i, k1, k2, l, len1, len2, len3, list, m, o, p, row, score, table, vsScore, wins;
    list = (function() {
      var results;
      results = [];
      for (ai in ais.all) {
        if (ai !== "StaticAI" && ai !== "BossAI") {
          results.push(ai);
        }
      }
      return results;
    })();
    console.log(list);
    header = [""];
    for (l = 0, len1 = list.length; l < len1; l++) {
      k1 = list[l];
      header.push(k1);
    }
    header.push("wins");
    table = [header];
    vsScore = {};
    for (m = 0, len2 = list.length; m < len2; m++) {
      k1 = list[m];
      row = [k1];
      table.push(row);
      wins = 0;
      for (o = 0, len3 = list.length; o < len3; o++) {
        k2 = list[o];
        if (k1 === k2) {
          row.push("-");
        } else if (vsScore[k2 + "v" + k1] != null) {
          wins -= vsScore[k2 + "v" + k1];
          row.push(-vsScore[k2 + "v" + k1]);
        } else {
          score = 0;
          for (i = p = 0; p < 1; i = ++p) {
            score += ais.simulateAiFight(ais.all[k1], ais.all[k2]);
          }
          wins += score;
          vsScore[k1 + "v" + k2] = score;
          row.push(score);
        }
      }
      row.push(wins);
    }
    return console.table(table);
  };

  ais["export"] = function(aiName) {
    var aiArray, error, key, l, n, name, ref, ref1, row, spec, tab;
    ref = commander.fleet.ais;
    for (key in ref) {
      name = ref[key];
      ref1 = getAIKey(key), row = ref1[0], tab = ref1[1];
      if (name === aiName) {
        aiArray = [];
        for (n = l = 0; l < 10; n = ++l) {
          try {
            spec = JSON.parse(commander.fleet[getAIKey(row, n, tab)]);
            aiArray.push(spec);
          } catch (error) {
            aiArray.push("");
          }
        }
        console.log(JSON.stringify(aiArray, null, 4));
        return;
      }
    }
    console.error("ai not found");
  };

  ais["import"] = function(aiName) {
    var aiBuildBar, i, l;
    aiBuildBar = ais.all[aiName];
    for (i = l = 0; l < 10; i = ++l) {
      if (aiBuildBar[i]) {
        buildBar.setSpec(i, JSON.stringify(aiBuildBar[i]));
      } else {
        buildBar.setSpec(i, "");
      }
    }
  };

}).call(this);
;


//from src/aidata.js
ais.all = {};ais.all.AlphaStriker = [{"parts":[{"pos":[20,-40],"type":"DamageMod","dir":0},{"pos":[-50,-50],"type":"Engine01","dir":0},{"pos":[40,0],"type":"DamageMod","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[-40,0],"type":"DamageMod","dir":0},{"pos":[50,-50],"type":"Engine01","dir":0},{"pos":[-20,-40],"type":"DamageMod","dir":0},{"pos":[-30,-70],"type":"Wing1x1Round","dir":0},{"pos":[30,-70],"type":"Wing1x1Round","dir":0},{"pos":[0,-70],"type":"Battery2x1","dir":0},{"pos":[-10,-100],"type":"VArmor1x1CornerBack","dir":0},{"pos":[10,-100],"type":"VArmor1x1CornerBack","dir":0},{"pos":[0,0],"type":"RingTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",25,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","More HP",100,400],["Avoid over #damage shots",20],["Stayaway in #m range from slot # units",100,1],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Less Brawling Value","More HP",2000],["Stay in #m range of friendly units",500],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","More HP",50,1000],["@capTypes Command Points within #m","Capture",10000],["Field # for # of enemy @unitTypes at priority #",1,1,"Battleship",3],["Field # for # of enemy @unitTypes at priority #",1,1,"Cruiser",3],["Field # for # of enemy @unitTypes at priority #",1,1,"Carrier",3],["Try to field # every # seconds",1,30],["Field # at start",2],["Try to field # every # seconds",1,60],["Try to field # every # seconds",1,80]]},{"parts":[{"pos":[30,70],"type":"Wing1x1Round","dir":0},{"pos":[20,-40],"type":"Mount30","dir":0},{"pos":[0,40],"type":"EnergyTransfer","dir":0},{"pos":[-40,40],"type":"Mount30","dir":0},{"pos":[0,80],"type":"Mount30","dir":0},{"pos":[20,0],"type":"Reactor2x2","dir":0},{"pos":[40,40],"type":"Mount30","dir":0},{"pos":[60,0],"type":"Mount30","dir":0},{"pos":[-20,0],"type":"Reactor2x2","dir":0},{"pos":[-60,0],"type":"Mount30","dir":0},{"pos":[-50,-50],"type":"Engine02","dir":0},{"pos":[-20,-40],"type":"Mount30","dir":0},{"pos":[-30,70],"type":"Wing1x1Round","dir":0},{"pos":[50,-50],"type":"Engine02","dir":0},{"pos":[-70,30],"type":"HArmor1x1","dir":0},{"pos":[70,30],"type":"HArmor1x1","dir":0},{"pos":[-70,-40],"type":"HArmor1x2","dir":0},{"pos":[70,-40],"type":"HArmor1x2","dir":0},{"pos":[-90,-10],"type":"Wing1x1Round","dir":0},{"pos":[90,-10],"type":"Wing1x1Round","dir":0},{"pos":[0,80],"type":"TorpTurret","dir":0},{"pos":[-20,-40],"type":"TorpTurret","dir":0},{"pos":[20,-40],"type":"TorpTurret","dir":0},{"pos":[-60,0],"type":"AutoTurret","dir":0},{"pos":[-40,40],"type":"AutoTurret","dir":0},{"pos":[40,40],"type":"AutoTurret","dir":0},{"pos":[60,0],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",1000],["Avoid #dps danger areas",5],["Find units that are out of energy"],["Field # for # of ship in slot # at priority #",1,3,1,2],["Field # for # of ship in slot # at priority #",1,4,3,4],["Field # at start",1],["Stay in #m range of friendly units",900],["Try to field # every # seconds",1,60]]},{"parts":[{"pos":[-30,-30],"type":"UArmor1x1AngleBack","dir":0},{"pos":[40,20],"type":"Mount30","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[0,20],"type":"Mount90","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[10,-20],"type":"Engine03","dir":0},{"pos":[-10,-20],"type":"Engine03","dir":0},{"pos":[-40,20],"type":"Mount30","dir":0},{"pos":[30,-30],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-50,-10],"type":"Wing1x1Round","dir":0},{"pos":[50,-10],"type":"Wing1x1Round","dir":0},{"pos":[-40,20],"type":"LightBeamTurret","dir":0},{"pos":[40,20],"type":"LightBeamTurret","dir":0},{"pos":[0,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of friendly units",500],["@attackTypes enemy within #m","Attack",250],["When #% of energy, @chargeTypes",30,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Less Brawling Value",1000],["Avoid over #damage shots",20],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",1000],["@attackTypes enemy @unitTypes within #m","Attack","Scout",1000],["Field # for # of enemy @unitTypes at priority #",1,5,"Scout",3],["Field # for # of enemy @unitTypes at priority #",1,3,"Swarmer",3],["Field # at start",2],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Less expensive",100,2000],["Try to field # every # seconds",1,60],["@capTypes Command Points within #m","Protect",10000]]},{"parts":[{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[-30,-30],"type":"Battery1x1","dir":0},{"pos":[-30,-10],"type":"Wing1x1Round","dir":0},{"pos":[10,-30],"type":"VArmor1x1Corner2","dir":0},{"pos":[0,0],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",550],["@attackTypes enemy @unitTypes within #m","Attack","Scout",510],["Avoid #dps danger areas",5],["@capTypes Command Points within #m","Capture",10000],["Field # at start",2],["Try to field # every # seconds",1,30],["Try to field # every # seconds",1,60]]},"","","","","",""];
ais.all.AlphaSwarm = [{"parts":[{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[10,10],"type":"UArmor1x1Angle","dir":0},{"pos":[10,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0},{"pos":[0,-20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",250],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Attack",600],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",100,1]]},"","","","","","","","",""];
ais.all.Anubis = [{"parts":[{"pos":[70,20],"type":"VArmor1x2","dir":0},{"pos":[-70,-20],"type":"VArmor1x2","dir":0},{"pos":[-40,-40],"type":"Reactor2x2","dir":0},{"pos":[40,-40],"type":"Reactor2x2","dir":0},{"pos":[0,-20],"type":"ReloaderMod","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"TargetingMod","dir":0},{"pos":[0,60],"type":"TargetingMod","dir":0},{"pos":[40,40],"type":"TargetingMod","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[0,-50],"type":"Battery2x1","dir":0},{"pos":[50,-100],"type":"Engine04","dir":0},{"pos":[10,-90],"type":"Engine01","dir":0},{"pos":[-50,-100],"type":"Engine04","dir":0},{"pos":[-40,-70],"type":"Battery2x1","dir":0},{"pos":[40,-70],"type":"Battery2x1","dir":0},{"pos":[-10,-90],"type":"Engine01","dir":0},{"pos":[-70,-70],"type":"Engine01","dir":0},{"pos":[-30,-100],"type":"Engine04","dir":0},{"pos":[70,-70],"type":"Engine01","dir":0},{"pos":[70,-20],"type":"VArmor1x2","dir":0},{"pos":[30,-100],"type":"Engine04","dir":0},{"pos":[-70,20],"type":"VArmor1x2","dir":0},{"pos":[-80,60],"type":"VArmor2x2Angle","dir":0},{"pos":[80,60],"type":"VArmor2x2Angle","dir":0},{"pos":[0,100],"type":"Mount360","dir":0},{"pos":[-40,90],"type":"Wing2x1","dir":0},{"pos":[40,90],"type":"Wing2x1","dir":0},{"pos":[-90,20],"type":"VArmor1x2","dir":0},{"pos":[90,20],"type":"VArmor1x2","dir":0},{"pos":[-50,70],"type":"VArmor1x1","dir":0},{"pos":[-30,70],"type":"VArmor1x1","dir":0},{"pos":[30,70],"type":"VArmor1x1","dir":0},{"pos":[50,70],"type":"VArmor1x1","dir":0},{"pos":[110,-20],"type":"Wing1x2","dir":0},{"pos":[-110,-20],"type":"Wing1x2","dir":0},{"pos":[-90,-20],"type":"VArmor1x2","dir":0},{"pos":[90,-20],"type":"VArmor1x2","dir":0},{"pos":[110,-60],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-110,-60],"type":"VArmor1x1CornerBack","dir":0},{"pos":[90,-60],"type":"VArmor1x2","dir":0},{"pos":[-90,-60],"type":"VArmor1x2","dir":0},{"pos":[0,20],"type":"MissileTurret","dir":0},{"pos":[0,100],"type":"HeavyPDTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",80],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Slower","Less Range",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Less Range","No PD",2000],["@capTypes Command Points within #m","Capture",10000],["Field # at start",1],["Try to field # every # seconds",1,30]]},{"parts":[{"pos":[110,-100],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-150,-30],"type":"Wing1x1Round","dir":0},{"pos":[0,-20],"type":"ReloaderMod","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[30,-90],"type":"Engine01","dir":0},{"pos":[-50,-90],"type":"Engine01","dir":0},{"pos":[0,60],"type":"ReloaderMod","dir":0},{"pos":[50,-90],"type":"Engine01","dir":0},{"pos":[0,-90],"type":"Battery2x1","dir":0},{"pos":[0,20],"type":"Mount270","dir":0},{"pos":[-80,-80],"type":"VArmor2x2","dir":0},{"pos":[-80,40],"type":"VArmor2x2","dir":0},{"pos":[80,-80],"type":"VArmor2x2","dir":0},{"pos":[0,100],"type":"Mount360Micro","dir":0},{"pos":[80,40],"type":"VArmor2x2","dir":0},{"pos":[-150,0],"type":"Wing1x2","dir":0},{"pos":[-30,-90],"type":"Engine01","dir":0},{"pos":[150,0],"type":"Wing1x2","dir":0},{"pos":[40,80],"type":"Reactor2x2","dir":0},{"pos":[-40,80],"type":"Reactor2x2","dir":0},{"pos":[-40,-40],"type":"VArmor2x2","dir":0},{"pos":[-110,70],"type":"VArmor1x1Angle","dir":0},{"pos":[40,-40],"type":"VArmor2x2","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[-70,110],"type":"VArmor1x1Angle","dir":0},{"pos":[70,110],"type":"VArmor1x1Angle","dir":0},{"pos":[130,-80],"type":"VArmor1x1CornerBack","dir":0},{"pos":[110,70],"type":"VArmor1x1Angle","dir":0},{"pos":[-130,-80],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-110,-100],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-110,-70],"type":"VArmor1x1","dir":0},{"pos":[110,-70],"type":"VArmor1x1","dir":0},{"pos":[150,-30],"type":"Wing1x1Round","dir":0},{"pos":[-10,-120],"type":"VArmor1x1CornerBack","dir":0},{"pos":[10,-120],"type":"VArmor1x1CornerBack","dir":0},{"pos":[90,-120],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-90,-120],"type":"VArmor1x1CornerBack","dir":0},{"pos":[0,-60],"type":"Battery2x2","dir":0},{"pos":[-70,-120],"type":"VArmor1x2End","dir":0},{"pos":[70,-120],"type":"VArmor1x2End","dir":0},{"pos":[0,140],"type":"VArmor2x2","dir":0},{"pos":[-40,120],"type":"VArmor2x2Angle","dir":0},{"pos":[40,120],"type":"VArmor2x2Angle","dir":0},{"pos":[-80,80],"type":"VArmor2x2Angle","dir":0},{"pos":[80,80],"type":"VArmor2x2Angle","dir":0},{"pos":[-120,40],"type":"VArmor2x2Angle","dir":0},{"pos":[120,40],"type":"VArmor2x2Angle","dir":0},{"pos":[-130,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[-110,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[-90,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[-70,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[70,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[90,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[110,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[130,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[-90,-40],"type":"VArmor1x2End","dir":0},{"pos":[-70,-40],"type":"VArmor1x2End","dir":0},{"pos":[70,-40],"type":"VArmor1x2End","dir":0},{"pos":[90,-40],"type":"VArmor1x2End","dir":0},{"pos":[110,-40],"type":"VArmor1x2End","dir":0},{"pos":[130,-40],"type":"VArmor1x2End","dir":0},{"pos":[-110,-40],"type":"VArmor1x2End","dir":0},{"pos":[-130,-40],"type":"VArmor1x2End","dir":0},{"pos":[0,20],"type":"PlasmaTurret","dir":0},{"pos":[0,100],"type":"HeavyPDTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",180],["@attackTypes enemy within #m","Kite",600],["When #% of energy, @chargeTypes",20,"Rest"],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",150,1000],["@capTypes Command Points within #m","Capture",10000],["Field # at start",1],["Try to field # every # seconds",1,30]]},{"parts":[{"pos":[-10,30],"type":"Battery1x1","dir":0},{"pos":[-10,0],"type":"Engine04","dir":0},{"pos":[-30,40],"type":"VArmor1x2SideBar","dir":0},{"pos":[10,40],"type":"VArmor1x2SideBar","dir":0}],"name":"","aiRules":[["Avoid everything"],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",4],["Try to field # every # seconds",1,30]]},"","","","","","",""];
ais.all.AssaultandBattery = [{"parts":[{"pos":[50,30],"type":"Wing1x1Round","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[-20,40],"type":"Mount90","dir":0},{"pos":[20,40],"type":"Mount90","dir":0},{"pos":[-60,0],"type":"Mount90","dir":0},{"pos":[-20,0],"type":"Battery2x2","dir":0},{"pos":[60,0],"type":"Mount90","dir":0},{"pos":[20,0],"type":"Battery2x2","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[-50,-40],"type":"Engine04","dir":0},{"pos":[50,-40],"type":"Engine04","dir":0},{"pos":[-50,30],"type":"Wing1x1Round","dir":0},{"pos":[-10,-80],"type":"Engine04","dir":0},{"pos":[10,-80],"type":"Engine04","dir":0},{"pos":[-10,-40],"type":"VArmor1x2IBeam","dir":0},{"pos":[10,-40],"type":"VArmor1x2IBeam","dir":0},{"pos":[-20,40],"type":"LightBeamTurret","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0},{"pos":[-60,0],"type":"LightBeamTurret","dir":0},{"pos":[60,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","Slower",1000],["@attackTypes enemy within #m","Attack",300],["Avoid over #damage shots",20],["Avoid #dps danger areas",20],["@capTypes Command Points within #m","Capture",10000],["Field # when money over # at priority #",1,550,1],["Field # at priority #",1,4],["Field # at start",1]]},{"parts":[{"pos":[-20,0],"type":"Battery2x2","dir":0},{"pos":[-50,-10],"type":"Wing1x1Round","dir":0},{"pos":[0,-40],"type":"Engine07","dir":0},{"pos":[-20,40],"type":"Mount360Micro","dir":0},{"pos":[20,40],"type":"Mount360Micro","dir":0},{"pos":[20,0],"type":"Battery2x2","dir":0},{"pos":[60,20],"type":"Mount360Micro","dir":0},{"pos":[-60,20],"type":"Mount360Micro","dir":0},{"pos":[50,-10],"type":"Wing1x1Round","dir":0},{"pos":[30,-30],"type":"Wing1x1Round","dir":0},{"pos":[-30,-30],"type":"Wing1x1Round","dir":0},{"pos":[-60,20],"type":"AutoTurret","dir":0},{"pos":[-20,40],"type":"AutoTurret","dir":0},{"pos":[20,40],"type":"AutoTurret","dir":0},{"pos":[60,20],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",15,"Find recharger"],["Avoid over #damage shots",30],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Slower","Less Brawling Value",1600],["@attackTypes enemy within #m","Bomb",800],["Stay in #m range of slot # units",800,3],["Try to field # every # seconds",1,40]]},{"parts":[{"pos":[-30,30],"type":"Wing1x1Round","dir":0},{"pos":[0,-20],"type":"EnergyTransfer","dir":0},{"pos":[40,0],"type":"Reactor2x2","dir":0},{"pos":[0,20],"type":"Reactor2x2","dir":0},{"pos":[-40,0],"type":"Reactor2x2","dir":0},{"pos":[-50,-40],"type":"Engine04","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[30,30],"type":"Wing1x1Round","dir":0},{"pos":[30,-60],"type":"Engine04","dir":0},{"pos":[50,-40],"type":"Engine04","dir":0},{"pos":[-30,-60],"type":"Engine04","dir":0},{"pos":[-30,-30],"type":"UArmor1x1","dir":0},{"pos":[30,-30],"type":"UArmor1x1","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",1600,5],["Avoid everything"],["Avoid #dps danger areas",5],["Find units that are out of energy"],["Field # at priority #",1,3],["Try to field # every # seconds",1,30],["Field # for # of ship in slot # at priority #",1,2,1,2]]},{"parts":[{"pos":[0,0],"type":"Battery2x2","dir":0},{"pos":[10,-40],"type":"Engine04","dir":0},{"pos":[20,40],"type":"Mount30","dir":0},{"pos":[40,0],"type":"Mount30","dir":0},{"pos":[-40,0],"type":"Mount30","dir":0},{"pos":[-20,40],"type":"Mount30","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[-50,-30],"type":"Wing1x1Round","dir":0},{"pos":[50,-30],"type":"Wing1x1Round","dir":0},{"pos":[-40,0],"type":"TorpTurret","dir":0},{"pos":[-20,40],"type":"TorpTurret","dir":0},{"pos":[20,40],"type":"TorpTurret","dir":0},{"pos":[40,0],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",10,"Find recharger"],["@attackTypes enemy within #m","Bomb",600],["Stay in #m range of slot # units",800,3],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Attack",1600],["Field # at start",2],["Field # for # of ship in slot # at priority #",2,1,3,2]]},{"parts":[{"pos":[70,-60],"type":"HArmor1x2","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[-60,20],"type":"HArmor2x2Angle","dir":0},{"pos":[60,20],"type":"HArmor2x2Angle","dir":0},{"pos":[20,20],"type":"Battery2x2","dir":0},{"pos":[40,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-20,20],"type":"Battery2x2","dir":0},{"pos":[20,60],"type":"Mount90","dir":0},{"pos":[-40,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-20,60],"type":"Mount90","dir":0},{"pos":[0,-20],"type":"Mount360Micro","dir":0},{"pos":[-20,-60],"type":"Mount360Micro","dir":0},{"pos":[80,-20],"type":"Mount360Micro","dir":0},{"pos":[20,-60],"type":"Mount360Micro","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[-80,-20],"type":"Mount360Micro","dir":0},{"pos":[-70,-60],"type":"HArmor1x2","dir":0},{"pos":[-50,50],"type":"Wing1x1Round","dir":0},{"pos":[50,50],"type":"Wing1x1Round","dir":0},{"pos":[-90,-50],"type":"Wing1x1Round","dir":0},{"pos":[90,-50],"type":"Wing1x1Round","dir":0},{"pos":[-20,-90],"type":"HArmor1x2Back1","dir":0},{"pos":[20,-90],"type":"HArmor1x2Back1","dir":0},{"pos":[-20,60],"type":"LightBeamTurret","dir":0},{"pos":[20,60],"type":"LightBeamTurret","dir":0},{"pos":[0,-20],"type":"TorpTurret","dir":0},{"pos":[-80,-20],"type":"AutoTurret","dir":0},{"pos":[80,-20],"type":"AutoTurret","dir":0},{"pos":[-20,-60],"type":"PlasmaTurret","dir":0},{"pos":[20,-60],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",250],["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","Slower",160,800],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,1],["Field # when money over # at priority #",1,1000,1],["Try to field # every # seconds",1,35]]},"","","","",""];
ais.all.BaitandMissile = [{"parts":[{"pos":[80,10],"type":"Reactor2x1","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-60,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[60,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[-80,10],"type":"Reactor2x1","dir":0},{"pos":[-10,-90],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[10,-90],"type":"Engine02","dir":0},{"pos":[-20,100],"type":"Mount90","dir":0},{"pos":[20,100],"type":"Mount90","dir":0},{"pos":[-60,90],"type":"Wing2x1","dir":0},{"pos":[60,90],"type":"Wing2x1","dir":0},{"pos":[80,70],"type":"Wing2x1","dir":0},{"pos":[-80,70],"type":"Wing2x1","dir":0},{"pos":[-40,60],"type":"HArmor2x2","dir":0},{"pos":[40,60],"type":"HArmor2x2","dir":0},{"pos":[-120,20],"type":"Mount90","dir":0},{"pos":[-120,-20],"type":"Mount90","dir":0},{"pos":[120,20],"type":"Mount90","dir":0},{"pos":[120,-20],"type":"Mount90","dir":0},{"pos":[-120,20],"type":"PDTurret","dir":0},{"pos":[-120,-20],"type":"PDTurret","dir":0},{"pos":[120,-20],"type":"PDTurret","dir":0},{"pos":[120,20],"type":"PDTurret","dir":0},{"pos":[0,0],"type":"MissileTurret","dir":0},{"pos":[-20,100],"type":"AutoTurret","dir":0},{"pos":[20,100],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Field # at start",1],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","More Brawling Value","Faster",800],["@attackTypes enemy within #m","Kite",2000],["Try to field # every # seconds",2,35],["Stay in #m range of friendly units",500]]},{"parts":[{"pos":[-100,-50],"type":"Wing2x1","dir":0},{"pos":[120,40],"type":"HArmor2x2Angle","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[10,-90],"type":"Engine02","dir":0},{"pos":[-10,-90],"type":"Engine02","dir":0},{"pos":[-40,60],"type":"HArmor2x2","dir":0},{"pos":[40,60],"type":"HArmor2x2","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[-80,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[-120,40],"type":"HArmor2x2Angle","dir":0},{"pos":[80,60],"type":"HArmor2x2Angle","dir":0},{"pos":[100,-50],"type":"Wing2x1","dir":0},{"pos":[-70,90],"type":"Wing1x1Round","dir":0},{"pos":[70,90],"type":"Wing1x1Round","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[0,90],"type":"Reactor2x1","dir":0},{"pos":[-80,10],"type":"Reactor2x1","dir":0},{"pos":[-80,30],"type":"Reactor2x1","dir":0},{"pos":[80,10],"type":"Reactor2x1","dir":0},{"pos":[80,30],"type":"Reactor2x1","dir":0},{"pos":[-60,-60],"type":"Mount360Micro","dir":0},{"pos":[60,-60],"type":"Mount360Micro","dir":0},{"pos":[-40,100],"type":"Mount360Micro","dir":0},{"pos":[40,100],"type":"Mount360Micro","dir":0},{"pos":[-60,-60],"type":"PDTurret","dir":0},{"pos":[60,-60],"type":"PDTurret","dir":0},{"pos":[-40,100],"type":"TorpTurret","dir":0},{"pos":[40,100],"type":"TorpTurret","dir":0},{"pos":[0,0],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Field # at start",1],["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More Range",1000,2000],["@attackTypes enemy within #m","Kite",2000],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,25]]},{"parts":[{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-60,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[60,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[10,-90],"type":"Engine02","dir":0},{"pos":[-10,-90],"type":"Engine02","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,10],"type":"Reactor2x1","dir":0},{"pos":[-80,10],"type":"Reactor2x1","dir":0},{"pos":[80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,50],"type":"HArmor2x1","dir":0},{"pos":[40,50],"type":"HArmor2x1","dir":0},{"pos":[-10,70],"type":"Wing1x1Round","dir":0},{"pos":[10,70],"type":"Wing1x1Round","dir":0},{"pos":[0,0],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Kite",1000],["Stay in #m range of friendly units",500],["Avoid over #damage shots",20],["Goto @locationTypes","Enemy Spawn"],["Try to field # every # seconds",1,30]]},{"parts":[{"pos":[80,10],"type":"Reactor2x1","dir":0},{"pos":[-80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-60,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[60,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-10,-90],"type":"Engine02","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,10],"type":"Reactor2x1","dir":0},{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[-40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-90,-50],"type":"Wing1x1Round","dir":0},{"pos":[90,-50],"type":"Wing1x1Round","dir":0},{"pos":[0,80],"type":"EnergyTransfer","dir":0},{"pos":[10,-90],"type":"Engine02","dir":0},{"pos":[80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[30,-90],"type":"Engine02","dir":0},{"pos":[-30,-90],"type":"Engine02","dir":0},{"pos":[-30,-50],"type":"Battery1x1","dir":0},{"pos":[30,-50],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,2,5,1],["@attackTypes enemy within #m","Kite",1000],["Avoid over #damage shots",20],["Find units that are out of energy"],["Try to field # every # seconds",1,35]]},{"parts":[{"pos":[0,60],"type":"Mount90","dir":0},{"pos":[30,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-10,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[10,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[10,20],"type":"VArmor1x2IBeam","dir":0},{"pos":[-10,20],"type":"VArmor1x2IBeam","dir":0},{"pos":[70,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[40,40],"type":"Mount90","dir":0},{"pos":[0,-50],"type":"Battery2x1","dir":0},{"pos":[-40,40],"type":"Mount90","dir":0},{"pos":[-30,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[30,10],"type":"Reactor1x1","dir":0},{"pos":[-30,10],"type":"Reactor1x1","dir":0},{"pos":[-50,-10],"type":"Engine01","dir":0},{"pos":[50,-10],"type":"Engine01","dir":0},{"pos":[30,-60],"type":"Wing1x2","dir":0},{"pos":[-30,-60],"type":"Wing1x2","dir":0},{"pos":[-70,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-70,20],"type":"VArmor1x2Corner4","dir":0},{"pos":[70,20],"type":"VArmor1x2Corner4","dir":0},{"pos":[-40,40],"type":"LightBeamTurret","dir":0},{"pos":[0,60],"type":"LightBeamTurret","dir":0},{"pos":[40,40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # at start",1],["Try to field # every # seconds",1,20],["Field # at priority #",1,2],["Avoid over #damage shots",50],["When #% of energy, @chargeTypes",10,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",500],["@capTypes Command Points within #m","Capture",10000]]},"","","","",""];
ais.all.BatteryRam = [{"parts":[],"name":"","aiRules":[]},{"parts":[{"pos":[-60,10],"type":"HArmor2x1","dir":0},{"pos":[40,30],"type":"HArmor2x1","dir":0},{"pos":[10,-50],"type":"Engine02","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[0,-10],"type":"Reactor2x1","dir":0},{"pos":[-10,-50],"type":"Engine02","dir":0},{"pos":[-30,-50],"type":"Engine02","dir":0},{"pos":[-40,80],"type":"Mount90","dir":0},{"pos":[0,100],"type":"Mount90","dir":0},{"pos":[0,60],"type":"Mount270","dir":0},{"pos":[40,80],"type":"Mount90","dir":0},{"pos":[80,40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[100,0],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-100,0],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,30],"type":"HArmor2x1","dir":0},{"pos":[-40,50],"type":"HArmor2x1","dir":0},{"pos":[40,50],"type":"HArmor2x1","dir":0},{"pos":[-60,-10],"type":"HArmor2x1","dir":0},{"pos":[60,10],"type":"HArmor2x1","dir":0},{"pos":[60,-10],"type":"HArmor2x1","dir":0},{"pos":[100,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-100,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-60,-30],"type":"HArmor2x1","dir":0},{"pos":[-60,-50],"type":"HArmor2x1","dir":0},{"pos":[60,-50],"type":"HArmor2x1","dir":0},{"pos":[60,-30],"type":"HArmor2x1","dir":0},{"pos":[-70,70],"type":"Wing1x1Round","dir":0},{"pos":[70,70],"type":"Wing1x1Round","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[-30,0],"type":"Battery1x2","dir":0},{"pos":[0,30],"type":"HArmor2x1","dir":0},{"pos":[0,10],"type":"HArmor2x1","dir":0},{"pos":[-40,80],"type":"LightBeamTurret","dir":0},{"pos":[40,80],"type":"LightBeamTurret","dir":0},{"pos":[0,60],"type":"FlackTurret","dir":0},{"pos":[0,100],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["Field # at start",2],["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",1,30]]},{"parts":[{"pos":[-40,40],"type":"Mount90","dir":0},{"pos":[0,50],"type":"Reactor2x1","dir":0},{"pos":[10,-40],"type":"Engine04","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[-50,-20],"type":"Engine04","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[50,-20],"type":"Engine04","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[0,-10],"type":"Reactor2x1","dir":0},{"pos":[0,20],"type":"Mount270","dir":0},{"pos":[-30,0],"type":"Battery1x2","dir":0},{"pos":[40,40],"type":"Mount90","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[-70,0],"type":"Engine04","dir":0},{"pos":[70,0],"type":"Engine04","dir":0},{"pos":[50,10],"type":"Battery1x1","dir":0},{"pos":[-50,10],"type":"Battery1x1","dir":0},{"pos":[-70,30],"type":"Wing1x1Round","dir":0},{"pos":[70,30],"type":"Wing1x1Round","dir":0},{"pos":[-10,70],"type":"Wing1x1Round","dir":0},{"pos":[10,70],"type":"Wing1x1Round","dir":0},{"pos":[-30,70],"type":"Wing1x1Round","dir":0},{"pos":[30,70],"type":"Wing1x1Round","dir":0},{"pos":[0,20],"type":"FlackTurret","dir":0},{"pos":[-40,40],"type":"PlasmaTurret","dir":0},{"pos":[40,40],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Field # at start",2],["Try to field # every # seconds",1,30],["When #% of energy, @chargeTypes",50,"Rest"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Slower","Less Range",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Slower","More Range",1000],["Stay in #m range of slot # units",1000,1],["@capTypes Command Points within #m","Spread to",10000]]},{"parts":[],"name":"","aiRules":[]},"","","","","",""];
ais.all.BattleStar = [{"parts":[{"pos":[-20,20],"type":"Mount90","dir":0},{"pos":[-10,-40],"type":"Engine03","dir":0},{"pos":[10,0],"type":"Battery1x2","dir":0},{"pos":[10,-30],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-30,-30],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-30,-10],"type":"UArmor1x1","dir":0},{"pos":[10,30],"type":"Wing1x1Round","dir":0},{"pos":[-20,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Attack",350],["@attackTypes enemy @unitTypes within #m","Attack","Scout",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Weaker",1000],["Field # at priority #",0,5],["Field # for # of enemy @unitTypes at priority #",1,1,"Fighter",2],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",1000],["When #% of energy, @chargeTypes",70,"Find recharger"],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of enemy @unitTypes at priority #",1,1,"Scout",3],["Try to field # every # seconds",1,35],["Field # at start",1]]},{"parts":[{"pos":[40,100],"type":"Reactor2x2","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[-90,30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[30,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[70,10],"type":"Engine02","dir":0},{"pos":[-30,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[90,30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-80,60],"type":"HArmor2x2Angle","dir":0},{"pos":[80,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,100],"type":"EnergyTransfer","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-40,140],"type":"HArmor2x2Angle","dir":0},{"pos":[40,140],"type":"HArmor2x2Angle","dir":0},{"pos":[0,150],"type":"Battery2x1","dir":0},{"pos":[0,120],"type":"Mount360","dir":0},{"pos":[-70,110],"type":"Wing1x1Round","dir":0},{"pos":[70,110],"type":"Wing1x1Round","dir":0},{"pos":[-70,90],"type":"Battery1x1","dir":0},{"pos":[70,90],"type":"Battery1x1","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[-70,10],"type":"Engine01","dir":0},{"pos":[0,40],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"HeavyBeamTurret","dir":0},{"pos":[0,120],"type":"PDTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,3,1,1],["Avoid over #damage shots",180],["@attackTypes enemy within #m","Kite",1500],["Stay in #m range of slot # units",400,3],["Stay in #m range of slot # units",400,4],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Less HP",2500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Less Range",2500],["Find units that are out of energy"],["@capTypes Command Points within #m","Capture",1000],["Field # at priority #",1,5]]},{"parts":[{"pos":[0,-30],"type":"Battery2x1","dir":0},{"pos":[-10,-150],"type":"Engine02","dir":0},{"pos":[140,0],"type":"Mount360","dir":0},{"pos":[100,-20],"type":"TargetingMod","dir":0},{"pos":[180,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[160,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-180,20],"type":"ReloaderMod","dir":0},{"pos":[0,110],"type":"HArmor1x2Back2","dir":0},{"pos":[-140,0],"type":"Mount360","dir":0},{"pos":[-30,30],"type":"HArmor1x1Angle","dir":0},{"pos":[0,30],"type":"Battery2x1","dir":0},{"pos":[0,50],"type":"HArmor1x2Front2","dir":0},{"pos":[30,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,-50],"type":"HArmor1x2Back2","dir":0},{"pos":[-160,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-180,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[120,-140],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-30,-170],"type":"Engine02","dir":0},{"pos":[30,-170],"type":"Engine02","dir":0},{"pos":[-100,-20],"type":"TargetingMod","dir":0},{"pos":[-150,-130],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-140,-40],"type":"TargetingMod","dir":0},{"pos":[140,-40],"type":"TargetingMod","dir":0},{"pos":[150,-130],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-20,0],"type":"Reactor2x2","dir":0},{"pos":[0,140],"type":"Mount180","dir":0},{"pos":[20,0],"type":"Reactor2x2","dir":0},{"pos":[0,-70],"type":"HArmor1x2Front2","dir":0},{"pos":[0,70],"type":"HArmor1x2Back2","dir":0},{"pos":[0,90],"type":"HArmor1x2Front2","dir":0},{"pos":[-120,-140],"type":"HArmor2x2AngleBack","dir":0},{"pos":[10,-150],"type":"Engine02","dir":0},{"pos":[-140,40],"type":"ReloaderMod","dir":0},{"pos":[0,-110],"type":"HArmor1x2Front2","dir":0},{"pos":[0,-90],"type":"HArmor1x2Back2","dir":0},{"pos":[-150,130],"type":"HArmor1x1Angle","dir":0},{"pos":[80,-160],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-80,-160],"type":"HArmor2x2AngleBack","dir":0},{"pos":[180,60],"type":"HArmor2x2Angle","dir":0},{"pos":[160,100],"type":"HArmor2x2Angle","dir":0},{"pos":[120,140],"type":"HArmor2x2Angle","dir":0},{"pos":[150,130],"type":"HArmor1x1Angle","dir":0},{"pos":[0,180],"type":"ReloaderMod","dir":0},{"pos":[-180,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-120,140],"type":"HArmor2x2Angle","dir":0},{"pos":[-160,100],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,150],"type":"Battery2x1","dir":0},{"pos":[-30,180],"type":"HArmor1x2","dir":0},{"pos":[-50,180],"type":"Wing1x2","dir":0},{"pos":[-80,160],"type":"HArmor2x2Angle","dir":0},{"pos":[30,180],"type":"HArmor1x2","dir":0},{"pos":[40,150],"type":"Battery2x1","dir":0},{"pos":[50,180],"type":"Wing1x2","dir":0},{"pos":[80,160],"type":"HArmor2x2Angle","dir":0},{"pos":[140,40],"type":"ReloaderMod","dir":0},{"pos":[180,20],"type":"ReloaderMod","dir":0},{"pos":[100,20],"type":"ReloaderMod","dir":0},{"pos":[180,-20],"type":"TargetingMod","dir":0},{"pos":[-100,20],"type":"ReloaderMod","dir":0},{"pos":[-180,-20],"type":"TargetingMod","dir":0},{"pos":[-140,0],"type":"HeavyBeamTurret","dir":0},{"pos":[140,0],"type":"HeavyBeamTurret","dir":0},{"pos":[0,140],"type":"HeavyPDTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",1,2],["@attackTypes enemy within #m","Stay at range",900],["@attackTypes enemy within #m","Circle",1100],["@attackTypes enemy within #m","Attack",1300],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Weaker",10000],["Stay in #m range of slot # units",600,4],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,45],["Field # at start",1]]},{"parts":[{"pos":[-90,-170],"type":"Engine02","dir":0},{"pos":[-40,140],"type":"TargetingMod","dir":0},{"pos":[-180,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[180,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[160,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[140,-140],"type":"HArmor2x2AngleBack","dir":0},{"pos":[180,60],"type":"HArmor2x2Angle","dir":0},{"pos":[160,100],"type":"HArmor2x2Angle","dir":0},{"pos":[0,50],"type":"HArmor1x2Front2","dir":0},{"pos":[0,70],"type":"HArmor1x2Back2","dir":0},{"pos":[30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,-50],"type":"HArmor1x2Back2","dir":0},{"pos":[-30,30],"type":"HArmor1x1Angle","dir":0},{"pos":[30,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,-70],"type":"HArmor1x2Front2","dir":0},{"pos":[0,-20],"type":"Reactor2x2","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[-20,180],"type":"TargetingMod","dir":0},{"pos":[-30,0],"type":"Battery1x2","dir":0},{"pos":[0,20],"type":"Reactor2x2","dir":0},{"pos":[0,140],"type":"Mount360","dir":0},{"pos":[-20,100],"type":"ReloaderMod","dir":0},{"pos":[20,180],"type":"TargetingMod","dir":0},{"pos":[20,-180],"type":"TargetingMod","dir":0},{"pos":[0,-140],"type":"Mount360","dir":0},{"pos":[20,100],"type":"ReloaderMod","dir":0},{"pos":[-20,-180],"type":"TargetingMod","dir":0},{"pos":[-20,-100],"type":"ReloaderMod","dir":0},{"pos":[20,-100],"type":"ReloaderMod","dir":0},{"pos":[110,-150],"type":"Engine02","dir":0},{"pos":[-110,-150],"type":"Engine02","dir":0},{"pos":[-160,100],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,-140],"type":"ReloaderMod","dir":0},{"pos":[40,140],"type":"TargetingMod","dir":0},{"pos":[40,-140],"type":"ReloaderMod","dir":0},{"pos":[-60,-180],"type":"HArmor2x2AngleBack","dir":0},{"pos":[90,-170],"type":"Engine02","dir":0},{"pos":[60,-180],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-160,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-140,-140],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-140,140],"type":"HArmor2x2Angle","dir":0},{"pos":[140,140],"type":"HArmor2x2Angle","dir":0},{"pos":[-70,180],"type":"Wing1x2","dir":0},{"pos":[-50,180],"type":"HArmor1x2","dir":0},{"pos":[-100,160],"type":"HArmor2x2Angle","dir":0},{"pos":[100,160],"type":"HArmor2x2Angle","dir":0},{"pos":[70,180],"type":"Wing1x2","dir":0},{"pos":[50,180],"type":"HArmor1x2","dir":0},{"pos":[-50,-110],"type":"Wing1x1Round","dir":0},{"pos":[50,-110],"type":"Wing1x1Round","dir":0},{"pos":[-180,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-170,0],"type":"Battery1x2","dir":0},{"pos":[170,0],"type":"Battery1x2","dir":0},{"pos":[190,0],"type":"HArmor1x2","dir":0},{"pos":[-190,0],"type":"HArmor1x2","dir":0},{"pos":[180,30],"type":"HArmor2x1","dir":0},{"pos":[-180,30],"type":"HArmor2x1","dir":0},{"pos":[-180,-30],"type":"HArmor2x1","dir":0},{"pos":[180,-30],"type":"HArmor2x1","dir":0},{"pos":[-50,110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[50,110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,150],"type":"Battery1x1","dir":0},{"pos":[70,150],"type":"Battery1x1","dir":0},{"pos":[-70,130],"type":"HArmor1x1AngleBack","dir":0},{"pos":[70,130],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,140],"type":"HeavyBeamTurret","dir":0},{"pos":[0,-140],"type":"HeavyBeamTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",1,2],["@attackTypes enemy within #m","Kite",900],["@attackTypes enemy within #m","Ram",1200],["Stay in #m range of slot # units",600,3],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less HP","Weaker",10000],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,60],["Field # at start",1]]},"","","","","",""];
ais.all.BeamMan = [{"parts":[{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[-40,70],"type":"Reactor2x1","dir":0},{"pos":[40,90],"type":"Wing2x1","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[0,90],"type":"Reactor2x1","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[0,-20],"type":"ReloaderMod","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[-40,-30],"type":"Battery2x1","dir":0},{"pos":[40,-30],"type":"ShieldGen2x1","dir":0},{"pos":[40,70],"type":"Reactor2x1","dir":0},{"pos":[-40,90],"type":"Wing2x1","dir":0},{"pos":[-70,20],"type":"Reactor1x2","dir":0},{"pos":[0,60],"type":"TargetingMod","dir":0},{"pos":[70,20],"type":"Reactor1x2","dir":0},{"pos":[90,0],"type":"Wing1x2","dir":0},{"pos":[-90,0],"type":"Wing1x2","dir":0},{"pos":[-70,-10],"type":"Battery1x1","dir":0},{"pos":[70,-10],"type":"Battery1x1","dir":0},{"pos":[-70,60],"type":"Battery1x2","dir":0},{"pos":[70,60],"type":"Battery1x2","dir":0},{"pos":[-60,-60],"type":"Mount360Micro","dir":0},{"pos":[60,-60],"type":"Mount360Micro","dir":0},{"pos":[0,-60],"type":"Engine07","dir":0},{"pos":[-30,-60],"type":"Engine04","dir":0},{"pos":[30,-60],"type":"Engine04","dir":0},{"pos":[0,20],"type":"HeavyBeamTurret","dir":0},{"pos":[60,-60],"type":"RingTurret","dir":0},{"pos":[-60,-60],"type":"RingTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Kite",600],["When #% of energy, @chargeTypes",40,"Rest"],["Avoid over #damage shots",10],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",1,1],["Try to field # every # seconds",1,30],["Field # at start",1]]},{"parts":[{"pos":[-40,70],"type":"Reactor2x1","dir":0},{"pos":[-70,20],"type":"Reactor1x2","dir":0},{"pos":[-40,90],"type":"Wing2x1","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[0,60],"type":"TargetingMod","dir":0},{"pos":[40,90],"type":"Wing2x1","dir":0},{"pos":[-20,-60],"type":"Engine07","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[0,90],"type":"Reactor2x1","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[20,-60],"type":"Engine07","dir":0},{"pos":[0,-20],"type":"ReloaderMod","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[40,70],"type":"Reactor2x1","dir":0},{"pos":[-40,-30],"type":"Battery2x1","dir":0},{"pos":[-70,60],"type":"UArmor1x2","dir":0},{"pos":[70,60],"type":"UArmor1x2","dir":0},{"pos":[70,20],"type":"Reactor1x2","dir":0},{"pos":[90,0],"type":"Wing1x2","dir":0},{"pos":[-90,0],"type":"Wing1x2","dir":0},{"pos":[-70,-10],"type":"Battery1x1","dir":0},{"pos":[-70,-30],"type":"UArmor1x1","dir":0},{"pos":[70,-10],"type":"Battery1x1","dir":0},{"pos":[70,-30],"type":"UArmor1x1","dir":0},{"pos":[40,-30],"type":"Battery2x1","dir":0},{"pos":[-50,-60],"type":"Battery1x2","dir":0},{"pos":[50,-60],"type":"Battery1x2","dir":0},{"pos":[0,20],"type":"HeavyBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",25,"Find recharger"],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Kite",650],["When #% of energy, @chargeTypes",50,"Rest"],["@attackTypes enemy within #m","Kite",1000],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",1,1],["Try to field # every # seconds",1,30],["Field # at start",1]]},{"parts":[{"pos":[10,10],"type":"Battery1x1","dir":0},{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[-10,-10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-10,10],"type":"HArmor1x1Angle","dir":0},{"pos":[30,10],"type":"HArmor1x1Angle","dir":0}],"name":"","aiRules":[["Avoid everything"],["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",2,30],["Field # at start",2]]},"","","","","","",{"parts":[{"pos":[40,0],"type":"VArmor2x2","dir":0},{"pos":[40,-30],"type":"Battery2x1","dir":0},{"pos":[0,90],"type":"Reactor2x1","dir":0},{"pos":[-40,-30],"type":"Battery2x1","dir":0},{"pos":[-40,70],"type":"Reactor2x1","dir":0},{"pos":[40,70],"type":"Reactor2x1","dir":0},{"pos":[70,20],"type":"Reactor1x2","dir":0},{"pos":[-70,20],"type":"Reactor1x2","dir":0},{"pos":[90,0],"type":"Wing1x2","dir":0},{"pos":[-90,0],"type":"Wing1x2","dir":0},{"pos":[-70,-10],"type":"Battery1x1","dir":0},{"pos":[-40,90],"type":"Wing2x1","dir":0},{"pos":[-40,40],"type":"EnergyTransfer","dir":0},{"pos":[0,-20],"type":"EnergyTransfer","dir":0},{"pos":[70,-10],"type":"Battery1x1","dir":0},{"pos":[40,40],"type":"EnergyTransfer","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[-40,0],"type":"VArmor2x2","dir":0},{"pos":[40,90],"type":"Wing2x1","dir":0},{"pos":[-50,-60],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-70,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-30,-60],"type":"VArmor1x1CornerBack","dir":0},{"pos":[30,-60],"type":"VArmor1x1CornerBack","dir":0},{"pos":[50,-60],"type":"VArmor1x1CornerBack","dir":0},{"pos":[70,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-70,70],"type":"VArmor1x1Angle","dir":0},{"pos":[-70,50],"type":"VArmor1x1Angle","dir":0},{"pos":[70,50],"type":"VArmor1x1Angle","dir":0},{"pos":[70,70],"type":"VArmor1x1Angle","dir":0},{"pos":[90,30],"type":"VArmor1x1Angle","dir":0},{"pos":[-90,30],"type":"VArmor1x1Angle","dir":0},{"pos":[0,60],"type":"VArmor2x2","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[-90,-40],"type":"Engine04","dir":0},{"pos":[90,-40],"type":"Engine04","dir":0},{"pos":[0,20],"type":"HeavyPDTurret","dir":0}],"name":"","aiRules":[["Find units that are out of energy"],["Avoid over #damage shots",40],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,1]]}];
ais.all.Belfry = [{"parts":[{"pos":[40,20],"type":"DamageMod","dir":0},{"pos":[0,0],"type":"Mount270","dir":0},{"pos":[-40,-60],"type":"Reactor2x2","dir":0},{"pos":[-40,50],"type":"Battery2x1","dir":0},{"pos":[0,-80],"type":"Reactor2x2","dir":0},{"pos":[-50,-110],"type":"Engine02","dir":0},{"pos":[-30,-110],"type":"Engine02","dir":0},{"pos":[50,-110],"type":"Engine02","dir":0},{"pos":[40,50],"type":"Battery2x1","dir":0},{"pos":[30,-110],"type":"Engine02","dir":0},{"pos":[40,-60],"type":"Reactor2x2","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[-40,20],"type":"DamageMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[0,40],"type":"DamageMod","dir":0},{"pos":[-80,60],"type":"Wing2x2","dir":0},{"pos":[80,60],"type":"Wing2x2","dir":0},{"pos":[80,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-80,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-80,-60],"type":"HArmor2x2","dir":0},{"pos":[-80,-20],"type":"HArmor2x2","dir":0},{"pos":[80,-60],"type":"HArmor2x2","dir":0},{"pos":[80,-20],"type":"HArmor2x2","dir":0},{"pos":[-80,20],"type":"HArmor2x2","dir":0},{"pos":[80,20],"type":"HArmor2x2","dir":0},{"pos":[-40,70],"type":"HArmor2x1","dir":0},{"pos":[40,70],"type":"HArmor2x1","dir":0},{"pos":[0,70],"type":"HArmor2x1","dir":0},{"pos":[0,-110],"type":"HArmor2x1","dir":0},{"pos":[0,0],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",150],["@attackTypes enemy within #m","Ram",1000],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",100,1]]},{"parts":[{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[-10,0],"type":"HArmor1x2","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[10,10],"type":"Wing1x1Round","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",1,30],["Field # at start",4]]},"","","","","","","",""];
ais.all.BetaSwarm = [{"parts":[{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[-30,-30],"type":"Battery1x1","dir":0},{"pos":[50,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[10,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-10,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-10],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,-10],"type":"Wing1x1Notch","dir":0},{"pos":[0,-20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",250],["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",200,600],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",100,1]]},"","","","","","","","",""];
ais.all.BladeRanger = [{"parts":[{"pos":[0,20],"type":"Mount90","dir":0},{"pos":[-30,30],"type":"Battery1x1","dir":0},{"pos":[-30,0],"type":"Engine03","dir":0},{"pos":[30,30],"type":"Battery1x1","dir":0},{"pos":[30,0],"type":"Engine04","dir":0},{"pos":[30,60],"type":"VArmor1x1Hook","dir":0},{"pos":[-30,60],"type":"VArmor1x1Hook","dir":0},{"pos":[-50,10],"type":"Wing1x1Notch","dir":0},{"pos":[50,10],"type":"Wing1x1Notch","dir":0},{"pos":[0,20],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",30,"Find recharger"],["@attackTypes enemy within #m","Bomb",550],["@attackTypes enemy within #m","Backstab",800],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Stronger","Faster",1100],["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",1,30],["Field # at start",4]]},{"parts":[{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[10,-40],"type":"Engine04","dir":0},{"pos":[0,40],"type":"Mount90","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[-30,30],"type":"Battery1x1","dir":0},{"pos":[30,30],"type":"Battery1x1","dir":0},{"pos":[50,30],"type":"Wing1x1Round","dir":0},{"pos":[-50,30],"type":"Wing1x1Round","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[-50,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[50,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-30,50],"type":"VArmor1x1Corner2","dir":0},{"pos":[30,50],"type":"VArmor1x1Corner2","dir":0},{"pos":[-50,0],"type":"VArmor1x2SideBarFilled","dir":0},{"pos":[50,0],"type":"VArmor1x2SideBarFilled","dir":0},{"pos":[0,0],"type":"AutoTurret","dir":0},{"pos":[0,40],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",30,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Run-by","Less Arc",200,500],["@attackTypes enemy within #m","Attack",600],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",200,2000],["Avoid #dps danger areas",5],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,60],["Field # at start",2],["Field # when money over # at priority #",100,3000,1]]},{"parts":[{"pos":[-10,-40],"type":"Engine03","dir":0},{"pos":[-10,50],"type":"Battery1x1","dir":0},{"pos":[-30,40],"type":"VArmor1x2Corner4","dir":0},{"pos":[-30,0],"type":"VArmor1x1CornerBack","dir":0},{"pos":[30,40],"type":"VArmor1x2Corner4","dir":0},{"pos":[0,20],"type":"Mount270","dir":0},{"pos":[10,50],"type":"Battery1x1","dir":0},{"pos":[10,-40],"type":"Engine03","dir":0},{"pos":[-10,-10],"type":"Battery1x1","dir":0},{"pos":[10,-10],"type":"Battery1x1","dir":0},{"pos":[-30,-30],"type":"Wing1x1Round","dir":0},{"pos":[30,-30],"type":"Wing1x1Round","dir":0},{"pos":[30,0],"type":"VArmor1x1CornerBack","dir":0},{"pos":[0,20],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",30,"Find recharger"],["@attackTypes enemy within #m","Circle",700],["@attackTypes enemy within #m","Backstab",1100],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,40],["Field # at start",3]]},{"parts":[{"pos":[-30,-60],"type":"Reactor1x2","dir":0},{"pos":[30,10],"type":"Wing1x1Round","dir":0},{"pos":[0,0],"type":"Mount360Micro","dir":0},{"pos":[-30,-20],"type":"Reactor1x2","dir":0},{"pos":[-50,-80],"type":"VArmor1x2End","dir":0},{"pos":[50,0],"type":"VArmor1x1Corner3","dir":0},{"pos":[-50,0],"type":"VArmor1x1Corner3","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0},{"pos":[0,-40],"type":"EnergyTransfer","dir":0},{"pos":[30,-60],"type":"Reactor1x2","dir":0},{"pos":[-10,-80],"type":"Engine04","dir":0},{"pos":[30,-20],"type":"Reactor1x2","dir":0},{"pos":[10,-80],"type":"Engine04","dir":0},{"pos":[30,-100],"type":"Engine04","dir":0},{"pos":[-30,-100],"type":"Engine04","dir":0},{"pos":[50,-40],"type":"VArmor1x2","dir":0},{"pos":[-50,-40],"type":"VArmor1x2","dir":0},{"pos":[50,-80],"type":"VArmor1x2End","dir":0},{"pos":[-70,-60],"type":"VArmor1x1CornerBack","dir":0},{"pos":[70,-60],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-70,-30],"type":"VArmor1x1Corner1","dir":0},{"pos":[70,-30],"type":"VArmor1x1Corner1","dir":0},{"pos":[0,0],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid everything"],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Flee",1600],["Stay in #m range of slot # units",550,2],["Stay in #m range of slot # units",550,3],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",1,5,1,1],["Field # for # of ship in slot # at priority #",1,3,2,1],["Field # for # of ship in slot # at priority #",1,4,3,1],["Field # at start",1],["Field # at priority #",1,1]]},"","","","","",""];
ais.all.BossAI = ["","","","","","","","","",""];
ais.all.BullDogs = [{"parts":[{"pos":[-110,-40],"type":"HArmor1x2","dir":0},{"pos":[110,-40],"type":"HArmor1x2","dir":0},{"pos":[0,120],"type":"HArmor2x2","dir":0},{"pos":[0,180],"type":"HArmor2x2","dir":0},{"pos":[80,140],"type":"Mount30","dir":0},{"pos":[-80,140],"type":"Mount30","dir":0},{"pos":[-40,180],"type":"Mount30","dir":0},{"pos":[40,180],"type":"Mount30","dir":0},{"pos":[40,60],"type":"Wing2x2","dir":0},{"pos":[-40,120],"type":"HArmor2x2","dir":0},{"pos":[-40,60],"type":"Wing2x2","dir":0},{"pos":[40,150],"type":"Battery2x1","dir":0},{"pos":[-40,150],"type":"Battery2x1","dir":0},{"pos":[50,-50],"type":"Engine02","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[-30,-50],"type":"Engine02","dir":0},{"pos":[-50,-50],"type":"Engine02","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[180,-40],"type":"Mount30","dir":0},{"pos":[-180,-40],"type":"Mount30","dir":0},{"pos":[140,0],"type":"Mount30","dir":0},{"pos":[-140,0],"type":"Mount30","dir":0},{"pos":[40,120],"type":"HArmor2x2","dir":0},{"pos":[-180,0],"type":"Mount90","dir":0},{"pos":[180,0],"type":"Mount90","dir":0},{"pos":[140,60],"type":"HArmor2x2Front1","dir":0},{"pos":[-140,60],"type":"HArmor2x2Front1","dir":0},{"pos":[-140,-40],"type":"HArmor2x2","dir":0},{"pos":[140,-40],"type":"HArmor2x2","dir":0},{"pos":[-100,20],"type":"Mount30","dir":0},{"pos":[0,150],"type":"HArmor2x1","dir":0},{"pos":[80,-40],"type":"Mount30","dir":0},{"pos":[0,80],"type":"ReloaderMod","dir":0},{"pos":[-80,-40],"type":"Mount30","dir":0},{"pos":[100,20],"type":"Mount30","dir":0},{"pos":[-40,-10],"type":"Battery2x1","dir":0},{"pos":[40,-10],"type":"Battery2x1","dir":0},{"pos":[-80,-10],"type":"HArmor2x1","dir":0},{"pos":[80,-10],"type":"HArmor2x1","dir":0},{"pos":[-110,-10],"type":"Battery1x1","dir":0},{"pos":[110,-10],"type":"Battery1x1","dir":0},{"pos":[-70,20],"type":"HArmor1x2","dir":0},{"pos":[70,20],"type":"HArmor1x2","dir":0},{"pos":[-70,180],"type":"Wing1x2","dir":0},{"pos":[70,180],"type":"Wing1x2","dir":0},{"pos":[0,40],"type":"Mount270","dir":0},{"pos":[-80,100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-110,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[110,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-90,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[70,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[90,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-10,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[10,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-140,30],"type":"HArmor2x1","dir":0},{"pos":[140,30],"type":"HArmor2x1","dir":0},{"pos":[170,30],"type":"HArmor1x1Angle","dir":0},{"pos":[40,180],"type":"TorpTurret","dir":0},{"pos":[-170,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-180,0],"type":"PDTurret","dir":0},{"pos":[180,0],"type":"PDTurret","dir":0},{"pos":[-80,140],"type":"TorpTurret","dir":0},{"pos":[-40,180],"type":"TorpTurret","dir":0},{"pos":[-100,20],"type":"TorpTurret","dir":0},{"pos":[180,-40],"type":"TorpTurret","dir":0},{"pos":[80,140],"type":"TorpTurret","dir":0},{"pos":[140,0],"type":"TorpTurret","dir":0},{"pos":[-180,-40],"type":"TorpTurret","dir":0},{"pos":[100,20],"type":"TorpTurret","dir":0},{"pos":[-140,0],"type":"TorpTurret","dir":0},{"pos":[-80,-40],"type":"TorpTurret","dir":0},{"pos":[80,-40],"type":"TorpTurret","dir":0},{"pos":[0,40],"type":"HeavyPDTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",600],["@capTypes Command Points within #m","Capture",10000],["Field # at start",1],["Try to field # every # seconds",1,60],["Field # at priority #",1,1]]},{"parts":[{"pos":[20,20],"type":"Mount30","dir":0},{"pos":[-20,20],"type":"Mount30","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[10,-20],"type":"Engine03","dir":0},{"pos":[50,10],"type":"Wing1x1Notch","dir":0},{"pos":[-50,10],"type":"Wing1x1Notch","dir":0},{"pos":[-50,-10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[50,-10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[20,20],"type":"TorpTurret","dir":0},{"pos":[-20,20],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",25,"Find recharger"],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Stay at range",850],["@attackTypes enemy within #m","Attack",1100],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",4],["Try to field # every # seconds",1,30]]},"","","","","","","",{"parts":[{"pos":[-30,0],"type":"Battery1x2","dir":0},{"pos":[30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,-20],"type":"Engine04","dir":0},{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[50,-20],"type":"Engine04","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[0,40],"type":"EnergyTransfer","dir":0},{"pos":[-30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,-30],"type":"Battery2x1","dir":0},{"pos":[-40,30],"type":"HArmor2x1","dir":0},{"pos":[40,30],"type":"HArmor2x1","dir":0},{"pos":[-50,10],"type":"HArmor1x1","dir":0},{"pos":[50,10],"type":"HArmor1x1","dir":0},{"pos":[-30,50],"type":"Wing1x1Round","dir":0},{"pos":[30,50],"type":"Wing1x1Round","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,1,1,5],["Stay in #m range of slot # units",500,1],["Avoid everything"]]}];
ais.all.Cormix = [{"parts":[{"pos":[-50,-60],"type":"VArmor1x2Corner4","dir":0},{"pos":[30,-60],"type":"Battery1x2","dir":0},{"pos":[-30,-60],"type":"Battery1x2","dir":0},{"pos":[-30,-100],"type":"Engine03","dir":0},{"pos":[30,-100],"type":"Engine03","dir":0},{"pos":[-50,-100],"type":"Engine03","dir":0},{"pos":[50,-100],"type":"Engine03","dir":0},{"pos":[50,-60],"type":"VArmor1x2Corner4","dir":0},{"pos":[-30,-30],"type":"Wing1x1Angle","dir":0},{"pos":[30,-30],"type":"Wing1x1Angle","dir":0},{"pos":[0,-80],"type":"DamageMod","dir":0},{"pos":[0,-40],"type":"Mount90","dir":0},{"pos":[0,-40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Backstab",400],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Capture",10000],["Field # at start",4],["Try to field # every # seconds",3,10]]},{"parts":[{"pos":[10,-40],"type":"Engine04","dir":0},{"pos":[10,-10],"type":"Battery1x1","dir":0},{"pos":[-20,-20],"type":"Mount30","dir":0},{"pos":[-50,-40],"type":"Engine04","dir":0},{"pos":[-50,-10],"type":"Battery1x1","dir":0},{"pos":[10,10],"type":"Wing1x1Round","dir":0},{"pos":[-50,10],"type":"Wing1x1Round","dir":0},{"pos":[-20,10],"type":"Battery2x1","dir":0},{"pos":[-20,-20],"type":"EMPGun","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Bomb",500],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",6],["Try to field # every # seconds",3,10]]},{"parts":[{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[-70,-50],"type":"Engine02","dir":0},{"pos":[-20,-20],"type":"Mount30","dir":0},{"pos":[10,-20],"type":"Reactor1x2","dir":0},{"pos":[-50,-20],"type":"Battery1x2","dir":0},{"pos":[-70,-10],"type":"Wing1x1Round","dir":0},{"pos":[30,-10],"type":"Wing1x1Round","dir":0},{"pos":[-50,-50],"type":"HArmor1x1","dir":0},{"pos":[-50,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[10,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[10,-50],"type":"HArmor1x1","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[-20,-60],"type":"TargetingMod","dir":0},{"pos":[0,20],"type":"ReloaderMod","dir":0},{"pos":[-20,-20],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of friendly units",1000],["@attackTypes enemy within #m","Attack",2000],["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",2,10]]},"","","","","","",{"parts":[{"pos":[0,20],"type":"EnergyTransfer","dir":0},{"pos":[0,-20],"type":"Reactor2x2","dir":0},{"pos":[-30,0],"type":"Battery1x2","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[50,-20],"type":"Engine04","dir":0},{"pos":[-50,-20],"type":"Engine04","dir":0},{"pos":[-50,10],"type":"Wing1x1Notch","dir":0},{"pos":[50,10],"type":"Wing1x1Notch","dir":0}],"name":"","aiRules":[["Avoid everything"],["Stay in #m range of slot # units",500,3],["Field # for # of ship in slot # at priority #",1,6,1,5],["Field # for # of ship in slot # at priority #",1,10,2,5],["Field # for # of ship in slot # at priority #",1,2,3,5]]}];
ais.all.CreepingHoard = [{"parts":[{"pos":[-60,-60],"type":"Reactor2x2","dir":0},{"pos":[20,-20],"type":"HArmor2x2","dir":0},{"pos":[-60,20],"type":"TargetingMod","dir":0},{"pos":[20,60],"type":"TargetingMod","dir":0},{"pos":[20,20],"type":"TargetingMod","dir":0},{"pos":[-20,0],"type":"ReloaderMod","dir":0},{"pos":[-20,40],"type":"Mount360","dir":0},{"pos":[-20,80],"type":"ReloaderMod","dir":0},{"pos":[-60,60],"type":"TargetingMod","dir":0},{"pos":[-60,-20],"type":"HArmor2x2","dir":0},{"pos":[50,-30],"type":"Engine02","dir":0},{"pos":[-90,-30],"type":"Engine02","dir":0},{"pos":[20,-60],"type":"Reactor2x2","dir":0},{"pos":[-20,-40],"type":"EnergyTransfer","dir":0},{"pos":[50,10],"type":"Wing1x1Angle","dir":0},{"pos":[-90,10],"type":"Wing1x1Angle","dir":0},{"pos":[20,100],"type":"HArmor2x2","dir":0},{"pos":[-60,100],"type":"HArmor2x2","dir":0},{"pos":[-20,-80],"type":"HArmor2x2","dir":0},{"pos":[-90,60],"type":"HArmor1x2","dir":0},{"pos":[50,60],"type":"HArmor1x2","dir":0},{"pos":[-20,40],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",2500,4],["Find units that are out of energy"],["Avoid everything"],["Field # at priority #",1,1],["Field # at priority #",1,3],["Field # at priority #",1,4],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","---","Weaker",1000],["Goto @locationTypes","Friendly Army Middle"],["Field # at priority #",1,9]]},{"parts":[{"pos":[20,-20],"type":"HArmor2x2","dir":0},{"pos":[20,-60],"type":"Reactor2x2","dir":0},{"pos":[-60,20],"type":"TargetingMod","dir":0},{"pos":[20,60],"type":"TargetingMod","dir":0},{"pos":[20,20],"type":"TargetingMod","dir":0},{"pos":[-20,40],"type":"Mount360","dir":0},{"pos":[-20,80],"type":"ReloaderMod","dir":0},{"pos":[-60,60],"type":"TargetingMod","dir":0},{"pos":[-60,-20],"type":"HArmor2x2","dir":0},{"pos":[50,-30],"type":"Engine02","dir":0},{"pos":[-90,-30],"type":"Engine02","dir":0},{"pos":[-60,-60],"type":"Reactor2x2","dir":0},{"pos":[-20,-40],"type":"EnergyTransfer","dir":0},{"pos":[50,10],"type":"Wing1x1Angle","dir":0},{"pos":[-90,10],"type":"Wing1x1Angle","dir":0},{"pos":[20,100],"type":"HArmor2x2","dir":0},{"pos":[-60,100],"type":"HArmor2x2","dir":0},{"pos":[-20,-80],"type":"HArmor2x2","dir":0},{"pos":[-90,60],"type":"HArmor1x2","dir":0},{"pos":[50,60],"type":"HArmor1x2","dir":0},{"pos":[-20,0],"type":"TargetingMod","dir":0},{"pos":[-20,120],"type":"HArmor2x2","dir":0},{"pos":[-20,40],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",1,2],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","More Brawling Value","---",1000],["Stay in #m range of slot # units",500,1],["Goto @locationTypes","Friendly Army Middle"],["Field # at priority #",1,7]]},{"parts":[{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[40,-20],"type":"HArmor2x2","dir":0},{"pos":[10,-30],"type":"Engine02","dir":0},{"pos":[-10,-30],"type":"Engine02","dir":0},{"pos":[-40,-60],"type":"HArmor2x2","dir":0},{"pos":[-40,-20],"type":"HArmor2x2","dir":0},{"pos":[40,-60],"type":"HArmor2x2","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[-30,30],"type":"Wing1x1Round","dir":0},{"pos":[-50,20],"type":"HArmor1x2","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[30,30],"type":"Wing1x1Round","dir":0},{"pos":[50,20],"type":"HArmor1x2","dir":0},{"pos":[0,20],"type":"RingTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Less expensive","More Brawling Value",1300],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Run-by","Slower","---",500],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",1,1,9,3]]},{"parts":[{"pos":[40,-10],"type":"Battery2x1","dir":0},{"pos":[-40,-10],"type":"Battery2x1","dir":0},{"pos":[180,0],"type":"Mount30","dir":0},{"pos":[-180,0],"type":"Mount30","dir":0},{"pos":[100,0],"type":"Mount30","dir":0},{"pos":[120,-40],"type":"Mount30","dir":0},{"pos":[-120,-40],"type":"Mount30","dir":0},{"pos":[-100,0],"type":"Mount30","dir":0},{"pos":[-160,-40],"type":"Mount30","dir":0},{"pos":[-40,60],"type":"TargetingMod","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[160,-40],"type":"Mount30","dir":0},{"pos":[40,60],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"DamageMod","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[-80,40],"type":"Reactor2x2","dir":0},{"pos":[0,80],"type":"DamageMod","dir":0},{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[80,40],"type":"Reactor2x2","dir":0},{"pos":[-120,40],"type":"Wing2x2","dir":0},{"pos":[120,40],"type":"Wing2x2","dir":0},{"pos":[40,90],"type":"Battery2x1","dir":0},{"pos":[-40,120],"type":"Mount30","dir":0},{"pos":[-80,120],"type":"Mount30","dir":0},{"pos":[40,120],"type":"Mount30","dir":0},{"pos":[80,120],"type":"Mount30","dir":0},{"pos":[-40,90],"type":"Battery2x1","dir":0},{"pos":[-120,120],"type":"Mount30","dir":0},{"pos":[20,-80],"type":"Mount30","dir":0},{"pos":[-20,-80],"type":"Mount30","dir":0},{"pos":[0,-120],"type":"BulletSpeedMod","dir":0},{"pos":[0,-40],"type":"BulletSpeedMod","dir":0},{"pos":[120,120],"type":"Mount30","dir":0},{"pos":[40,-40],"type":"BulletSpeedMod","dir":0},{"pos":[-40,-40],"type":"BulletSpeedMod","dir":0},{"pos":[160,30],"type":"Wing2x1","dir":0},{"pos":[-160,30],"type":"Wing2x1","dir":0},{"pos":[-90,-50],"type":"Engine02","dir":0},{"pos":[90,-50],"type":"Engine02","dir":0},{"pos":[-190,-50],"type":"Engine02","dir":0},{"pos":[190,-50],"type":"Engine02","dir":0},{"pos":[40,-120],"type":"DamageMod","dir":0},{"pos":[-40,-120],"type":"DamageMod","dir":0},{"pos":[-70,-50],"type":"Engine02","dir":0},{"pos":[70,-50],"type":"Engine02","dir":0},{"pos":[70,0],"type":"HArmor1x2","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[-80,80],"type":"HArmor2x2","dir":0},{"pos":[80,80],"type":"HArmor2x2","dir":0},{"pos":[50,-80],"type":"HArmor1x2","dir":0},{"pos":[-50,-80],"type":"HArmor1x2","dir":0},{"pos":[-140,-70],"type":"HArmor1x2Back1","dir":0},{"pos":[140,-70],"type":"HArmor1x2Back1","dir":0},{"pos":[-140,0],"type":"Mount30","dir":0},{"pos":[140,0],"type":"Mount30","dir":0},{"pos":[0,120],"type":"Mount30","dir":0},{"pos":[-120,120],"type":"PDTurret","dir":0},{"pos":[80,120],"type":"PDTurret","dir":0},{"pos":[120,120],"type":"PDTurret","dir":0},{"pos":[-80,120],"type":"PDTurret","dir":0},{"pos":[-40,120],"type":"PDTurret","dir":0},{"pos":[40,120],"type":"PDTurret","dir":0},{"pos":[-160,-40],"type":"TorpTurret","dir":0},{"pos":[100,0],"type":"TorpTurret","dir":0},{"pos":[-140,0],"type":"TorpTurret","dir":0},{"pos":[120,-40],"type":"TorpTurret","dir":0},{"pos":[180,0],"type":"TorpTurret","dir":0},{"pos":[-180,0],"type":"TorpTurret","dir":0},{"pos":[-100,0],"type":"TorpTurret","dir":0},{"pos":[140,0],"type":"TorpTurret","dir":0},{"pos":[-120,-40],"type":"TorpTurret","dir":0},{"pos":[160,-40],"type":"TorpTurret","dir":0},{"pos":[0,40],"type":"MissileTurret","dir":0},{"pos":[20,-80],"type":"ArtilleryTurret","dir":0},{"pos":[-20,-80],"type":"ArtilleryTurret","dir":0},{"pos":[0,120],"type":"BombGun","dir":0}],"name":"","aiRules":[["Field # at priority #",1,3],["Stay in #m range of friendly units",3500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","More HP",900],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less HP","Weaker",900],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","---","---",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Stronger","---",2000],["When #% of energy, @chargeTypes",85,"Find recharger"],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,8]]},{"parts":[{"pos":[-50,70],"type":"Battery1x1","dir":0},{"pos":[0,-40],"type":"Engine07","dir":0},{"pos":[20,0],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[-20,80],"type":"TargetingMod","dir":0},{"pos":[-50,0],"type":"Battery1x2","dir":0},{"pos":[50,0],"type":"Battery1x2","dir":0},{"pos":[-20,0],"type":"ReloaderMod","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[50,70],"type":"Battery1x1","dir":0},{"pos":[20,80],"type":"TargetingMod","dir":0},{"pos":[0,40],"type":"Mount270","dir":0},{"pos":[40,-30],"type":"Wing2x1","dir":0},{"pos":[-40,-30],"type":"Wing2x1","dir":0},{"pos":[-70,40],"type":"UArmor1x2","dir":0},{"pos":[70,40],"type":"UArmor1x2","dir":0},{"pos":[0,40],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",1400,1],["Field # at priority #",1,4],["When #% of energy, @chargeTypes",60,"Find recharger"],["Avoid everything"],["Avoid over #damage shots",30],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Stronger","More Brawling Value",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","---",1000],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,9]]},{"parts":[{"pos":[10,-10],"type":"Battery1x1","dir":0},{"pos":[10,-40],"type":"Engine04","dir":0}],"name":"","aiRules":[["Field # at priority #",1,2],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",1],["Try to field # every # seconds",1,90]]},{"parts":[{"pos":[-40,-60],"type":"HArmor2x2Back1","dir":0},{"pos":[-40,30],"type":"HArmor1x2Front2","dir":0},{"pos":[-40,0],"type":"EnergyTransfer","dir":0},{"pos":[-10,0],"type":"Battery1x2","dir":0},{"pos":[-40,60],"type":"HArmor2x2Front1","dir":0},{"pos":[-40,-30],"type":"HArmor1x2Back2","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[-90,-10],"type":"Engine02","dir":0},{"pos":[-110,10],"type":"Wing1x1Round","dir":0},{"pos":[10,10],"type":"Battery1x1","dir":0},{"pos":[10,-10],"type":"HArmor1x1","dir":0}],"name":"","aiRules":[["Avoid #dps danger areas",10],["Find units that are out of energy"],["When #% of energy, @chargeTypes",97,"Find recharger"],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,45]]},{"parts":[{"pos":[10,10],"type":"Battery1x1","dir":0},{"pos":[20,40],"type":"Mount30","dir":0},{"pos":[30,0],"type":"Engine04","dir":0},{"pos":[50,30],"type":"Wing1x1Round","dir":0},{"pos":[-10,20],"type":"VArmor1x1Corner3","dir":0},{"pos":[10,-10],"type":"VArmor1x1","dir":0},{"pos":[50,10],"type":"VArmor1x1","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",400],["@attackTypes enemy within #m","Attack",350],["Stay in #m range of slot # units",200,9],["Avoid everything"],["Field # at priority #",3,4],["Field # at priority #",1,3],["Field # at priority #",4,5],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",450],["@capTypes Command Points within #m","Spread to",1000]]},{"parts":[{"pos":[20,40],"type":"Mount90","dir":0},{"pos":[10,0],"type":"Engine03","dir":0},{"pos":[-10,10],"type":"Wing1x1Notch","dir":0},{"pos":[50,10],"type":"UArmor1x1Angle","dir":0},{"pos":[30,10],"type":"Reactor1x1","dir":0},{"pos":[30,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@capTypes Command Points within #m","Capture",200],["Stay in #m range of slot # units",300,3],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Stronger","---",1250],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","---","Less Brawling Value",1250],["Field # at priority #",1,5],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","---","Weaker",1000],["Goto @locationTypes","Enemy Army Middle"]]},{"parts":[{"pos":[40,60],"type":"HArmor2x2","dir":0},{"pos":[80,60],"type":"HArmor2x2","dir":0},{"pos":[-40,0],"type":"Mount10Range","dir":0},{"pos":[40,0],"type":"Mount10Range","dir":0},{"pos":[-120,0],"type":"Mount10Range","dir":0},{"pos":[120,0],"type":"Mount10Range","dir":0},{"pos":[0,-20],"type":"TargetingMod","dir":0},{"pos":[80,20],"type":"DamageMod","dir":0},{"pos":[80,-20],"type":"DamageMod","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[-160,-20],"type":"TargetingMod","dir":0},{"pos":[160,-20],"type":"TargetingMod","dir":0},{"pos":[-160,20],"type":"TargetingMod","dir":0},{"pos":[-110,-70],"type":"Engine02","dir":0},{"pos":[110,-70],"type":"Engine02","dir":0},{"pos":[-80,-60],"type":"HArmor2x2","dir":0},{"pos":[-80,20],"type":"DamageMod","dir":0},{"pos":[-40,-60],"type":"HArmor2x2","dir":0},{"pos":[-80,-20],"type":"DamageMod","dir":0},{"pos":[80,-60],"type":"HArmor2x2","dir":0},{"pos":[0,-60],"type":"HArmor2x2","dir":0},{"pos":[40,-60],"type":"HArmor2x2","dir":0},{"pos":[-80,60],"type":"HArmor2x2","dir":0},{"pos":[-40,60],"type":"HArmor2x2","dir":0},{"pos":[10,60],"type":"Battery1x2","dir":0},{"pos":[-10,60],"type":"Battery1x2","dir":0},{"pos":[-80,90],"type":"HArmor2x1","dir":0},{"pos":[-40,90],"type":"HArmor2x1","dir":0},{"pos":[0,90],"type":"HArmor2x1","dir":0},{"pos":[40,90],"type":"HArmor2x1","dir":0},{"pos":[80,90],"type":"HArmor2x1","dir":0},{"pos":[160,20],"type":"TargetingMod","dir":0},{"pos":[-130,-70],"type":"Engine02","dir":0},{"pos":[130,-70],"type":"Engine02","dir":0},{"pos":[120,60],"type":"HArmor2x2","dir":0},{"pos":[-120,60],"type":"HArmor2x2","dir":0},{"pos":[-40,-100],"type":"Wing2x2","dir":0},{"pos":[40,-100],"type":"Wing2x2","dir":0},{"pos":[-40,0],"type":"PlasmaTurret","dir":0},{"pos":[-120,0],"type":"PlasmaTurret","dir":0},{"pos":[40,0],"type":"PlasmaTurret","dir":0},{"pos":[120,0],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",1,2],["Stay in #m range of slot # units",500,1],["Field # at priority #",1,4],["Field # at priority #",2,5],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Has PD",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Less Brawling Value","More expensive",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","---","---",1000],["@attackTypes enemy within #m","Attack",2000],["Avoid #dps danger areas",5],["Goto @locationTypes","Enemy Army Middle"]]}];
ais.all.CubeCollective = ["",{"parts":[{"pos":[-10,-10],"type":"Wing1x1Notch","dir":0},{"pos":[-10,10],"type":"Reactor1x1","dir":0},{"pos":[10,10],"type":"Wing1x1Notch","dir":0},{"pos":[10,-20],"type":"Engine03","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy within #m","Flee",750],["@attackTypes enemy within #m","Flee",1000],["@attackTypes enemy within #m","Flee",1600],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",1],["Field # at priority #",2,2],["Field # at priority #",3,4],["Field # at priority #",3,5],["Field # at priority #",3,6]]},{"parts":[{"pos":[0,20],"type":"Mount180","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[-10,-20],"type":"Engine03","dir":0},{"pos":[30,30],"type":"Wing1x1Angle","dir":0},{"pos":[0,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",150],["When #% of energy, @chargeTypes",15,"Find recharger"],["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Stronger","More Brawling Value",1400],["Avoid over #damage shots",20],["Stay in #m range of slot # units",4000,4],["@attackTypes enemy @unitTypes within #m","Attack","Scout",1500],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less DPS","Less Brawling Value",1500],["@attackTypes enemy within #m","Circle",2000],["@attackTypes enemy @unitTypes within #m","Attack","Scout",3000],["@capTypes Command Points within #m","Protect",5000],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",1],["Field # at priority #",1,5],["Field # at priority #",1,6]]},{"parts":[{"pos":[90,-50],"type":"Wing1x1Round","dir":0},{"pos":[90,40],"type":"HArmor1x2","dir":0},{"pos":[0,80],"type":"Reactor2x2","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-20,40],"type":"TargetingMod","dir":0},{"pos":[60,-40],"type":"Reactor2x2","dir":0},{"pos":[-90,0],"type":"HArmor1x2","dir":0},{"pos":[90,-20],"type":"HArmor1x2","dir":0},{"pos":[20,40],"type":"TargetingMod","dir":0},{"pos":[-90,40],"type":"HArmor1x2","dir":0},{"pos":[90,10],"type":"HArmor1x1","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[30,-90],"type":"Engine01","dir":0},{"pos":[-90,-40],"type":"HArmor1x2","dir":0},{"pos":[50,-90],"type":"Engine01","dir":0},{"pos":[-20,-40],"type":"BulletSpeedMod","dir":0},{"pos":[20,-40],"type":"ReloaderMod","dir":0},{"pos":[10,-90],"type":"Engine01","dir":0},{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[-30,-90],"type":"Engine01","dir":0},{"pos":[-40,90],"type":"Wing2x1","dir":0},{"pos":[40,90],"type":"HArmor2x1","dir":0},{"pos":[-10,-90],"type":"Engine01","dir":0},{"pos":[80,80],"type":"Mount360Micro","dir":0},{"pos":[-60,40],"type":"EnergyTransfer","dir":0},{"pos":[60,40],"type":"Wing2x2","dir":0},{"pos":[-60,-40],"type":"Reactor2x2","dir":0},{"pos":[-50,-90],"type":"HArmor1x1","dir":0},{"pos":[-50,70],"type":"HArmor1x1","dir":0},{"pos":[-80,-80],"type":"Mount360Micro","dir":0},{"pos":[70,-10],"type":"HArmor1x1","dir":0},{"pos":[70,10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,0],"type":"Wing1x2","dir":0},{"pos":[-90,80],"type":"HArmor1x2","dir":0},{"pos":[-70,90],"type":"HArmor1x1","dir":0},{"pos":[-70,70],"type":"HArmor1x1Angle","dir":0},{"pos":[80,-80],"type":"Mount360","dir":0},{"pos":[80,80],"type":"PDTurret","dir":0},{"pos":[-80,-80],"type":"PDTurret","dir":0},{"pos":[80,-80],"type":"FlackTurret","dir":0},{"pos":[0,0],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",100],["@attackTypes enemy within #m","Ram",100],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",300,700],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Faster","---",900],["Avoid over #damage shots",50],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,900],["Stay in #m range of slot # units",500,5],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1300],["Avoid over #damage shots",21],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1400],["@capTypes Command Points within #m","Capture",1500],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","More expensive",300,2500],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,1],["Field # at priority #",1,7],["Field # at priority #",1,8]]},{"parts":[{"pos":[40,70],"type":"Wing2x1","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-20,-40],"type":"ReloaderMod","dir":0},{"pos":[-20,40],"type":"TargetingMod","dir":0},{"pos":[-60,-40],"type":"Reactor2x2","dir":0},{"pos":[60,-40],"type":"Reactor2x2","dir":0},{"pos":[60,40],"type":"Wing2x2","dir":0},{"pos":[-90,0],"type":"HArmor1x2","dir":0},{"pos":[90,-20],"type":"HArmor1x2","dir":0},{"pos":[20,40],"type":"TargetingMod","dir":0},{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[-90,40],"type":"HArmor1x2","dir":0},{"pos":[90,-50],"type":"HArmor1x1","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[-90,-40],"type":"HArmor1x2","dir":0},{"pos":[40,90],"type":"HArmor2x1","dir":0},{"pos":[50,-90],"type":"Engine01","dir":0},{"pos":[20,-40],"type":"ReloaderMod","dir":0},{"pos":[10,-90],"type":"Engine01","dir":0},{"pos":[0,90],"type":"Reactor2x1","dir":0},{"pos":[30,-90],"type":"Engine01","dir":0},{"pos":[90,40],"type":"HArmor1x2","dir":0},{"pos":[-50,90],"type":"HArmor1x1","dir":0},{"pos":[-30,90],"type":"Battery1x1","dir":0},{"pos":[-10,-90],"type":"Engine01","dir":0},{"pos":[-30,-90],"type":"Engine01","dir":0},{"pos":[-50,-70],"type":"HArmor1x1","dir":0},{"pos":[80,-80],"type":"Mount360","dir":0},{"pos":[90,80],"type":"HArmor1x2","dir":0},{"pos":[70,90],"type":"HArmor1x1","dir":0},{"pos":[70,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,40],"type":"Wing1x2","dir":0},{"pos":[-10,70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,70],"type":"HArmor1x1","dir":0},{"pos":[90,10],"type":"Battery1x1","dir":0},{"pos":[70,-10],"type":"Wing1x1Angle","dir":0},{"pos":[-30,70],"type":"Wing1x1Round","dir":0},{"pos":[70,10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,-100],"type":"Engine04","dir":0},{"pos":[-80,-80],"type":"Mount360","dir":0},{"pos":[-80,80],"type":"HArmor2x2","dir":0},{"pos":[80,-80],"type":"PDTurret","dir":0},{"pos":[-80,-80],"type":"HeavyBeamTurret","dir":0},{"pos":[0,0],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Ram",100],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",300,500],["Avoid over #damage shots",100],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",300,700],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Faster","---",700],["Avoid over #damage shots",50],["When #% of energy, @chargeTypes",10,"Flee enemies"],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1300],["Stay in #m range of slot # units",500,4],["Avoid over #damage shots",22],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1400],["@capTypes Command Points within #m","Capture",1500],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","More expensive",300,2500],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,3],["Field # at priority #",1,7],["Field # at priority #",1,7]]},{"parts":[{"pos":[0,0],"type":"Mount180","dir":0},{"pos":[50,10],"type":"Battery1x1","dir":0},{"pos":[40,40],"type":"Mount30","dir":0},{"pos":[-10,50],"type":"Wing1x1Angle","dir":0},{"pos":[50,-20],"type":"Engine03","dir":0},{"pos":[30,-20],"type":"Engine03","dir":0},{"pos":[10,30],"type":"Reactor1x1","dir":0},{"pos":[30,10],"type":"Wing1x1Round","dir":0},{"pos":[-10,30],"type":"Battery1x1","dir":0},{"pos":[10,50],"type":"HArmor1x1","dir":0},{"pos":[40,40],"type":"FlackTurret","dir":0},{"pos":[0,0],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",400],["Avoid over #damage shots",21],["Stay in #m range of slot # units",2000,4],["@attackTypes enemy @unitTypes within #m","Attack","Bomber",800],["@attackTypes enemy @unitTypes within #m","Attack","Interceptor",800],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",800],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",800],["@attackTypes enemy @unitTypes within #m","Flee","Carrier",1500],["@attackTypes enemy @unitTypes within #m","Flee","Battleship",1500],["@attackTypes enemy @unitTypes within #m","Flee","Cruiser",1300],["@attackTypes enemy @unitTypes within #m","Flee","Destroyer",1300],["@capTypes Command Points within #m","Capture",1000],["Stay in #m range of slot # units",400,4],["Stay in #m range of slot # units",500,5],["Goto @locationTypes","Friendly Spawn"],["Field # at priority #",1,4]]},{"parts":[{"pos":[60,40],"type":"Mount30","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0},{"pos":[0,70],"type":"UArmor2x1","dir":0},{"pos":[70,-20],"type":"Engine03","dir":0},{"pos":[70,70],"type":"Wing1x1Angle","dir":0},{"pos":[0,40],"type":"Mount30","dir":0},{"pos":[30,30],"type":"Reactor1x1","dir":0},{"pos":[60,10],"type":"Wing2x1","dir":0},{"pos":[-10,-20],"type":"Engine03","dir":0},{"pos":[30,50],"type":"Wing1x1Notch","dir":0},{"pos":[50,70],"type":"Battery1x1","dir":0},{"pos":[30,70],"type":"UArmor1x1","dir":0},{"pos":[20,0],"type":"Mount30","dir":0},{"pos":[50,-20],"type":"VArmor1x2End","dir":0},{"pos":[60,40],"type":"LightBeamTurret","dir":0},{"pos":[0,40],"type":"LightBeamTurret","dir":0},{"pos":[20,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",8,"Find recharger"],["@attackTypes enemy within #m","Attack",500],["Avoid over #damage shots",21],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","More expensive",1400],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More HP",450,1400],["Stay in #m range of slot # units",2800,4],["Stay in #m range of slot # units",2800,5],["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy within #m","Backstab",750],["@attackTypes enemy @unitTypes within #m","Attack","Bomber",1500],["Stay in #m range of slot # units",600,7],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",1500],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",1500],["@attackTypes enemy @unitTypes within #m","Attack","Scout",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Faster","---",1250],["@capTypes Command Points within #m","Capture",2000],["@capTypes Command Points within #m","Protect",2500],["Stay in #m range of slot # units",500,4],["Stay in #m range of slot # units",500,5],["Field # at priority #",1,2],["Field # at priority #",1,4],["Field # at priority #",1,5],["Field # at priority #",1,6],["Field # at priority #",2,7]]},{"parts":[{"pos":[50,70],"type":"Wing1x1Angle","dir":0},{"pos":[40,90],"type":"HArmor2x1","dir":0},{"pos":[90,40],"type":"HArmor1x2","dir":0},{"pos":[-90,-90],"type":"Engine01","dir":0},{"pos":[0,80],"type":"Reactor2x2","dir":0},{"pos":[-70,-90],"type":"Engine01","dir":0},{"pos":[-50,-90],"type":"HArmor1x1","dir":0},{"pos":[0,-90],"type":"HArmor2x1","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[70,-90],"type":"Engine01","dir":0},{"pos":[-60,-40],"type":"Reactor2x2","dir":0},{"pos":[60,-40],"type":"Reactor2x2","dir":0},{"pos":[90,-90],"type":"Engine01","dir":0},{"pos":[-90,0],"type":"HArmor1x2","dir":0},{"pos":[90,-20],"type":"HArmor1x2","dir":0},{"pos":[90,10],"type":"HArmor1x1","dir":0},{"pos":[90,-50],"type":"HArmor1x1","dir":0},{"pos":[80,80],"type":"Mount360","dir":0},{"pos":[-80,80],"type":"Mount360","dir":0},{"pos":[40,-80],"type":"HArmor2x2","dir":0},{"pos":[-90,-40],"type":"HArmor1x2","dir":0},{"pos":[-50,80],"type":"HArmor1x2","dir":0},{"pos":[-30,-90],"type":"Engine01","dir":0},{"pos":[60,40],"type":"Wing2x2","dir":0},{"pos":[20,-40],"type":"ReloaderMod","dir":0},{"pos":[-20,-40],"type":"ReloaderMod","dir":0},{"pos":[-90,40],"type":"HArmor1x2","dir":0},{"pos":[-70,-10],"type":"HArmor1x1","dir":0},{"pos":[-60,30],"type":"Wing2x1","dir":0},{"pos":[70,-10],"type":"Wing1x1Angle","dir":0},{"pos":[30,70],"type":"HArmor1x1","dir":0},{"pos":[-30,90],"type":"HArmor1x1","dir":0},{"pos":[70,10],"type":"HArmor1x1Angle","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[-40,0],"type":"TargetingMod","dir":0},{"pos":[-20,40],"type":"TargetingMod","dir":0},{"pos":[20,40],"type":"TargetingMod","dir":0},{"pos":[-30,70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[80,80],"type":"PDTurret","dir":0},{"pos":[-80,80],"type":"FlackTurret","dir":0},{"pos":[0,0],"type":"EMPGun","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",100],["@attackTypes enemy within #m","Ram",100],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",300,500],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",300,750],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Faster","---",600],["Avoid over #damage shots",50],["When #% of energy, @chargeTypes",10,"Flee enemies"],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1300],["Stay in #m range of slot # units",300,4],["Stay in #m range of slot # units",300,5],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1400],["@capTypes Command Points within #m","Capture",750],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","More expensive",300,2500],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,6],["Field # at priority #",1,8]]},{"parts":[{"pos":[-10,50],"type":"Wing1x1Angle","dir":0},{"pos":[20,40],"type":"Mount30","dir":0},{"pos":[-10,30],"type":"Battery1x1","dir":0},{"pos":[-10,0],"type":"Engine04","dir":0},{"pos":[10,10],"type":"Reactor1x1","dir":0},{"pos":[30,0],"type":"VArmor1x2End","dir":0},{"pos":[20,40],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",25,"Find recharger"],["@attackTypes enemy within #m","Attack",350],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Flee",500],["@attackTypes enemy within #m","Flee",750],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More expensive","Faster",1100],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Range","---",1100],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Less expensive",250,1000],["@attackTypes enemy within #m","Flee",1100],["@capTypes Command Points within #m","Guard",200],["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",1,25]]},{"parts":[{"pos":[20,40],"type":"Mount360","dir":0},{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[-30,-10],"type":"Engine01","dir":0},{"pos":[70,-10],"type":"Engine01","dir":0},{"pos":[-50,-10],"type":"Engine02","dir":0},{"pos":[90,40],"type":"Reactor1x2","dir":0},{"pos":[80,80],"type":"Reactor2x2","dir":0},{"pos":[90,-10],"type":"Engine02","dir":0},{"pos":[50,120],"type":"Reactor1x2","dir":0},{"pos":[-50,40],"type":"HArmor1x2","dir":0},{"pos":[-20,40],"type":"ReloaderMod","dir":0},{"pos":[40,80],"type":"BulletSpeedMod","dir":0},{"pos":[30,120],"type":"HArmor1x2","dir":0},{"pos":[-30,80],"type":"Battery1x2","dir":0},{"pos":[60,40],"type":"ReloaderMod","dir":0},{"pos":[0,0],"type":"ReloaderMod","dir":0},{"pos":[0,80],"type":"DamageMod","dir":0},{"pos":[-50,80],"type":"Wing1x2","dir":0},{"pos":[-40,120],"type":"Mount360Micro","dir":0},{"pos":[0,120],"type":"Wing2x2","dir":0},{"pos":[80,120],"type":"Mount360Micro","dir":0},{"pos":[-40,120],"type":"PDTurret","dir":0},{"pos":[20,40],"type":"MissileTurret","dir":0},{"pos":[80,120],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",100],["@attackTypes enemy within #m","Ram",100],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",300,750],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Faster","---",900],["Avoid over #damage shots",50],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1100],["Stay in #m range of slot # units",300,4],["Stay in #m range of slot # units",300,5],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",300,1200],["@capTypes Command Points within #m","Capture",1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","More expensive",300,3500],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,4],["Field # at priority #",1,5]]}];
ais.all.Cython = [{"parts":[{"pos":[30,-40],"type":"Engine03","dir":0},{"pos":[-30,-40],"type":"Engine03","dir":0},{"pos":[0,-10],"type":"Battery2x1","dir":0},{"pos":[0,50],"type":"Battery2x1","dir":0},{"pos":[20,20],"type":"Mount90","dir":0},{"pos":[-20,20],"type":"Mount90","dir":0},{"pos":[0,-30],"type":"UArmor2x1","dir":0},{"pos":[-30,50],"type":"Wing1x1Notch","dir":0},{"pos":[30,50],"type":"Wing1x1Notch","dir":0},{"pos":[-30,-10],"type":"UArmor1x1","dir":0},{"pos":[30,-10],"type":"UArmor1x1","dir":0},{"pos":[-20,20],"type":"LightBeamTurret","dir":0},{"pos":[20,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Attack",300],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Capture",10000],["Field # at start",4],["Try to field # every # seconds",1,10]]},{"parts":[{"pos":[30,30],"type":"UArmor1x1","dir":0},{"pos":[-30,30],"type":"UArmor1x1","dir":0},{"pos":[0,20],"type":"Mount90","dir":0},{"pos":[0,50],"type":"Battery2x1","dir":0},{"pos":[-30,50],"type":"Wing1x1Notch","dir":0},{"pos":[30,50],"type":"Wing1x1Notch","dir":0},{"pos":[-30,0],"type":"Engine03","dir":0},{"pos":[30,0],"type":"Engine03","dir":0},{"pos":[0,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Attack",300],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",4],["Try to field # every # seconds",1,10]]},"","","","","","","",{"parts":[{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[0,20],"type":"EnergyTransfer","dir":0},{"pos":[0,-20],"type":"Reactor2x2","dir":0},{"pos":[-30,0],"type":"Battery1x2","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[-30,30],"type":"Wing1x1Notch","dir":0},{"pos":[30,30],"type":"Wing1x1Notch","dir":0}],"name":"","aiRules":[["Avoid everything"],["Find units that are out of energy"],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",1,3,1,5],["Field # for # of ship in slot # at priority #",1,6,2,5]]}];
ais.all.DarkStar = [{"parts":[{"pos":[0,20],"type":"BulletSpeedMod","dir":0},{"pos":[-40,-40],"type":"TargetingMod","dir":0},{"pos":[-70,-90],"type":"Engine02","dir":0},{"pos":[-40,-80],"type":"ReloaderMod","dir":0},{"pos":[-90,-70],"type":"Engine02","dir":0},{"pos":[70,-90],"type":"Engine02","dir":0},{"pos":[90,-70],"type":"Engine02","dir":0},{"pos":[0,90],"type":"Reactor2x1","dir":0},{"pos":[-40,0],"type":"Mount360","dir":0},{"pos":[40,0],"type":"Mount360","dir":0},{"pos":[40,-80],"type":"ReloaderMod","dir":0},{"pos":[0,-60],"type":"Mount360","dir":0},{"pos":[40,80],"type":"Reactor2x2","dir":0},{"pos":[0,-20],"type":"ReloaderMod","dir":0},{"pos":[80,20],"type":"TargetingMod","dir":0},{"pos":[40,40],"type":"TargetingMod","dir":0},{"pos":[-40,40],"type":"TargetingMod","dir":0},{"pos":[80,-20],"type":"TargetingMod","dir":0},{"pos":[-80,20],"type":"TargetingMod","dir":0},{"pos":[-80,-20],"type":"TargetingMod","dir":0},{"pos":[-40,80],"type":"Reactor2x2","dir":0},{"pos":[40,-40],"type":"TargetingMod","dir":0},{"pos":[0,-100],"type":"ReloaderMod","dir":0},{"pos":[30,-130],"type":"Engine02","dir":0},{"pos":[-30,-130],"type":"Engine02","dir":0},{"pos":[0,-140],"type":"Mount360Micro","dir":0},{"pos":[80,60],"type":"Wing2x2","dir":0},{"pos":[-80,60],"type":"Wing2x2","dir":0},{"pos":[-70,-50],"type":"Battery1x1","dir":0},{"pos":[70,-50],"type":"Battery1x1","dir":0},{"pos":[0,60],"type":"VArmor2x2","dir":0},{"pos":[-110,20],"type":"VArmor1x2Corner4","dir":0},{"pos":[110,20],"type":"VArmor1x2Corner4","dir":0},{"pos":[-110,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[110,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-50,-120],"type":"Wing1x2","dir":0},{"pos":[50,-120],"type":"Wing1x2","dir":0},{"pos":[0,-140],"type":"PDTurret","dir":0},{"pos":[-40,0],"type":"MissileTurret","dir":0},{"pos":[40,0],"type":"MissileTurret","dir":0},{"pos":[0,-60],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @absoluteTypes then # within #m","Stay at range","More DPS",1,2100],["@capTypes Command Points within #m","Capture",200],["Avoid over #damage shots",1],["Avoid everything"],["@capTypes Command Points within #m","Protect",10000],["@capTypes Command Points within #m","Spread to",10000],["Goto @locationTypes","Enemy Home Point"],["Goto @locationTypes","Enemy Spawn"],["Field # at priority #",1,3],["Field # at priority #",2,5],["Field # at priority #",3,6]]},{"parts":[],"name":"","aiRules":[]},{"parts":[{"pos":[-30,-110],"type":"Engine02","dir":0},{"pos":[30,-110],"type":"Engine02","dir":0},{"pos":[-20,20],"type":"BulletSpeedMod","dir":0},{"pos":[0,60],"type":"Mount360","dir":0},{"pos":[0,-20],"type":"Mount360","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[20,20],"type":"ReloaderMod","dir":0},{"pos":[20,-60],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[-20,-60],"type":"ReloaderMod","dir":0},{"pos":[-40,60],"type":"ReloaderMod","dir":0},{"pos":[-20,100],"type":"ReloaderMod","dir":0},{"pos":[40,60],"type":"ReloaderMod","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[20,100],"type":"ReloaderMod","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[0,-100],"type":"Mount360Micro","dir":0},{"pos":[-50,20],"type":"Reactor1x2","dir":0},{"pos":[50,20],"type":"Reactor1x2","dir":0},{"pos":[70,20],"type":"Reactor1x2","dir":0},{"pos":[-70,20],"type":"Reactor1x2","dir":0},{"pos":[-70,60],"type":"Reactor1x2","dir":0},{"pos":[70,60],"type":"Reactor1x2","dir":0},{"pos":[70,-20],"type":"Reactor1x2","dir":0},{"pos":[-70,-20],"type":"Reactor1x2","dir":0},{"pos":[-100,0],"type":"Wing2x2","dir":0},{"pos":[100,0],"type":"Wing2x2","dir":0},{"pos":[-70,-60],"type":"Engine04","dir":0},{"pos":[70,-60],"type":"Engine04","dir":0},{"pos":[0,-100],"type":"PDTurret","dir":0},{"pos":[0,-20],"type":"MissileTurret","dir":0},{"pos":[0,60],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Capture",200],["When #% of energy, @chargeTypes",50,"Flee enemies"],["@attackTypes enemy that is @absoluteTypes then # within #m","Stay at range","More DPS",1,1475],["Avoid over #damage shots",1],["Avoid everything"],["@capTypes Command Points within #m","Protect",10000],["@capTypes Command Points within #m","Spread to",10000],["Goto @locationTypes","Enemy Home Point"],["Goto @locationTypes","Enemy Spawn"],["Field # at priority #",2,4],["Field # at priority #",4,5]]},{"parts":[{"pos":[40,100],"type":"Reactor2x2","dir":0},{"pos":[40,60],"type":"ReloaderMod","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[-40,60],"type":"ReloaderMod","dir":0},{"pos":[0,0],"type":"ReloaderMod","dir":0},{"pos":[0,80],"type":"ReloaderMod","dir":0},{"pos":[-40,100],"type":"Reactor2x2","dir":0},{"pos":[40,-20],"type":"Battery2x2","dir":0},{"pos":[-40,-20],"type":"Battery2x2","dir":0},{"pos":[-40,-60],"type":"Reactor2x2","dir":0},{"pos":[40,-60],"type":"Reactor2x2","dir":0},{"pos":[0,-40],"type":"Mount360Micro","dir":0},{"pos":[10,-90],"type":"Engine01","dir":0},{"pos":[-10,-90],"type":"Engine01","dir":0},{"pos":[-70,90],"type":"Engine01","dir":0},{"pos":[-60,140],"type":"Wing2x2","dir":0},{"pos":[60,140],"type":"Wing2x2","dir":0},{"pos":[70,90],"type":"Engine01","dir":0},{"pos":[0,-40],"type":"PDTurret","dir":0},{"pos":[0,40],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Capture",1000],["When Shields down to #%, flee",80],["When #% of energy, @chargeTypes",20,"Rest"],["Goto @locationTypes","Enemy Spawn"],["@attackTypes enemy within #m","Stay at range",900],["Avoid over #damage shots",1],["Avoid everything"],["Field # at priority #",1,6],["Field # for # of ship in slot # at priority #",2,1,2,6]]},{"parts":[{"pos":[0,-80],"type":"Mount360Micro","dir":0},{"pos":[80,80],"type":"Wing2x2","dir":0},{"pos":[0,-110],"type":"ShieldGen2x1","dir":0},{"pos":[0,80],"type":"Mount360","dir":0},{"pos":[20,40],"type":"ReloaderMod","dir":0},{"pos":[0,0],"type":"Mount360Micro","dir":0},{"pos":[-20,40],"type":"ReloaderMod","dir":0},{"pos":[-40,80],"type":"TargetingMod","dir":0},{"pos":[60,40],"type":"Reactor2x2","dir":0},{"pos":[40,80],"type":"TargetingMod","dir":0},{"pos":[-60,40],"type":"Reactor2x2","dir":0},{"pos":[-20,120],"type":"TargetingMod","dir":0},{"pos":[20,120],"type":"TargetingMod","dir":0},{"pos":[-80,80],"type":"Wing2x2","dir":0},{"pos":[-20,-40],"type":"ReloaderMod","dir":0},{"pos":[20,-40],"type":"ReloaderMod","dir":0},{"pos":[-50,-50],"type":"Engine02","dir":0},{"pos":[-70,-50],"type":"Engine02","dir":0},{"pos":[50,-50],"type":"Engine02","dir":0},{"pos":[70,-50],"type":"Engine02","dir":0},{"pos":[-30,-90],"type":"Engine02","dir":0},{"pos":[30,-90],"type":"Engine02","dir":0},{"pos":[-40,0],"type":"Reactor2x2","dir":0},{"pos":[40,0],"type":"Reactor2x2","dir":0},{"pos":[0,-80],"type":"PDTurret","dir":0},{"pos":[0,0],"type":"MissileTurret","dir":0},{"pos":[0,80],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Capture",200],["When Shields down to #%, flee",80],["@capTypes Command Points within #m","Protect",10000],["When #% of energy, @chargeTypes",20,"Find recharger"],["When #% of energy, @chargeTypes",20,"Flee enemies"],["Avoid over #damage shots",1],["Avoid everything"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","More Range","Faster",3000],["@attackTypes enemy that is @absoluteTypes then # within #m","Stay at range","More DPS",1,1700],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Less Range",1100,1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","More Range","Slower",1700],["@capTypes Command Points within #m","Spread to",10000],["Goto @locationTypes","Enemy Home Point"],["Goto @locationTypes","Enemy Spawn"],["Field # at priority #",2,5],["Field # at priority #",4,6],["Field # for # of ship in slot # at priority #",6,1,2,5]]},{"parts":[{"pos":[0,20],"type":"Reactor2x2","dir":0},{"pos":[50,-90],"type":"Engine02","dir":0},{"pos":[0,100],"type":"Mount360","dir":0},{"pos":[40,40],"type":"Reactor2x2","dir":0},{"pos":[-40,40],"type":"Reactor2x2","dir":0},{"pos":[-40,120],"type":"TargetingMod","dir":0},{"pos":[-30,-90],"type":"Engine02","dir":0},{"pos":[-40,80],"type":"ReloaderMod","dir":0},{"pos":[40,80],"type":"ReloaderMod","dir":0},{"pos":[40,120],"type":"TargetingMod","dir":0},{"pos":[0,140],"type":"ReloaderMod","dir":0},{"pos":[-40,-40],"type":"ReloaderMod","dir":0},{"pos":[0,60],"type":"TargetingMod","dir":0},{"pos":[30,-90],"type":"Engine02","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[0,-60],"type":"Mount360","dir":0},{"pos":[0,-20],"type":"Mount360","dir":0},{"pos":[-30,0],"type":"Battery1x2","dir":0},{"pos":[40,-40],"type":"ReloaderMod","dir":0},{"pos":[-50,-90],"type":"Engine02","dir":0},{"pos":[50,10],"type":"ShieldGen1x1","dir":0},{"pos":[-60,0],"type":"Wing2x2","dir":0},{"pos":[-10,-110],"type":"Engine02","dir":0},{"pos":[10,-110],"type":"Engine02","dir":0},{"pos":[-70,-50],"type":"Engine02","dir":0},{"pos":[70,-70],"type":"Engine02","dir":0},{"pos":[70,-30],"type":"Wing1x1Angle","dir":0},{"pos":[30,160],"type":"Wing1x2","dir":0},{"pos":[0,100],"type":"HeavyBeamTurret","dir":0},{"pos":[0,-20],"type":"PDTurret","dir":0},{"pos":[0,-60],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Capture",200],["When Shields down to #%, flee",80],["@attackTypes enemy within #m","Stay at range",970],["@capTypes Command Points within #m","Protect",10000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","Less Range",2000],["Stay in #m range of friendly units",500],["Avoid everything"],["Avoid over #damage shots",1],["@capTypes Command Points within #m","Spread to",10000],["Goto @locationTypes","Enemy Home Point"],["Goto @locationTypes","Enemy Spawn"],["Field # at priority #",1,5],["Field # at priority #",2,5],["Field # for # of ship in slot # at priority #",2,1,2,5]]},{"parts":[{"pos":[-30,-10],"type":"Reactor1x1","dir":0},{"pos":[-30,-40],"type":"Engine03","dir":0},{"pos":[-50,-30],"type":"Wing1x1Notch","dir":0},{"pos":[-50,-10],"type":"Wing1x1Notch","dir":0},{"pos":[0,-20],"type":"CloakGenerator","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @absoluteTypes then # within #m","Stay at range","More DPS",1,500],["@attackTypes enemy within #m","Flee",200],["@capTypes Command Points within #m","Capture",100],["Stayaway in #m range from slot # units",200,7],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",3],["Try to field # every # seconds",1,60]]},{"parts":[{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[40,-100],"type":"ReloaderMod","dir":0},{"pos":[30,-150],"type":"Engine02","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-30,-150],"type":"Engine02","dir":0},{"pos":[0,-80],"type":"Mount360","dir":0},{"pos":[0,40],"type":"TargetingMod","dir":0},{"pos":[40,100],"type":"ReloaderMod","dir":0},{"pos":[-40,100],"type":"ReloaderMod","dir":0},{"pos":[-60,-140],"type":"Mount360Micro","dir":0},{"pos":[0,120],"type":"ReloaderMod","dir":0},{"pos":[0,80],"type":"Mount360","dir":0},{"pos":[40,-60],"type":"ReloaderMod","dir":0},{"pos":[90,-150],"type":"Engine02","dir":0},{"pos":[-90,-150],"type":"Engine02","dir":0},{"pos":[-40,-60],"type":"ReloaderMod","dir":0},{"pos":[-80,-60],"type":"Battery2x2","dir":0},{"pos":[-40,-100],"type":"ReloaderMod","dir":0},{"pos":[-80,-100],"type":"Reactor2x2","dir":0},{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[0,-120],"type":"ReloaderMod","dir":0},{"pos":[0,-160],"type":"Mount360Micro","dir":0},{"pos":[60,-140],"type":"Mount360Micro","dir":0},{"pos":[80,-100],"type":"Reactor2x2","dir":0},{"pos":[80,-60],"type":"Battery2x2","dir":0},{"pos":[40,60],"type":"ReloaderMod","dir":0},{"pos":[-40,60],"type":"ReloaderMod","dir":0},{"pos":[80,-20],"type":"Wing2x2","dir":0},{"pos":[-80,-20],"type":"Wing2x2","dir":0},{"pos":[0,-160],"type":"PDTurret","dir":0},{"pos":[0,-80],"type":"FlackTurret","dir":0},{"pos":[0,0],"type":"PlasmaTurret","dir":0},{"pos":[-60,-140],"type":"RingTurret","dir":0},{"pos":[60,-140],"type":"RingTurret","dir":0},{"pos":[0,80],"type":"BombGun","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",60,"Find recharger"],["When #% of energy, @chargeTypes",10,"Rest"],["Avoid over #damage shots",1],["Avoid everything"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Less Range","---",1500],["Stay in #m range of slot # units",1000,9],["Field # for # of ship in slot # at priority #",1,1,9,3],["Field # for # of ship in slot # at priority #",2,2,9,3],["Goto @locationTypes","Enemy Spawn"]]},{"parts":[{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[0,-80],"type":"EnergyTransfer","dir":0},{"pos":[-40,60],"type":"Reactor2x2","dir":0},{"pos":[40,100],"type":"Reactor2x2","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[40,60],"type":"Reactor2x2","dir":0},{"pos":[40,-60],"type":"Reactor2x2","dir":0},{"pos":[-40,100],"type":"Reactor2x2","dir":0},{"pos":[-40,-60],"type":"Reactor2x2","dir":0},{"pos":[-50,-110],"type":"Engine02","dir":0},{"pos":[50,-110],"type":"Engine02","dir":0},{"pos":[0,-120],"type":"Mount360Micro","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[-80,-80],"type":"Mount360","dir":0},{"pos":[80,-80],"type":"Mount360","dir":0},{"pos":[-80,-50],"type":"Wing2x1","dir":0},{"pos":[30,130],"type":"Wing1x1Angle","dir":0},{"pos":[-30,130],"type":"Wing1x1Notch","dir":0},{"pos":[0,-120],"type":"PDTurret","dir":0},{"pos":[0,0],"type":"FlackTurret","dir":0},{"pos":[-80,-80],"type":"RingTurret","dir":0},{"pos":[80,-80],"type":"RingTurret","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Capture",200],["Avoid over #damage shots",1],["Avoid everything"],["When #% of energy, @chargeTypes",20,"Rest"],["@attackTypes enemy within #m","Stay at range",3000],["Find units that are out of energy"],["Stay in #m range of slot # units",1000,1],["Goto @locationTypes","Enemy Spawn"],["Field # at priority #",1,5],["Field # for # of ship in slot # at priority #",2,1,2,5]]},{"parts":[{"pos":[60,-40],"type":"Wing2x2","dir":0},{"pos":[-50,-130],"type":"Engine01","dir":0},{"pos":[20,-40],"type":"TargetingMod","dir":0},{"pos":[10,-130],"type":"Engine01","dir":0},{"pos":[-20,-120],"type":"Battery2x2","dir":0},{"pos":[-20,-40],"type":"Mount30","dir":0},{"pos":[-60,-40],"type":"TargetingMod","dir":0},{"pos":[-100,-40],"type":"Wing2x2","dir":0},{"pos":[0,0],"type":"TargetingMod","dir":0},{"pos":[-40,0],"type":"TargetingMod","dir":0},{"pos":[0,-80],"type":"BulletSpeedMod","dir":0},{"pos":[-40,-80],"type":"BulletSpeedMod","dir":0},{"pos":[-20,-40],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",40,"Find recharger"],["@capTypes Command Points within #m","Capture",200],["Stay in #m range of slot # units",2000,9],["@attackTypes enemy within #m","Stay at range",1700],["Stayaway in #m range from slot # units",10,10],["Avoid over #damage shots",1],["Avoid #dps danger areas",1],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Slower",100,3500],["@attackTypes enemy within #m","Kite",3500],["Field # for # of ship in slot # at priority #",6,1,9,5],["Goto @locationTypes","Enemy Spawn"]]}];
ais.all.DeathStrike = [{"parts":[{"pos":[-120,-100],"type":"Engine07","dir":0},{"pos":[120,-100],"type":"Engine07","dir":0},{"pos":[0,40],"type":"Battery2x2","dir":0},{"pos":[40,40],"type":"Battery2x2","dir":0},{"pos":[-40,40],"type":"Battery2x2","dir":0},{"pos":[-40,-40],"type":"Battery2x2","dir":0},{"pos":[0,-40],"type":"Battery2x2","dir":0},{"pos":[40,-40],"type":"Battery2x2","dir":0},{"pos":[-40,80],"type":"ReloaderMod","dir":0},{"pos":[-80,80],"type":"ReloaderMod","dir":0},{"pos":[40,80],"type":"ReloaderMod","dir":0},{"pos":[-60,120],"type":"Mount270","dir":0},{"pos":[80,80],"type":"ReloaderMod","dir":0},{"pos":[-100,120],"type":"ReloaderMod","dir":0},{"pos":[60,120],"type":"Mount270","dir":0},{"pos":[-80,160],"type":"ReloaderMod","dir":0},{"pos":[20,120],"type":"ReloaderMod","dir":0},{"pos":[40,160],"type":"ReloaderMod","dir":0},{"pos":[-40,160],"type":"ReloaderMod","dir":0},{"pos":[-20,120],"type":"ReloaderMod","dir":0},{"pos":[80,160],"type":"ReloaderMod","dir":0},{"pos":[100,120],"type":"ReloaderMod","dir":0},{"pos":[-20,0],"type":"Battery2x2","dir":0},{"pos":[-120,40],"type":"ReloaderMod","dir":0},{"pos":[20,0],"type":"Battery2x2","dir":0},{"pos":[-120,-40],"type":"ReloaderMod","dir":0},{"pos":[-160,-40],"type":"ReloaderMod","dir":0},{"pos":[-180,0],"type":"ReloaderMod","dir":0},{"pos":[120,40],"type":"ReloaderMod","dir":0},{"pos":[180,0],"type":"ReloaderMod","dir":0},{"pos":[160,40],"type":"ReloaderMod","dir":0},{"pos":[120,-40],"type":"ReloaderMod","dir":0},{"pos":[160,-40],"type":"ReloaderMod","dir":0},{"pos":[-160,40],"type":"ReloaderMod","dir":0},{"pos":[100,0],"type":"ReloaderMod","dir":0},{"pos":[140,0],"type":"Mount270","dir":0},{"pos":[-140,0],"type":"Mount270","dir":0},{"pos":[-100,0],"type":"ReloaderMod","dir":0},{"pos":[0,-160],"type":"Engine07","dir":0},{"pos":[40,-120],"type":"Engine07","dir":0},{"pos":[0,-80],"type":"Battery2x2","dir":0},{"pos":[-40,-80],"type":"Battery2x2","dir":0},{"pos":[40,-80],"type":"Battery2x2","dir":0},{"pos":[-140,120],"type":"Wing2x2","dir":0},{"pos":[0,-120],"type":"Battery2x2","dir":0},{"pos":[-160,80],"type":"Wing2x2","dir":0},{"pos":[160,80],"type":"Wing2x2","dir":0},{"pos":[140,120],"type":"Wing2x2","dir":0},{"pos":[-80,-100],"type":"Engine07","dir":0},{"pos":[190,40],"type":"Wing1x2","dir":0},{"pos":[80,-100],"type":"Engine07","dir":0},{"pos":[0,90],"type":"ShieldGen2x1","dir":0},{"pos":[80,-70],"type":"Battery2x1","dir":0},{"pos":[-80,-70],"type":"Battery2x1","dir":0},{"pos":[-190,40],"type":"Wing1x2","dir":0},{"pos":[-120,-70],"type":"Battery2x1","dir":0},{"pos":[120,-70],"type":"Battery2x1","dir":0},{"pos":[-120,80],"type":"ShieldGen2x2","dir":0},{"pos":[120,80],"type":"ShieldGen2x2","dir":0},{"pos":[-10,70],"type":"ShieldGen1x1","dir":0},{"pos":[10,70],"type":"ShieldGen1x1","dir":0},{"pos":[70,50],"type":"ShieldGen1x1","dir":0},{"pos":[90,50],"type":"ShieldGen1x1","dir":0},{"pos":[90,30],"type":"ShieldGen1x1","dir":0},{"pos":[70,30],"type":"ShieldGen1x1","dir":0},{"pos":[70,10],"type":"ShieldGen1x1","dir":0},{"pos":[50,10],"type":"ShieldGen1x1","dir":0},{"pos":[50,-10],"type":"ShieldGen1x1","dir":0},{"pos":[70,-10],"type":"ShieldGen1x1","dir":0},{"pos":[70,-30],"type":"ShieldGen1x1","dir":0},{"pos":[90,-30],"type":"ShieldGen1x1","dir":0},{"pos":[90,-50],"type":"ShieldGen1x1","dir":0},{"pos":[70,-50],"type":"ShieldGen1x1","dir":0},{"pos":[-70,-50],"type":"ShieldGen1x1","dir":0},{"pos":[-90,-50],"type":"ShieldGen1x1","dir":0},{"pos":[-90,-30],"type":"ShieldGen1x1","dir":0},{"pos":[-70,-30],"type":"ShieldGen1x1","dir":0},{"pos":[-70,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-50,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-70,10],"type":"ShieldGen1x1","dir":0},{"pos":[-50,10],"type":"ShieldGen1x1","dir":0},{"pos":[-70,30],"type":"ShieldGen1x1","dir":0},{"pos":[-70,50],"type":"ShieldGen1x1","dir":0},{"pos":[-90,50],"type":"ShieldGen1x1","dir":0},{"pos":[-90,30],"type":"ShieldGen1x1","dir":0},{"pos":[-40,-120],"type":"Engine07","dir":0},{"pos":[-170,-80],"type":"UArmor1x2","dir":0},{"pos":[-150,-80],"type":"UArmor1x2","dir":0},{"pos":[-150,-120],"type":"UArmor1x2","dir":0},{"pos":[-170,-120],"type":"UArmor1x2","dir":0},{"pos":[150,-80],"type":"UArmor1x2","dir":0},{"pos":[170,-80],"type":"UArmor1x2","dir":0},{"pos":[170,-120],"type":"UArmor1x2","dir":0},{"pos":[150,-120],"type":"UArmor1x2","dir":0},{"pos":[150,-160],"type":"UArmor1x2","dir":0},{"pos":[-150,-160],"type":"UArmor1x2","dir":0},{"pos":[-190,-80],"type":"UArmor1x2","dir":0},{"pos":[190,-80],"type":"UArmor1x2","dir":0},{"pos":[10,150],"type":"ShieldGen1x1","dir":0},{"pos":[-10,150],"type":"ShieldGen1x1","dir":0},{"pos":[-10,170],"type":"ShieldGen1x1","dir":0},{"pos":[10,170],"type":"ShieldGen1x1","dir":0},{"pos":[-190,-110],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-170,-150],"type":"UArmor1x1AngleBack","dir":0},{"pos":[170,-150],"type":"UArmor1x1AngleBack","dir":0},{"pos":[190,-110],"type":"UArmor1x1AngleBack","dir":0},{"pos":[210,-40],"type":"Wing1x2","dir":0},{"pos":[-210,-40],"type":"Wing1x2","dir":0},{"pos":[-190,-40],"type":"Battery1x2","dir":0},{"pos":[190,-40],"type":"Battery1x2","dir":0},{"pos":[-140,0],"type":"AutoTurret","dir":0},{"pos":[140,0],"type":"AutoTurret","dir":0},{"pos":[-60,120],"type":"RingTurret","dir":0},{"pos":[60,120],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",99],["When #% of energy, @chargeTypes",45,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Run-by","Less Arc",100,1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","Slower",400,1000],["@capTypes Command Points within #m","Protect",10000],["When #% of energy, @chargeTypes",95,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More Range",1100,1700],["Avoid #dps danger areas",50]]},{"parts":[{"pos":[-40,0],"type":"TargetingMod","dir":0},{"pos":[70,0],"type":"VArmor1x1CornerBack","dir":0},{"pos":[40,40],"type":"TargetingMod","dir":0},{"pos":[-70,40],"type":"VArmor1x1Corner3","dir":0},{"pos":[30,80],"type":"VArmor1x2Corner4","dir":0},{"pos":[-90,30],"type":"HArmor1x1Angle","dir":0},{"pos":[90,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,80],"type":"VArmor1x2Corner4","dir":0},{"pos":[70,40],"type":"VArmor1x1Corner3","dir":0},{"pos":[-70,0],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-90,10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-40,40],"type":"TargetingMod","dir":0},{"pos":[90,10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[0,20],"type":"Mount10Range","dir":0},{"pos":[-50,70],"type":"Wing1x1Angle","dir":0},{"pos":[50,70],"type":"Wing1x1Angle","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[0,-30],"type":"Battery2x1","dir":0},{"pos":[0,20],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",90],["@attackTypes enemy within #m","Attack",2000],["@capTypes Command Points within #m","Capture",10000],["Stay in #m range of slot # units",500,2],["Field # at start",4],["Try to field # every # seconds",2,30]]},{"parts":[{"pos":[-10,-20],"type":"Engine03","dir":0},{"pos":[10,-10],"type":"Battery1x1","dir":0},{"pos":[-30,-10],"type":"Wing1x1Angle","dir":0},{"pos":[0,20],"type":"Mount360Micro","dir":0},{"pos":[0,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",25],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","---",1000],["@capTypes Command Points within #m","Protect",10000],["Stayaway in #m range from slot # units",400,3],["Stay in #m range of slot # units",400,1],["Goto @locationTypes","Enemy Army Middle"],["Try to field # every # seconds",1,25],["Field # at start",1]]},{"parts":[{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[0,0],"type":"ReloaderMod","dir":0},{"pos":[-40,60],"type":"TargetingMod","dir":0},{"pos":[40,60],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[0,80],"type":"BulletSpeedMod","dir":0},{"pos":[-40,-10],"type":"Battery2x1","dir":0},{"pos":[0,40],"type":"Mount90","dir":0},{"pos":[40,-10],"type":"Battery2x1","dir":0},{"pos":[0,-40],"type":"Engine07","dir":0},{"pos":[30,-30],"type":"Battery1x1","dir":0},{"pos":[-30,-30],"type":"Battery1x1","dir":0},{"pos":[-50,-30],"type":"ShieldGen1x1","dir":0},{"pos":[50,-30],"type":"ShieldGen1x1","dir":0},{"pos":[30,-50],"type":"ShieldGen1x1","dir":0},{"pos":[-30,-50],"type":"ShieldGen1x1","dir":0},{"pos":[-70,20],"type":"VArmor1x2Corner4","dir":0},{"pos":[70,20],"type":"VArmor1x2Corner4","dir":0},{"pos":[70,-20],"type":"VArmor1x2Corner4","dir":0},{"pos":[-70,-20],"type":"VArmor1x2Corner4","dir":0},{"pos":[-50,-50],"type":"Wing1x1Round","dir":0},{"pos":[50,-50],"type":"Wing1x1Round","dir":0},{"pos":[0,40],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Weaker","Less Range",1000],["Stay in #m range of slot # units",500,2],["When #% of energy, @chargeTypes",50,"Find recharger"],["Avoid #dps danger areas",10],["Avoid over #damage shots",20],["Field # for # of @needTypes at priority #",1,5,"Fighter Counter Need",2],["Try to field # every # seconds",1,45]]},"",{"parts":[],"name":"","aiRules":[]},{"parts":[],"name":"","aiRules":[]},{"parts":[],"name":"","aiRules":[]},"",{"parts":[{"pos":[120,-40],"type":"EnergyTransfer","dir":0},{"pos":[120,40],"type":"EnergyTransfer","dir":0},{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[40,40],"type":"Reactor2x2","dir":0},{"pos":[-40,40],"type":"Reactor2x2","dir":0},{"pos":[40,-40],"type":"Reactor2x2","dir":0},{"pos":[-40,-40],"type":"Reactor2x2","dir":0},{"pos":[0,-60],"type":"Reactor2x2","dir":0},{"pos":[0,60],"type":"Reactor2x2","dir":0},{"pos":[-60,0],"type":"Reactor2x2","dir":0},{"pos":[60,0],"type":"Reactor2x2","dir":0},{"pos":[-30,0],"type":"Battery1x2","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[0,30],"type":"Battery2x1","dir":0},{"pos":[0,-30],"type":"Battery2x1","dir":0},{"pos":[0,100],"type":"EnergyTransfer","dir":0},{"pos":[-100,0],"type":"EnergyTransfer","dir":0},{"pos":[100,0],"type":"EnergyTransfer","dir":0},{"pos":[-40,80],"type":"EnergyTransfer","dir":0},{"pos":[-80,40],"type":"EnergyTransfer","dir":0},{"pos":[40,80],"type":"EnergyTransfer","dir":0},{"pos":[-80,-40],"type":"EnergyTransfer","dir":0},{"pos":[-40,-80],"type":"EnergyTransfer","dir":0},{"pos":[0,-100],"type":"EnergyTransfer","dir":0},{"pos":[-120,-40],"type":"EnergyTransfer","dir":0},{"pos":[40,-80],"type":"EnergyTransfer","dir":0},{"pos":[80,40],"type":"EnergyTransfer","dir":0},{"pos":[80,-40],"type":"EnergyTransfer","dir":0},{"pos":[-120,40],"type":"EnergyTransfer","dir":0},{"pos":[-40,120],"type":"EnergyTransfer","dir":0},{"pos":[40,120],"type":"EnergyTransfer","dir":0},{"pos":[40,-120],"type":"EnergyTransfer","dir":0},{"pos":[-40,-120],"type":"EnergyTransfer","dir":0},{"pos":[80,-80],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-80,-80],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-80,80],"type":"HArmor2x2Angle","dir":0},{"pos":[80,80],"type":"HArmor2x2Angle","dir":0},{"pos":[0,-140],"type":"ShieldGen2x2","dir":0},{"pos":[0,140],"type":"ShieldGen2x2","dir":0},{"pos":[-130,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-150,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-150,10],"type":"ShieldGen1x1","dir":0},{"pos":[-130,10],"type":"ShieldGen1x1","dir":0},{"pos":[130,10],"type":"ShieldGen1x1","dir":0},{"pos":[150,10],"type":"ShieldGen1x1","dir":0},{"pos":[150,-10],"type":"ShieldGen1x1","dir":0},{"pos":[130,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-110,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,110],"type":"HArmor1x1Angle","dir":0},{"pos":[70,-110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,-110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-110,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[110,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[110,70],"type":"HArmor1x1Angle","dir":0},{"pos":[70,110],"type":"HArmor1x1Angle","dir":0},{"pos":[30,150],"type":"HArmor1x1Angle","dir":0},{"pos":[150,30],"type":"HArmor1x1Angle","dir":0},{"pos":[150,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-150],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,-150],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,150],"type":"HArmor1x1Angle","dir":0},{"pos":[-150,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-150,-30],"type":"HArmor1x1AngleBack","dir":0}],"name":"","aiRules":[]}];
ais.all.DeltaSwarm = ["","","","","","","",{"parts":[{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[-50,-30],"type":"Wing1x1Round","dir":0},{"pos":[30,-30],"type":"VArmor1x1Corner2","dir":0},{"pos":[0,-20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # at start",5],["Field # at priority #",12,4],["@attackTypes enemy within #m","Attack",300],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Spread to",10000]]},{"parts":[{"pos":[-30,-30],"type":"Battery1x1","dir":0},{"pos":[30,-20],"type":"VArmor1x1Corner3","dir":0},{"pos":[-50,-20],"type":"VArmor1x1Corner3","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[-30,-50],"type":"Wing1x1Round","dir":0},{"pos":[10,-50],"type":"VArmor1x1Corner2","dir":0},{"pos":[-10,-60],"type":"Engine03","dir":0},{"pos":[0,-20],"type":"Mount180","dir":0},{"pos":[0,-20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # at start",3],["Field # at priority #",3,2],["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","Less Arc",200,2000],["@attackTypes enemy within #m","Attack",3000],["@capTypes Command Points within #m","Capture",10000]]},{"parts":[{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[10,10],"type":"VArmor1x1Corner1","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0},{"pos":[0,-20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # at start",30],["Field # at priority #",5,3],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Attack",300],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","---",2000],["Goto @locationTypes","Enemy Home Point"]]}];
ais.all.Dodgey = [{"parts":[{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[0,-30],"type":"Reactor2x1","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[30,-20],"type":"Engine04","dir":0},{"pos":[30,10],"type":"Wing1x1Round","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Spread to",10000],["Field # at start",3],["Try to field # every # seconds",3,30]]},{"parts":[{"pos":[-80,-50],"type":"Reactor2x1","dir":0},{"pos":[0,30],"type":"Reactor2x1","dir":0},{"pos":[30,-100],"type":"Engine04","dir":0},{"pos":[-40,-60],"type":"Mount30","dir":0},{"pos":[40,-60],"type":"Mount30","dir":0},{"pos":[0,-40],"type":"Mount30","dir":0},{"pos":[-40,20],"type":"HArmor2x2Angle","dir":0},{"pos":[-30,-100],"type":"Engine04","dir":0},{"pos":[0,-80],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"HArmor2x2Angle","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[-80,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[40,-10],"type":"Reactor2x1","dir":0},{"pos":[-40,-10],"type":"Reactor2x1","dir":0},{"pos":[80,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[80,-50],"type":"Reactor2x1","dir":0},{"pos":[-40,-30],"type":"HArmor2x1","dir":0},{"pos":[40,-30],"type":"HArmor2x1","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0},{"pos":[-40,-60],"type":"PlasmaTurret","dir":0},{"pos":[40,-60],"type":"PlasmaTurret","dir":0},{"pos":[0,-40],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Guard",10000],["Field # at priority #",1,1],["Field # at priority #",2,3]]},"","","","","","","",""];
ais.all.DoomTrain = ["",{"parts":[{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[10,10],"type":"Battery1x1","dir":0},{"pos":[30,10],"type":"Wing1x1Notch","dir":0},{"pos":[-10,10],"type":"Wing1x1Notch","dir":0}],"name":"","aiRules":[["Field # at start",3],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Flee",1400],["@attackTypes enemy within #m","Circle",1600],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",2,1],["Field # at priority #",2,2],["Field # at priority #",1,3],["Field # at priority #",1,4],["Field # at priority #",1,5]]},{"parts":[{"pos":[10,-30],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[10,30],"type":"Battery1x1","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[-10,30],"type":"Wing1x1Round","dir":0},{"pos":[30,-10],"type":"UArmor1x1","dir":0},{"pos":[30,-30],"type":"UArmor1x1AngleBack","dir":0},{"pos":[30,10],"type":"Wing1x1Notch","dir":0},{"pos":[0,0],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["Stay in #m range of friendly units",3500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","---","---",260],["@attackTypes enemy within #m","Bomb",700],["Stay in #m range of slot # units",500,3],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","More expensive",140,2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","---",2000],["@attackTypes enemy within #m","Backstab",2000],["@capTypes Command Points within #m","Capture",2500],["Stay in #m range of slot # units",600,4],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",8,2,5,3]]},{"parts":[{"pos":[-90,0],"type":"Wing1x2","dir":0},{"pos":[30,-30],"type":"Battery1x1","dir":0},{"pos":[0,60],"type":"TargetingMod","dir":0},{"pos":[40,40],"type":"TargetingMod","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"TargetingMod","dir":0},{"pos":[-30,-30],"type":"HArmor1x1","dir":0},{"pos":[-70,110],"type":"Wing1x1Angle","dir":0},{"pos":[0,100],"type":"Reactor2x2","dir":0},{"pos":[40,70],"type":"HArmor2x1","dir":0},{"pos":[-40,70],"type":"HArmor2x1","dir":0},{"pos":[50,-30],"type":"HArmor1x1","dir":0},{"pos":[0,-20],"type":"TargetingMod","dir":0},{"pos":[-50,-30],"type":"HArmor1x1","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[10,-70],"type":"Engine02","dir":0},{"pos":[-10,-70],"type":"Engine02","dir":0},{"pos":[0,20],"type":"Mount270","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[0,130],"type":"HArmor2x1","dir":0},{"pos":[-40,130],"type":"HArmor2x1","dir":0},{"pos":[-70,-10],"type":"Battery1x1","dir":0},{"pos":[80,-70],"type":"Battery2x1","dir":0},{"pos":[70,-10],"type":"Battery1x1","dir":0},{"pos":[90,0],"type":"Wing1x2","dir":0},{"pos":[40,130],"type":"HArmor2x1","dir":0},{"pos":[70,110],"type":"Battery1x1","dir":0},{"pos":[40,100],"type":"Mount30","dir":0},{"pos":[-40,100],"type":"Mount30","dir":0},{"pos":[-80,80],"type":"Mount30","dir":0},{"pos":[-80,-30],"type":"Battery2x1","dir":0},{"pos":[-70,-70],"type":"Engine02","dir":0},{"pos":[-90,-60],"type":"HArmor1x2","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[-80,40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[70,130],"type":"HArmor1x1Angle","dir":0},{"pos":[90,110],"type":"HArmor1x1Angle","dir":0},{"pos":[80,80],"type":"Mount360Micro","dir":0},{"pos":[70,10],"type":"Battery1x1","dir":0},{"pos":[-70,10],"type":"HArmor1x1","dir":0},{"pos":[40,-60],"type":"Mount90","dir":0},{"pos":[80,-40],"type":"Mount30","dir":0},{"pos":[0,20],"type":"HeavyBeamTurret","dir":0},{"pos":[80,80],"type":"PDTurret","dir":0},{"pos":[-80,80],"type":"TorpTurret","dir":0},{"pos":[80,-40],"type":"TorpTurret","dir":0},{"pos":[40,-60],"type":"FlackTurret","dir":0},{"pos":[40,100],"type":"RingTurret","dir":0},{"pos":[-40,100],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",100],["@attackTypes enemy within #m","Attack",350],["When #% of energy, @chargeTypes",5,"Flee enemies"],["@attackTypes enemy within #m","Ram",800],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","More Range","Slower",1100],["Avoid over #damage shots",50],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Range","More DPS",1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","More Brawling Value","Less expensive",1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Range","More DPS",1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","More Range","Less DPS",1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","---","Less Brawling Value",1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","---",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","More expensive","---",1500],["@attackTypes enemy within #m","Ram",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","---",3000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","---","More expensive",3000],["@attackTypes enemy within #m","Backstab",3000],["Stay in #m range of slot # units",400,4],["@capTypes Command Points within #m","Capture",10000],["Field # at start",2],["Field # at priority #",1,1],["Try to field # every # seconds",1,120],["Field # at priority #",1,3]]},{"parts":[{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[10,-50],"type":"Battery1x1","dir":0},{"pos":[-10,10],"type":"Wing1x1Angle","dir":0},{"pos":[10,10],"type":"Battery1x1","dir":0},{"pos":[30,-50],"type":"Wing1x1Angle","dir":0},{"pos":[-10,-60],"type":"Engine03","dir":0},{"pos":[0,-20],"type":"BombGun","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy within #m","Ram",100],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","Slower",80,800],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","Slower",100,800],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","Slower",125,800],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Less Range","Faster",700],["@capTypes Command Points within #m","Capture",1200],["Stay in #m range of slot # units",400,4],["@attackTypes enemy @unitTypes within #m","Bomb","Carrier",1600],["@attackTypes enemy @unitTypes within #m","Bomb","Battleship",1600],["@attackTypes enemy @unitTypes within #m","Bomb","Cruiser",1500],["@attackTypes enemy @unitTypes within #m","Bomb","Destroyer",1500],["@attackTypes enemy @unitTypes within #m","Bomb","Brick",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Slower","---",1500],["@attackTypes enemy within #m","Flee",1500],["@capTypes Command Points within #m","Capture",4000],["Stay in #m range of slot # units",500,4],["Try to field # every # seconds",2,44],["Field # for # of ship in slot # at priority #",1,1,8,1]]},{"parts":[{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[-10,10],"type":"Wing1x1Angle","dir":0},{"pos":[10,10],"type":"Battery1x1","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[10,-50],"type":"HArmor1x1","dir":0},{"pos":[30,-30],"type":"Wing1x1Notch","dir":0},{"pos":[30,-50],"type":"UArmor1x1","dir":0},{"pos":[0,-20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy within #m","Attack",360],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","More Range",1200],["@capTypes Command Points within #m","Capture",1500],["@attackTypes enemy @unitTypes within #m","Attack","Scout",3000],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",3000],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",3000],["@attackTypes enemy @unitTypes within #m","Attack","Interceptor",3000],["@attackTypes enemy @unitTypes within #m","Attack","Bomber",3000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Faster","---",3000],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,2,4,4],["Field # for # of ship in slot # at priority #",1,2,4,4],["Field # for # of ship in slot # at priority #",2,2,5,3]]},{"parts":[{"pos":[-20,20],"type":"Mount30","dir":0},{"pos":[-30,50],"type":"Wing1x1Round","dir":0},{"pos":[-10,50],"type":"Battery1x1","dir":0},{"pos":[-10,-10],"type":"Battery1x1","dir":0},{"pos":[10,-10],"type":"Wing1x1Round","dir":0},{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[-20,20],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",29],["@attackTypes enemy within #m","Ram",500],["@attackTypes enemy @unitTypes within #m","Ram","Carrier",1000],["@attackTypes enemy @unitTypes within #m","Ram","Battleship",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Faster","More DPS",600],["@attackTypes enemy @unitTypes within #m","Ram","Cruiser",1000],["@attackTypes enemy @unitTypes within #m","Ram","Destroyer",1000],["@attackTypes enemy within #m","Ram",750],["@capTypes Command Points within #m","Capture",2000],["Stay in #m range of slot # units",500,4],["Field # for # of ship in slot # at priority #",3,2,5,3]]},{"parts":[{"pos":[-40,130],"type":"HArmor2x1","dir":0},{"pos":[-30,150],"type":"HArmor1x1","dir":0},{"pos":[0,100],"type":"Reactor2x2","dir":0},{"pos":[40,70],"type":"HArmor2x1","dir":0},{"pos":[-40,70],"type":"HArmor2x1","dir":0},{"pos":[50,-30],"type":"HArmor1x1","dir":0},{"pos":[-50,-30],"type":"HArmor1x1","dir":0},{"pos":[-50,-60],"type":"HArmor1x2","dir":0},{"pos":[-70,10],"type":"HArmor1x1","dir":0},{"pos":[-70,40],"type":"HArmor1x2","dir":0},{"pos":[70,10],"type":"HArmor1x1","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[10,-70],"type":"Engine02","dir":0},{"pos":[-10,-70],"type":"Engine02","dir":0},{"pos":[70,-10],"type":"Battery1x1","dir":0},{"pos":[-70,-10],"type":"Battery1x1","dir":0},{"pos":[-80,-70],"type":"Battery2x1","dir":0},{"pos":[-30,-30],"type":"HArmor1x1","dir":0},{"pos":[90,0],"type":"Wing1x2","dir":0},{"pos":[-80,-40],"type":"Mount30","dir":0},{"pos":[-90,0],"type":"Wing1x2","dir":0},{"pos":[-90,40],"type":"HArmor1x2","dir":0},{"pos":[70,110],"type":"Battery1x1","dir":0},{"pos":[0,60],"type":"Mount30","dir":0},{"pos":[30,-30],"type":"Battery1x1","dir":0},{"pos":[-40,0],"type":"Mount30","dir":0},{"pos":[40,40],"type":"Mount30","dir":0},{"pos":[40,0],"type":"Mount30","dir":0},{"pos":[0,150],"type":"HArmor2x1","dir":0},{"pos":[40,150],"type":"HArmor2x1","dir":0},{"pos":[60,130],"type":"Battery2x1","dir":0},{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[20,130],"type":"Battery2x1","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[40,100],"type":"Mount30","dir":0},{"pos":[80,80],"type":"Mount30","dir":0},{"pos":[90,120],"type":"HArmor1x2","dir":0},{"pos":[80,40],"type":"Mount360Micro","dir":0},{"pos":[70,150],"type":"HArmor1x1Angle","dir":0},{"pos":[40,-60],"type":"Mount30","dir":0},{"pos":[70,-70],"type":"Engine02","dir":0},{"pos":[90,-70],"type":"Engine02","dir":0},{"pos":[80,-30],"type":"Battery2x1","dir":0},{"pos":[-10,130],"type":"Battery1x1","dir":0},{"pos":[-40,40],"type":"Mount360Micro","dir":0},{"pos":[-40,100],"type":"Mount30","dir":0},{"pos":[-80,80],"type":"Mount30","dir":0},{"pos":[-80,120],"type":"Mount30","dir":0},{"pos":[-50,150],"type":"Wing1x1Angle","dir":0},{"pos":[0,20],"type":"HeavyBeamTurret","dir":0},{"pos":[-40,40],"type":"PDTurret","dir":0},{"pos":[40,-60],"type":"LightBeamTurret","dir":0},{"pos":[40,0],"type":"TorpTurret","dir":0},{"pos":[0,60],"type":"TorpTurret","dir":0},{"pos":[-80,-40],"type":"TorpTurret","dir":0},{"pos":[-40,0],"type":"TorpTurret","dir":0},{"pos":[-40,100],"type":"TorpTurret","dir":0},{"pos":[80,40],"type":"TorpTurret","dir":0},{"pos":[0,-20],"type":"TorpTurret","dir":0},{"pos":[40,40],"type":"TorpTurret","dir":0},{"pos":[-80,80],"type":"EMPGun","dir":0},{"pos":[-80,120],"type":"EMPGun","dir":0},{"pos":[40,100],"type":"RingTurret","dir":0},{"pos":[80,80],"type":"BombGun","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",100],["@attackTypes enemy within #m","Ram",75],["@attackTypes enemy within #m","Ram",350],["@attackTypes enemy within #m","Ram",850],["Avoid over #damage shots",50],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Range","More DPS",1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","More Brawling Value","Less expensive",1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Range","More Brawling Value",1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","More Range","Less DPS",1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Less Brawling Value","---",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Weaker",1500],["@attackTypes enemy within #m","Ram",1500],["@capTypes Command Points within #m","Capture",500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","---",3000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","More expensive","---",3000],["@attackTypes enemy within #m","Backstab",3000],["Stay in #m range of slot # units",400,4],["@attackTypes enemy within #m","Attack",6000],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,3]]},"",""];
ais.all.Dreadnaught = [{"parts":[{"pos":[30,-130],"type":"HArmor1x1","dir":0},{"pos":[90,-80],"type":"HArmor1x2","dir":0},{"pos":[-90,-80],"type":"HArmor1x2","dir":0},{"pos":[-70,-100],"type":"HArmor1x2","dir":0},{"pos":[-60,-160],"type":"HArmor2x2AngleBack","dir":0},{"pos":[60,-160],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-90,-150],"type":"HArmor1x1AngleBack","dir":0},{"pos":[90,-150],"type":"HArmor1x1AngleBack","dir":0},{"pos":[90,-110],"type":"HArmor1x1","dir":0},{"pos":[90,-40],"type":"HArmor1x2","dir":0},{"pos":[-90,-40],"type":"HArmor1x2","dir":0},{"pos":[-90,-110],"type":"HArmor1x1","dir":0},{"pos":[-90,-130],"type":"HArmor1x1","dir":0},{"pos":[-40,140],"type":"Mount90","dir":0},{"pos":[0,160],"type":"Mount90","dir":0},{"pos":[40,140],"type":"Mount90","dir":0},{"pos":[70,100],"type":"HArmor1x2","dir":0},{"pos":[-70,100],"type":"HArmor1x2","dir":0},{"pos":[-70,60],"type":"HArmor1x2","dir":0},{"pos":[-40,60],"type":"Mount180","dir":0},{"pos":[40,60],"type":"Mount180","dir":0},{"pos":[70,60],"type":"HArmor1x2","dir":0},{"pos":[30,-170],"type":"Engine02","dir":0},{"pos":[90,-130],"type":"HArmor1x1","dir":0},{"pos":[90,0],"type":"HArmor1x2","dir":0},{"pos":[-90,0],"type":"HArmor1x2","dir":0},{"pos":[-90,40],"type":"HArmor1x2","dir":0},{"pos":[90,40],"type":"HArmor1x2","dir":0},{"pos":[-60,-130],"type":"HArmor2x1","dir":0},{"pos":[60,-130],"type":"HArmor2x1","dir":0},{"pos":[-30,-170],"type":"Engine02","dir":0},{"pos":[-90,70],"type":"HArmor1x1","dir":0},{"pos":[-70,180],"type":"Wing1x2","dir":0},{"pos":[70,180],"type":"Wing1x2","dir":0},{"pos":[90,70],"type":"HArmor1x1","dir":0},{"pos":[10,-150],"type":"HArmor1x1","dir":0},{"pos":[-90,110],"type":"Wing1x1Angle","dir":0},{"pos":[-10,-150],"type":"Battery1x1","dir":0},{"pos":[-90,90],"type":"HArmor1x1","dir":0},{"pos":[90,110],"type":"Wing1x1Angle","dir":0},{"pos":[90,90],"type":"HArmor1x1","dir":0},{"pos":[-30,-130],"type":"HArmor1x1","dir":0},{"pos":[70,-100],"type":"HArmor1x2","dir":0},{"pos":[40,180],"type":"Reactor2x2","dir":0},{"pos":[-40,180],"type":"Reactor2x2","dir":0},{"pos":[-50,-100],"type":"HArmor1x2","dir":0},{"pos":[-30,-100],"type":"HArmor1x2","dir":0},{"pos":[30,-100],"type":"HArmor1x2","dir":0},{"pos":[50,-100],"type":"HArmor1x2","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[-20,0],"type":"Mount180","dir":0},{"pos":[20,0],"type":"Mount180","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[0,120],"type":"ReloaderMod","dir":0},{"pos":[-40,100],"type":"BulletSpeedMod","dir":0},{"pos":[0,80],"type":"ReloaderMod","dir":0},{"pos":[40,100],"type":"BulletSpeedMod","dir":0},{"pos":[-40,-60],"type":"Mount360Micro","dir":0},{"pos":[-60,-20],"type":"BulletSpeedMod","dir":0},{"pos":[40,-60],"type":"Mount360Micro","dir":0},{"pos":[60,-20],"type":"BulletSpeedMod","dir":0},{"pos":[-60,20],"type":"ReloaderMod","dir":0},{"pos":[60,20],"type":"ReloaderMod","dir":0},{"pos":[-70,-60],"type":"HArmor1x2","dir":0},{"pos":[70,-60],"type":"HArmor1x2","dir":0},{"pos":[-30,-30],"type":"HArmor1x1","dir":0},{"pos":[-30,30],"type":"HArmor1x1","dir":0},{"pos":[30,30],"type":"HArmor1x1","dir":0},{"pos":[30,-30],"type":"HArmor1x1","dir":0},{"pos":[-70,140],"type":"Reactor1x2","dir":0},{"pos":[70,140],"type":"Reactor1x2","dir":0},{"pos":[0,190],"type":"HArmor2x1","dir":0},{"pos":[0,-80],"type":"ShieldGen2x2","dir":0},{"pos":[0,-120],"type":"HArmor2x2","dir":0},{"pos":[-40,140],"type":"TorpTurret","dir":0},{"pos":[0,160],"type":"TorpTurret","dir":0},{"pos":[40,140],"type":"TorpTurret","dir":0},{"pos":[-40,60],"type":"TorpTurret","dir":0},{"pos":[40,60],"type":"TorpTurret","dir":0},{"pos":[-20,0],"type":"TorpTurret","dir":0},{"pos":[20,0],"type":"TorpTurret","dir":0},{"pos":[-40,-60],"type":"TorpTurret","dir":0},{"pos":[40,-60],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More Range",1000,2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","No PD","Weaker",1000],["When Shields down to #%, flee",10],["@attackTypes enemy within #m","Attack",1000],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",1,1],["Field # at priority #",3,3]]},{"parts":[{"pos":[0,100],"type":"ShieldGen2x2","dir":0},{"pos":[-80,20],"type":"HArmor2x2","dir":0},{"pos":[0,170],"type":"HArmor2x1","dir":0},{"pos":[60,170],"type":"Wing2x1","dir":0},{"pos":[-40,140],"type":"Mount90","dir":0},{"pos":[-30,170],"type":"HArmor1x1","dir":0},{"pos":[90,130],"type":"Wing1x1Angle","dir":0},{"pos":[30,170],"type":"HArmor1x1","dir":0},{"pos":[70,140],"type":"HArmor1x2","dir":0},{"pos":[-90,130],"type":"Wing1x1Angle","dir":0},{"pos":[-70,140],"type":"HArmor1x2","dir":0},{"pos":[-40,100],"type":"BulletSpeedMod","dir":0},{"pos":[-60,170],"type":"Wing2x1","dir":0},{"pos":[-60,-90],"type":"Battery2x1","dir":0},{"pos":[60,-90],"type":"Battery2x1","dir":0},{"pos":[40,100],"type":"BulletSpeedMod","dir":0},{"pos":[-90,-20],"type":"HArmor1x2","dir":0},{"pos":[60,-20],"type":"BulletSpeedMod","dir":0},{"pos":[90,-20],"type":"HArmor1x2","dir":0},{"pos":[-60,-20],"type":"BulletSpeedMod","dir":0},{"pos":[-90,-80],"type":"HArmor1x2","dir":0},{"pos":[90,-50],"type":"HArmor1x1","dir":0},{"pos":[90,-80],"type":"HArmor1x2","dir":0},{"pos":[30,-130],"type":"Engine02","dir":0},{"pos":[90,-110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-60,-120],"type":"HArmor2x2AngleBack","dir":0},{"pos":[60,-120],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-90,-110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-90,-50],"type":"HArmor1x1","dir":0},{"pos":[-20,-20],"type":"ReloaderMod","dir":0},{"pos":[80,20],"type":"HArmor2x2","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[0,140],"type":"Reactor2x2","dir":0},{"pos":[0,-120],"type":"HArmor2x2","dir":0},{"pos":[0,-60],"type":"Mount360Micro","dir":0},{"pos":[-40,-60],"type":"Mount270","dir":0},{"pos":[-70,-60],"type":"HArmor1x2","dir":0},{"pos":[40,-60],"type":"Mount270","dir":0},{"pos":[-40,20],"type":"BulletSpeedMod","dir":0},{"pos":[20,-20],"type":"ReloaderMod","dir":0},{"pos":[-20,60],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[20,60],"type":"ReloaderMod","dir":0},{"pos":[-60,60],"type":"Mount180","dir":0},{"pos":[40,140],"type":"Mount90","dir":0},{"pos":[60,60],"type":"Mount180","dir":0},{"pos":[80,100],"type":"Reactor2x2","dir":0},{"pos":[-80,100],"type":"Reactor2x2","dir":0},{"pos":[-90,60],"type":"HArmor1x2","dir":0},{"pos":[90,60],"type":"HArmor1x2","dir":0},{"pos":[70,-60],"type":"HArmor1x2","dir":0},{"pos":[-30,-90],"type":"HArmor1x1","dir":0},{"pos":[30,-90],"type":"HArmor1x1","dir":0},{"pos":[0,-90],"type":"HArmor2x1","dir":0},{"pos":[-30,-130],"type":"Engine02","dir":0},{"pos":[-40,140],"type":"TorpTurret","dir":0},{"pos":[0,-60],"type":"TorpTurret","dir":0},{"pos":[-40,-60],"type":"TorpTurret","dir":0},{"pos":[40,-60],"type":"TorpTurret","dir":0},{"pos":[-60,60],"type":"TorpTurret","dir":0},{"pos":[40,140],"type":"TorpTurret","dir":0},{"pos":[60,60],"type":"TorpTurret","dir":0},{"pos":[0,20],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",500],["When Shields down to #%, flee",10],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Less HP",100,1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","More Range","No PD",1500],["Field # at priority #",1,1],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",3,3]]},{"parts":[{"pos":[-20,-20],"type":"BulletSpeedMod","dir":0},{"pos":[-50,-10],"type":"Battery1x1","dir":0},{"pos":[-50,10],"type":"Battery1x1","dir":0},{"pos":[-50,30],"type":"Wing1x1Round","dir":0},{"pos":[-50,-40],"type":"Engine03","dir":0},{"pos":[-20,20],"type":"Mount360Micro","dir":0},{"pos":[-70,-30],"type":"UArmor1x1Angle","dir":0},{"pos":[10,-30],"type":"UArmor1x1Angle","dir":0},{"pos":[-20,20],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["Avoid #dps danger areas",1000],["@attackTypes enemy within #m","Stay at range",600],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Less Range",900],["@capTypes Command Points within #m","Spread to",2000],["When #% of energy, @chargeTypes",50,"Rest"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Weaker",2000],["Field # at priority #",3,2],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",3]]},"","","","","","",""];
ais.all.Electro = [{"parts":[{"pos":[110,-60],"type":"HArmor1x2","dir":0},{"pos":[-110,-60],"type":"HArmor1x2","dir":0},{"pos":[0,-100],"type":"ReloaderMod","dir":0},{"pos":[0,-60],"type":"Mount360","dir":0},{"pos":[-40,-80],"type":"DamageMod","dir":0},{"pos":[40,-80],"type":"DamageMod","dir":0},{"pos":[40,-40],"type":"DamageMod","dir":0},{"pos":[-40,-40],"type":"DamageMod","dir":0},{"pos":[-40,0],"type":"DamageMod","dir":0},{"pos":[40,0],"type":"DamageMod","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[-70,-110],"type":"Engine02","dir":0},{"pos":[100,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[70,-110],"type":"Engine02","dir":0},{"pos":[-80,-60],"type":"Reactor2x2","dir":0},{"pos":[80,-20],"type":"ShieldGen2x2","dir":0},{"pos":[-80,-20],"type":"ShieldGen2x2","dir":0},{"pos":[-110,-20],"type":"HArmor1x2","dir":0},{"pos":[-100,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-100,20],"type":"HArmor2x2Angle","dir":0},{"pos":[80,-60],"type":"Reactor2x2","dir":0},{"pos":[110,-20],"type":"HArmor1x2","dir":0},{"pos":[100,20],"type":"HArmor2x2Angle","dir":0},{"pos":[80,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,-120],"type":"HArmor2x2AngleBack","dir":0},{"pos":[40,-120],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-40,80],"type":"HArmor2x2Angle","dir":0},{"pos":[40,80],"type":"HArmor2x2Angle","dir":0},{"pos":[30,110],"type":"Wing1x1Round","dir":0},{"pos":[-30,110],"type":"Wing1x1Round","dir":0},{"pos":[0,-20],"type":"TargetingMod","dir":0},{"pos":[0,60],"type":"DamageMod","dir":0},{"pos":[0,90],"type":"Reactor2x1","dir":0},{"pos":[-70,30],"type":"ShieldGen1x1","dir":0},{"pos":[70,30],"type":"ShieldGen1x1","dir":0},{"pos":[0,110],"type":"Reactor2x1","dir":0},{"pos":[0,-140],"type":"EnergyTransfer","dir":0},{"pos":[-70,10],"type":"Battery1x1","dir":0},{"pos":[70,10],"type":"Battery1x1","dir":0},{"pos":[0,20],"type":"EMPGun","dir":0},{"pos":[0,-60],"type":"EMPGun","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",2,1],["Field # when money over # at priority #",1,900,1]]},{"parts":[{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[-30,30],"type":"Wing1x1Round","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[30,30],"type":"UArmor1x1Angle","dir":0},{"pos":[30,-10],"type":"UArmor1x1","dir":0},{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[0,0],"type":"EMPGun","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid over #damage @bulletTypes shots",20,"Any"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","---",1000],["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",1,20],["Field # at start",2]]},{"parts":[],"name":"","aiRules":[]},"","","","","","",""];
ais.all.Ficon = [{"parts":[{"pos":[-40,-30],"type":"Battery2x1","dir":0},{"pos":[0,-60],"type":"Reactor2x2","dir":0},{"pos":[-80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-60,70],"type":"Wing2x1","dir":0},{"pos":[80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-30,80],"type":"Wing1x2","dir":0},{"pos":[60,70],"type":"Wing2x1","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[30,80],"type":"Wing1x2","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[-90,-50],"type":"Engine01","dir":0},{"pos":[70,-50],"type":"Engine01","dir":0},{"pos":[90,-50],"type":"Engine01","dir":0},{"pos":[80,0],"type":"Reactor2x2","dir":0},{"pos":[-80,0],"type":"Reactor2x2","dir":0},{"pos":[-70,-50],"type":"Engine01","dir":0},{"pos":[0,-20],"type":"ReloaderMod","dir":0},{"pos":[40,-30],"type":"Battery2x1","dir":0},{"pos":[0,90],"type":"Battery2x1","dir":0},{"pos":[0,60],"type":"TargetingMod","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"BulletSpeedMod","dir":0},{"pos":[40,40],"type":"DamageMod","dir":0},{"pos":[-20,-100],"type":"Mount360Micro","dir":0},{"pos":[20,-100],"type":"Mount360Micro","dir":0},{"pos":[40,-60],"type":"Mount360Micro","dir":0},{"pos":[-40,-60],"type":"Mount360Micro","dir":0},{"pos":[-40,-60],"type":"WavePushTurret","dir":0},{"pos":[40,-60],"type":"WavePushTurret","dir":0},{"pos":[-20,-100],"type":"AutoTurret","dir":0},{"pos":[20,-100],"type":"AutoTurret","dir":0},{"pos":[0,20],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Field # at start",1],["Try to field # every # seconds",2,30],["Avoid over #damage shots",20],["Stay in #m range of slot # units",1000,1],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","less range","slower",1200],["@capTypes command points within #m","Capture",10000],["Field # at priority #",1,1]]},{"parts":[{"pos":[-70,-20],"type":"HArmor1x2","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0},{"pos":[-40,0],"type":"HArmor2x2Angle","dir":0},{"pos":[20,0],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-10,-30],"type":"Engine02","dir":0},{"pos":[20,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[50,-20],"type":"HArmor1x2","dir":0},{"pos":[-10,30],"type":"HArmor1x1","dir":0},{"pos":[-30,30],"type":"HArmor1x1","dir":0},{"pos":[10,30],"type":"HArmor1x1","dir":0},{"pos":[10,-70],"type":"HArmor1x1","dir":0},{"pos":[-30,-70],"type":"HArmor1x1","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",1,15],["@capTypes command points within #m","Guard",10000],["Field # for # of @needTypes at priority #",1,2,"fighter counter need",3]]},{"parts":[{"pos":[10,10],"type":"Battery1x1","dir":0},{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[-10,0],"type":"VArmor1x2SideBarFilled","dir":0},{"pos":[30,0],"type":"VArmor1x2SideBarFilled","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",1,15],["Avoid over #damage shots",20],["Avoid #dps danger areas",15],["Field # at start",3],["@capTypes command points within #m","Spread to",10000]]},"","","","","","",""];
ais.all.Fighter = [{"parts":[],"name":"","aiRules":[]},"","","","","","",{"parts":[{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[-10,-30],"type":"Battery1x1","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[-30,-10],"type":"Wing1x1Round","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # at start",4],["Try to field # every # seconds",3,30],["When #% of energy, @chargeTypes",10,"Rest"],["@attackTypes enemy within #m","Run-by",275],["Avoid everything"],["@capTypes Command Points within #m","Guard",10000]]},{"parts":[{"pos":[-10,30],"type":"Battery1x1","dir":0},{"pos":[-20,0],"type":"Mount90","dir":0},{"pos":[30,-30],"type":"Battery1x1","dir":0},{"pos":[-30,30],"type":"Wing1x1Round","dir":0},{"pos":[30,30],"type":"Wing1x1Round","dir":0},{"pos":[-30,-30],"type":"Battery1x1","dir":0},{"pos":[20,0],"type":"Mount90","dir":0},{"pos":[10,30],"type":"Battery1x1","dir":0},{"pos":[-50,-20],"type":"Engine04","dir":0},{"pos":[50,-20],"type":"Engine04","dir":0},{"pos":[0,-40],"type":"Mount90","dir":0},{"pos":[-20,0],"type":"LightBeamTurret","dir":0},{"pos":[20,0],"type":"LightBeamTurret","dir":0},{"pos":[0,-40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # at start",3],["Try to field # every # seconds",3,30],["When #% of energy, @chargeTypes",10,"Rest"],["@attackTypes enemy within #m","Ram",1200],["@capTypes Command Points within #m","Spread to",10000]]},{"parts":[{"pos":[-50,-10],"type":"Wing1x1Round","dir":0},{"pos":[50,-10],"type":"Wing1x1Round","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[30,-20],"type":"Engine04","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # at start",4],["Try to field # every # seconds",3,30],["When #% of energy, @chargeTypes",10,"Rest"],["@attackTypes enemy within #m","Attack",300],["@attackTypes enemy within #m","Circle",500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Stronger","More Brawling Value",1000],["Stay in #m range of slot # units",500,10],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Less HP",40,1000],["@capTypes Command Points within #m","Capture",10000]]}];
ais.all.FighterBomber = [{"parts":[{"pos":[0,20],"type":"Mount180","dir":0},{"pos":[-30,30],"type":"Wing1x1Round","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[10,-10],"type":"Battery1x1","dir":0},{"pos":[-10,-20],"type":"Engine03","dir":0},{"pos":[0,20],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",10],["When #% of energy, @chargeTypes",30,"Find recharger"],["@attackTypes enemy within #m","Stay at range",400],["@attackTypes enemy within #m","Circle",700],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Less Range",2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Weaker",2000],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",2,1],["Field # at priority #",100,4],["Field # at start",7]]},{"parts":[{"pos":[0,20],"type":"Mount180","dir":0},{"pos":[10,-10],"type":"Battery1x1","dir":0},{"pos":[-10,-10],"type":"OverKillAi","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[30,-20],"type":"Engine03","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0},{"pos":[0,20],"type":"BombGun","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",30,"Find recharger"],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Bomb",500],["@attackTypes enemy within #m","Attack",1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",100,3000],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,1],["Field # at priority #",2,3],["Field # at start",1]]},"","","","","","","",{"parts":[{"pos":[0,80],"type":"Mount90","dir":0},{"pos":[60,100],"type":"HArmor2x2Angle","dir":0},{"pos":[0,0],"type":"ReloaderMod","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[-40,60],"type":"Reactor2x2","dir":0},{"pos":[-40,20],"type":"EnergyTransfer","dir":0},{"pos":[40,20],"type":"EnergyTransfer","dir":0},{"pos":[40,60],"type":"Reactor2x2","dir":0},{"pos":[0,110],"type":"ShieldGen2x1","dir":0},{"pos":[-40,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-60,100],"type":"HArmor2x2Angle","dir":0},{"pos":[40,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[70,60],"type":"HArmor1x2","dir":0},{"pos":[70,10],"type":"Engine01","dir":0},{"pos":[-70,60],"type":"HArmor1x2","dir":0},{"pos":[-70,10],"type":"Engine01","dir":0},{"pos":[0,-30],"type":"Reactor2x1","dir":0},{"pos":[-30,110],"type":"Wing1x1Round","dir":0},{"pos":[30,110],"type":"Wing1x1Round","dir":0},{"pos":[-30,90],"type":"Battery1x1","dir":0},{"pos":[30,90],"type":"Battery1x1","dir":0},{"pos":[0,40],"type":"PDTurret","dir":0},{"pos":[0,80],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less HP","Weaker",500],["Avoid everything"],["Avoid over #damage shots",20],["Find units that are out of energy"],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,2]]}];
ais.all.FireFly = [{"parts":[{"pos":[0,-20],"type":"Engine07","dir":0},{"pos":[0,20],"type":"Mount90","dir":0},{"pos":[-30,-20],"type":"Battery1x2","dir":0},{"pos":[30,-20],"type":"Battery1x2","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0},{"pos":[30,10],"type":"Wing1x1Round","dir":0},{"pos":[0,20],"type":"RingTurret","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Capture",200],["When #% of energy, @chargeTypes",25,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Slower","Less Brawling Value",500],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","Less HP",100,500],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",2],["Try to field # every # seconds",2,35]]},{"parts":[{"pos":[0,0],"type":"EnergyTransfer","dir":0},{"pos":[-30,-10],"type":"Engine02","dir":0},{"pos":[-50,0],"type":"Reactor1x2","dir":0},{"pos":[-40,30],"type":"Reactor2x1","dir":0},{"pos":[0,30],"type":"Reactor2x1","dir":0},{"pos":[-70,10],"type":"Wing1x1Round","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",1400,2],["Stayaway in #m range from slot # units",550,2],["Stay in #m range of slot # units",1400,1],["Stay in #m range of slot # units",750,5],["Find units that are out of energy"],["Field # for # of ship in slot # at priority #",1,1,3,2],["Field # for # of ship in slot # at priority #",1,1,4,1],["Field # for # of ship in slot # at priority #",1,2,1,1]]},{"parts":[{"pos":[-20,20],"type":"Mount360Micro","dir":0},{"pos":[20,20],"type":"Mount360Micro","dir":0},{"pos":[0,60],"type":"Mount360Micro","dir":0},{"pos":[0,-20],"type":"Engine07","dir":0},{"pos":[-40,-10],"type":"Battery2x1","dir":0},{"pos":[40,-10],"type":"Battery2x1","dir":0},{"pos":[-50,10],"type":"Wing1x1Round","dir":0},{"pos":[50,10],"type":"Wing1x1Round","dir":0},{"pos":[-20,20],"type":"LightBeamTurret","dir":0},{"pos":[20,20],"type":"LightBeamTurret","dir":0},{"pos":[0,60],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Ram",300],["When #% of energy, @chargeTypes",50,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Less Brawling Value",1000],["Stay in #m range of slot # units",400,5],["Field # at start",1],["Try to field # every # seconds",1,45],["Field # when money over # at priority #",1,500,1]]},{"parts":[{"pos":[0,-40],"type":"Engine07","dir":0},{"pos":[-50,0],"type":"Battery1x2","dir":0},{"pos":[40,40],"type":"DamageMod","dir":0},{"pos":[-40,40],"type":"DamageMod","dir":0},{"pos":[0,40],"type":"Mount270","dir":0},{"pos":[20,0],"type":"DamageMod","dir":0},{"pos":[-20,0],"type":"DamageMod","dir":0},{"pos":[50,0],"type":"Battery1x2","dir":0},{"pos":[-40,-30],"type":"Battery2x1","dir":0},{"pos":[40,-30],"type":"Battery2x1","dir":0},{"pos":[-30,-60],"type":"Wing1x2","dir":0},{"pos":[30,-60],"type":"Wing1x2","dir":0},{"pos":[0,40],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",25,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","More HP",2000],["Stay in #m range of slot # units",300,5],["Field # at start",1],["Try to field # every # seconds",1,34],["Stay in #m range of slot # units",800,2],["@attackTypes enemy within #m","Flee",1000]]},{"parts":[{"pos":[-60,0],"type":"HArmor2x2","dir":0},{"pos":[-20,0],"type":"HArmor2x2","dir":0},{"pos":[-20,40],"type":"HArmor2x2","dir":0},{"pos":[-60,40],"type":"HArmor2x2","dir":0},{"pos":[-90,30],"type":"Battery1x1","dir":0},{"pos":[-90,-10],"type":"Engine02","dir":0},{"pos":[-90,50],"type":"Wing1x1Round","dir":0},{"pos":[20,40],"type":"HArmor2x2","dir":0},{"pos":[20,0],"type":"HArmor2x2","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",800,2],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,1]]},"","","","",""];
ais.all.FireShower = [{"parts":[{"pos":[20,20],"type":"Mount90","dir":0},{"pos":[10,50],"type":"Wing1x1Angle","dir":0},{"pos":[-20,30],"type":"HArmor1x2Font1","dir":0},{"pos":[50,0],"type":"HArmor1x2","dir":0},{"pos":[-10,10],"type":"Reactor1x1","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[20,-20],"type":"CloakGenerator","dir":0},{"pos":[20,20],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",40],["@attackTypes enemy within #m","Ram",450],["@capTypes Command Points within #m","Guard",10000],["Try to field # every # seconds",1,81],["Field # at priority #",1,0],["Field # at priority #",2,7],["Field # at priority #",3,9]]},{"parts":[{"pos":[10,-40],"type":"Engine04","dir":0},{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[-10,-30],"type":"Battery1x1","dir":0},{"pos":[-10,-50],"type":"Wing1x1Notch","dir":0},{"pos":[-30,-20],"type":"VArmor1x2SideBar","dir":0},{"pos":[-10,-30],"type":"Stripe1x1Corner","dir":1},{"pos":[-30,-20],"type":"Stripe1x2","dir":2},{"pos":[0,0],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",3,99],["When #% of energy, @chargeTypes",30,"Find recharger"],["Avoid over #damage shots",29],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Slower","Less Range",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Cloaked","Slower",2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Less DPS",1000],["@attackTypes enemy within #m","Attack",500],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",1,7],["Field # at start",2]]},{"parts":[{"pos":[20,20],"type":"Mount30","dir":0},{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[30,-20],"type":"Battery1x2","dir":0},{"pos":[-20,20],"type":"Mount30","dir":0},{"pos":[0,-20],"type":"CloakGenerator","dir":0},{"pos":[-50,-10],"type":"UArmor1x1Angle","dir":0},{"pos":[-50,10],"type":"Wing1x1Angle","dir":0},{"pos":[50,-10],"type":"Wing1x1Notch","dir":0},{"pos":[20,20],"type":"EMPGun","dir":0},{"pos":[-20,20],"type":"EMPGun","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",1,80],["When #% of energy, @chargeTypes",63,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","More expensive","Cloaked",700],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Stronger","---",500],["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Slower",100,1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Cloaked","More expensive",2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Less DPS",2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","More expensive",3000],["@capTypes Command Points within #m","Protect",2000],["When #% of energy, @chargeTypes",85,"Find recharger"],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of @needTypes at priority #",1,4,"Cloak Counter Need",5],["Field # at priority #",1,4],["Field # when money over # at priority #",1,1000,1],["Field # at priority #",2,6]]},{"parts":[{"pos":[-30,60],"type":"Wing1x2","dir":0},{"pos":[0,60],"type":"CloakGenerator","dir":0},{"pos":[40,-20],"type":"DamageMod","dir":0},{"pos":[-40,20],"type":"DamageMod","dir":0},{"pos":[0,0],"type":"Mount10Range","dir":0},{"pos":[40,20],"type":"DamageMod","dir":0},{"pos":[-40,-20],"type":"DamageMod","dir":0},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[-20,-60],"type":"CloakGenerator","dir":0},{"pos":[20,-60],"type":"CloakGenerator","dir":0},{"pos":[-70,-10],"type":"Engine01","dir":0},{"pos":[70,0],"type":"Reactor1x2","dir":2},{"pos":[-50,50],"type":"VArmor1x1","dir":0},{"pos":[-70,30],"type":"VArmor1x1","dir":0},{"pos":[50,-50],"type":"VArmor1x1","dir":0},{"pos":[-50,-50],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"TeslaTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",40,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Slower","More DPS",500],["Avoid over #damage shots",50],["Stay in #m range of slot # units",1900,10],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Faster","More expensive",1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",230,1500],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Faster",150,1000],["@capTypes Command Points within #m","Protect",800],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",800,2500],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Faster",230,2500],["Stay in #m range of slot # units",-100,10],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Weaker",4000],["Field # at priority #",1,3],["Field # at priority #",3,7],["Field # for # of @needTypes at priority #",2,3,"Fighter Counter Need",2]]},{"parts":[{"pos":[-40,-60],"type":"Mount30","dir":0},{"pos":[30,80],"type":"Battery2x1","dir":3},{"pos":[40,-20],"type":"DamageMod","dir":0},{"pos":[0,40],"type":"DamageMod","dir":0},{"pos":[30,-70],"type":"Engine01","dir":0},{"pos":[30,50],"type":"OverKillAi","dir":0},{"pos":[0,-40],"type":"Mount30","dir":0},{"pos":[-40,20],"type":"Mount30","dir":0},{"pos":[40,20],"type":"Mount30","dir":0},{"pos":[0,0],"type":"DamageMod","dir":0},{"pos":[-40,-20],"type":"DamageMod","dir":0},{"pos":[-30,50],"type":"OverKillAi","dir":0},{"pos":[70,-30],"type":"Engine01","dir":0},{"pos":[-30,80],"type":"Battery2x1","dir":3},{"pos":[0,80],"type":"StasisField","dir":0},{"pos":[50,-50],"type":"Wing1x1Angle","dir":3},{"pos":[-90,-20],"type":"Wing1x2","dir":0},{"pos":[-60,60],"type":"VArmor2x2Angle","dir":0},{"pos":[-80,20],"type":"VArmor2x2Angle","dir":0},{"pos":[60,60],"type":"VArmor2x2Angle","dir":0},{"pos":[80,20],"type":"VArmor2x2Angle","dir":0},{"pos":[90,-20],"type":"VArmor1x2Corner4","dir":0},{"pos":[-70,-30],"type":"Engine01","dir":0},{"pos":[0,-80],"type":"Mount360Micro","dir":0},{"pos":[-40,-60],"type":"WavePullTurret","dir":0},{"pos":[0,-80],"type":"PDTurret","dir":0},{"pos":[-40,20],"type":"BombGun","dir":0},{"pos":[0,-40],"type":"BombGun","dir":0},{"pos":[40,20],"type":"BombGun","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",32,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","Less Arc",50,500],["Avoid over #damage shots",140],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More HP",1100,1200],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More HP",600,1200],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More HP",400,1200],["When #% of energy, @chargeTypes",30,"Find recharger"],["Avoid over #damage shots",40],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More HP",1100,3000],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","Slower",110,2300],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More HP",600,3200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Run-by","Cloaked","Slower",3000],["Stay in #m range of slot # units",0,10],["When #% of energy, @chargeTypes",90,"Find recharger"],["Field # at priority #",1,5]]},{"parts":[{"pos":[-20,-40],"type":"CloakGenerator","dir":0},{"pos":[-40,40],"type":"CloakGenerator","dir":0},{"pos":[0,40],"type":"CloakGenerator","dir":0},{"pos":[-20,0],"type":"Reactor2x2","dir":3},{"pos":[20,0],"type":"EnergyTransfer","dir":0},{"pos":[40,40],"type":"Reactor2x2","dir":3},{"pos":[-50,-10],"type":"Engine02","dir":0},{"pos":[-70,-10],"type":"Engine02","dir":0},{"pos":[50,10],"type":"Wing1x1Angle","dir":3},{"pos":[50,-20],"type":"Wing1x2","dir":0},{"pos":[20,-40],"type":"EnergyTransfer","dir":0}],"name":"support1","aiRules":[["Stay in #m range of slot # units",700,10],["Avoid over #damage shots",30],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More DPS","More expensive",1500],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",700,2000],["Stay in #m range of slot # units",0,10],["Find units that are out of energy"],["Goto @locationTypes","Friendly Home Point"],["Field # at priority #",1,9]]},{"parts":[{"pos":[-50,-10],"type":"ShieldGen1x1","dir":0},{"pos":[50,-10],"type":"ShieldGen1x1","dir":0},{"pos":[0,20],"type":"StasisField","dir":0},{"pos":[-120,-10],"type":"Wing1x2","dir":1},{"pos":[-90,-10],"type":"Reactor1x1","dir":0},{"pos":[-70,-10],"type":"Engine02","dir":0},{"pos":[90,-10],"type":"ShieldGen1x1","dir":0},{"pos":[120,-10],"type":"Wing1x2","dir":3},{"pos":[30,-10],"type":"ShieldGen1x1","dir":0},{"pos":[30,10],"type":"ShieldGen1x1","dir":0},{"pos":[50,10],"type":"ShieldGen1x1","dir":0},{"pos":[-30,10],"type":"ShieldGen1x1","dir":0},{"pos":[-50,10],"type":"ShieldGen1x1","dir":0},{"pos":[-30,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-10,-10],"type":"ShieldGen1x1","dir":0},{"pos":[10,-10],"type":"ShieldGen1x1","dir":0},{"pos":[10,-30],"type":"ShieldGen1x1","dir":0},{"pos":[-10,-30],"type":"ShieldGen1x1","dir":0},{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[-40,30],"type":"HArmor2x1","dir":0},{"pos":[40,30],"type":"HArmor2x1","dir":0},{"pos":[-70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[70,30],"type":"HArmor1x1Angle","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @absoluteTypes then # within #m","Stay at range","More DPS",30,1500],["Avoid over #damage shots",100],["When Shields down to #%, flee",35],["When #% of energy, @chargeTypes",90,"Find recharger"],["Stay in #m range of slot # units",800,9],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Wiggle","More expensive","---",2200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","More expensive","---",10000],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More expensive",300,10000],["Field # at priority #",1,6]]},{"parts":[{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[50,50],"type":"Wing1x1Angle","dir":0},{"pos":[0,60],"type":"Reactor2x2","dir":0},{"pos":[-30,60],"type":"Wing1x2","dir":0},{"pos":[-50,50],"type":"Wing1x1Angle","dir":0},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[-40,0],"type":"Mount10Range","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[40,0],"type":"Mount10Range","dir":0},{"pos":[80,20],"type":"DamageMod","dir":0},{"pos":[70,-60],"type":"VArmor1x2","dir":0},{"pos":[-70,-60],"type":"VArmor1x2","dir":0},{"pos":[0,-20],"type":"TargetingMod","dir":0},{"pos":[10,-50],"type":"Battery1x1","dir":0},{"pos":[-10,-50],"type":"VArmor1x1","dir":0},{"pos":[-80,20],"type":"DamageMod","dir":0},{"pos":[80,-20],"type":"DamageMod","dir":0},{"pos":[0,-80],"type":"Mount360Micro","dir":0},{"pos":[-80,-20],"type":"DamageMod","dir":0},{"pos":[0,-80],"type":"PDTurret","dir":0},{"pos":[-40,0],"type":"MissileTurret","dir":0},{"pos":[40,0],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",40],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More DPS",40,1500],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","No PD","Slower",1800],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","No PD","---",1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",140,1500],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",200,2400],["Stay in #m range of slot # units",0,10],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,6],["Field # at priority #",2,8]]},{"parts":[{"pos":[0,30],"type":"Reactor2x1","dir":2},{"pos":[80,-20],"type":"EnergyTransfer","dir":0},{"pos":[40,-20],"type":"Mount360Micro","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[0,-80],"type":"Reactor2x2","dir":0},{"pos":[-40,-20],"type":"Mount360Micro","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[40,20],"type":"Reactor2x2","dir":0},{"pos":[-80,-20],"type":"EnergyTransfer","dir":0},{"pos":[-80,-60],"type":"Wing2x2","dir":1},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[-40,20],"type":"Reactor2x2","dir":0},{"pos":[-80,20],"type":"HArmor2x2","dir":0},{"pos":[80,20],"type":"HArmor2x2","dir":0},{"pos":[0,0],"type":"Mount360Micro","dir":0},{"pos":[80,-60],"type":"Wing2x2","dir":3},{"pos":[-40,50],"type":"HArmor2x1","dir":0},{"pos":[0,50],"type":"HArmor2x1","dir":0},{"pos":[40,50],"type":"HArmor2x1","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"PDTurret","dir":0},{"pos":[-40,-20],"type":"PDTurret","dir":0},{"pos":[0,0],"type":"PDTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",350,10],["Avoid over #damage shots",45],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",800,1850],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Stronger","More expensive",1850],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More DPS","---",1850],["Stay in #m range of slot # units",-500,10],["Field # at priority #",1,2],["Goto @locationTypes","Friendly Spawn"]]},{"parts":[{"pos":[-80,20],"type":"TargetingMod","dir":0},{"pos":[80,20],"type":"TargetingMod","dir":0},{"pos":[-120,40],"type":"Mount10Range","dir":0},{"pos":[-160,20],"type":"TargetingMod","dir":0},{"pos":[120,40],"type":"Mount10Range","dir":0},{"pos":[160,60],"type":"TargetingMod","dir":0},{"pos":[160,20],"type":"TargetingMod","dir":0},{"pos":[40,40],"type":"Mount10Range","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[0,90],"type":"Reactor2x1","dir":0},{"pos":[-80,100],"type":"HArmor2x2","dir":0},{"pos":[80,100],"type":"HArmor2x2","dir":0},{"pos":[80,-20],"type":"Reactor2x2","dir":0},{"pos":[-80,-20],"type":"Reactor2x2","dir":0},{"pos":[40,-100],"type":"HArmor2x2","dir":0},{"pos":[-40,-100],"type":"HArmor2x2","dir":0},{"pos":[40,130],"type":"HArmor2x1","dir":0},{"pos":[-40,130],"type":"HArmor2x1","dir":0},{"pos":[80,130],"type":"HArmor2x1","dir":0},{"pos":[-120,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-120,-20],"type":"HArmor2x2","dir":0},{"pos":[-80,130],"type":"HArmor2x1","dir":0},{"pos":[-80,-60],"type":"HArmor2x2","dir":0},{"pos":[120,-20],"type":"HArmor2x2","dir":0},{"pos":[80,-60],"type":"HArmor2x2","dir":0},{"pos":[-170,-20],"type":"Wing2x1","dir":1},{"pos":[120,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[150,-30],"type":"Engine02","dir":0},{"pos":[-150,-30],"type":"Engine02","dir":0},{"pos":[170,-20],"type":"Wing2x1","dir":3},{"pos":[-100,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,-140],"type":"HArmor2x2AngleBack","dir":0},{"pos":[100,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[40,-140],"type":"HArmor2x2","dir":0},{"pos":[-40,-140],"type":"HArmor2x2","dir":0},{"pos":[-80,-140],"type":"HArmor2x2AngleBack","dir":0},{"pos":[120,100],"type":"HArmor2x2Angle","dir":0},{"pos":[-120,100],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,100],"type":"HArmor2x2","dir":0},{"pos":[-70,-100],"type":"HArmor1x2","dir":0},{"pos":[40,100],"type":"HArmor2x2","dir":0},{"pos":[70,-100],"type":"HArmor1x2","dir":0},{"pos":[40,-40],"type":"Mount10Range","dir":0},{"pos":[-40,40],"type":"Mount10Range","dir":0},{"pos":[-160,60],"type":"TargetingMod","dir":0},{"pos":[0,-140],"type":"HArmor2x2","dir":0},{"pos":[0,120],"type":"Mount360Micro","dir":0},{"pos":[0,-60],"type":"ReloaderMod","dir":0},{"pos":[0,-20],"type":"Mount90","dir":0},{"pos":[-40,-40],"type":"Mount10Range","dir":0},{"pos":[0,-100],"type":"Mount30","dir":0},{"pos":[-70,150],"type":"HArmor1x1Angle","dir":0},{"pos":[-40,160],"type":"Wing2x2","dir":0},{"pos":[70,150],"type":"HArmor1x1Angle","dir":0},{"pos":[40,160],"type":"Wing2x2","dir":0},{"pos":[-80,60],"type":"DamageMod","dir":0},{"pos":[80,60],"type":"DamageMod","dir":0},{"pos":[0,60],"type":"TargetingMod","dir":0},{"pos":[0,-170],"type":"HArmor2x1","dir":0},{"pos":[-30,-170],"type":"HArmor1x1Angle","dir":1},{"pos":[30,-170],"type":"HArmor1x1Angle","dir":3},{"pos":[-120,-60],"type":"SymbolDecal3","dir":3},{"pos":[40,-140],"type":"SymbolDecal3","dir":0},{"pos":[-120,100],"type":"SymbolDecal2","dir":1},{"pos":[-80,-60],"type":"SymbolDecal3","dir":3},{"pos":[80,-140],"type":"SymbolDecal3","dir":1},{"pos":[-120,-20],"type":"SymbolDecal3","dir":3},{"pos":[80,-60],"type":"SymbolDecal3","dir":1},{"pos":[120,100],"type":"SymbolDecal2","dir":3},{"pos":[-80,100],"type":"SymbolDecal2","dir":1},{"pos":[-40,-140],"type":"SymbolDecal3","dir":0},{"pos":[-80,-100],"type":"SymbolDecal3","dir":3},{"pos":[40,100],"type":"SymbolDecal3","dir":1},{"pos":[80,100],"type":"SymbolDecal2","dir":3},{"pos":[-80,-140],"type":"SymbolDecal3","dir":3},{"pos":[80,-100],"type":"SymbolDecal3","dir":1},{"pos":[120,-60],"type":"SymbolDecal3","dir":1},{"pos":[120,-20],"type":"SymbolDecal3","dir":1},{"pos":[-40,100],"type":"SymbolDecal3","dir":3},{"pos":[-40,-100],"type":"SymbolDecal3","dir":0},{"pos":[40,-100],"type":"SymbolDecal3","dir":0},{"pos":[0,-140],"type":"SymbolDecal3","dir":0},{"pos":[-40,-40],"type":"WavePushTurret","dir":0},{"pos":[40,-40],"type":"WavePushTurret","dir":0},{"pos":[0,-100],"type":"WavePushTurret","dir":0},{"pos":[-120,40],"type":"TeslaTurret","dir":0},{"pos":[120,40],"type":"TeslaTurret","dir":0},{"pos":[0,120],"type":"PDTurret","dir":0},{"pos":[0,-20],"type":"HeavyPDTurret","dir":0},{"pos":[-40,40],"type":"PlasmaTurret","dir":0},{"pos":[40,40],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More DPS",60,1300],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",400,1900],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More DPS",35,1800],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",800,4000],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More DPS",10,1260],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",650,5000],["@capTypes Command Points within #m","Protect",1800],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Not Cloaked","---",1650],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",800,10000],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,1]]}];
ais.all.FlamethrowerArmadillo = [{"parts":[{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[-50,0],"type":"HArmor1x2","dir":0},{"pos":[-40,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[40,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-10,-50],"type":"Engine02","dir":0},{"pos":[40,40],"type":"HArmor2x2Angle","dir":0},{"pos":[10,-50],"type":"Engine02","dir":0},{"pos":[-40,40],"type":"HArmor2x2Angle","dir":0},{"pos":[0,40],"type":"Mount90","dir":0},{"pos":[0,0],"type":"Mount360Micro","dir":0},{"pos":[50,0],"type":"HArmor1x2","dir":0},{"pos":[-30,-10],"type":"HArmor1x1","dir":0},{"pos":[30,-10],"type":"HArmor1x1","dir":0},{"pos":[30,10],"type":"HArmor1x1","dir":0},{"pos":[-70,-10],"type":"Wing1x1Round","dir":0},{"pos":[70,-10],"type":"Wing1x1Round","dir":0},{"pos":[0,40],"type":"FlameTurret","dir":0},{"pos":[0,0],"type":"PDTurret","dir":0}],"name":"","aiRules":[["Field # at start",3],["@attackTypes enemy within #m","Ram",340],["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",3,30]]},{"parts":[{"pos":[40,40],"type":"TargetingMod","dir":0},{"pos":[40,80],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[40,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-40,0],"type":"TargetingMod","dir":0},{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[10,-70],"type":"Engine02","dir":0},{"pos":[0,20],"type":"Mount10Range","dir":0},{"pos":[0,-30],"type":"Reactor2x1","dir":0},{"pos":[-10,-70],"type":"Engine02","dir":0},{"pos":[0,80],"type":"EnergyTransfer","dir":0},{"pos":[-40,80],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[70,50],"type":"Wing1x1Round","dir":0},{"pos":[-70,50],"type":"Wing1x1Round","dir":0},{"pos":[-70,20],"type":"Reactor1x2","dir":0},{"pos":[70,20],"type":"Reactor1x2","dir":0},{"pos":[-90,20],"type":"HArmor1x2","dir":0},{"pos":[90,20],"type":"HArmor1x2","dir":0},{"pos":[-80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[0,20],"type":"FlameTurret","dir":0}],"name":"","aiRules":[["Field # at start",1],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More HP",1000,3000],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More HP",100,1300],["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",1,30]]},{"parts":[{"pos":[-70,-50],"type":"Wing1x1Round","dir":0},{"pos":[70,-50],"type":"Wing1x1Round","dir":0},{"pos":[40,0],"type":"VArmor2x2Angle","dir":0},{"pos":[-10,-70],"type":"Engine01","dir":0},{"pos":[-40,-40],"type":"VArmor2x2","dir":0},{"pos":[-40,0],"type":"VArmor2x2Angle","dir":0},{"pos":[40,-40],"type":"VArmor2x2","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[0,-30],"type":"Battery2x1","dir":0},{"pos":[-50,-80],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-30,-80],"type":"VArmor1x1CornerBack","dir":0},{"pos":[30,-80],"type":"VArmor1x1CornerBack","dir":0},{"pos":[50,-80],"type":"VArmor1x1CornerBack","dir":0},{"pos":[10,-60],"type":"VArmor1x2","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",10],["Field # at start",4],["Try to field # every # seconds",2,30],["@capTypes Command Points within #m","Protect",10000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Less Brawling Value",1500],["Goto @locationTypes","Friendly Army Middle"]]},{"parts":[{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"Mount180","dir":0},{"pos":[-40,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[40,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-40,40],"type":"HArmor2x2Angle","dir":0},{"pos":[40,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-10,-50],"type":"Engine02","dir":0},{"pos":[10,-50],"type":"Engine02","dir":0},{"pos":[-40,0],"type":"TargetingMod","dir":0},{"pos":[0,30],"type":"Battery2x1","dir":0},{"pos":[0,50],"type":"HArmor2x1","dir":0},{"pos":[-70,-10],"type":"Wing1x1Round","dir":0},{"pos":[70,-10],"type":"Wing1x1Round","dir":0},{"pos":[0,0],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",1,30],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","More HP","More expensive",10000],["Goto @locationTypes","Enemy Spawn"],["Field # for # of @needTypes at priority #",1,2,"Fighter Counter Need",3]]},{"parts":[],"name":"","aiRules":[]},"",{"parts":[{"pos":[-30,30],"type":"Wing1x1Round","dir":0},{"pos":[-30,-30],"type":"Engine01","dir":0},{"pos":[30,-30],"type":"Engine01","dir":0},{"pos":[0,-30],"type":"Battery2x1","dir":0},{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[30,30],"type":"Wing1x1Round","dir":0},{"pos":[0,30],"type":"HArmor2x1","dir":0},{"pos":[-30,10],"type":"HArmor1x1","dir":0},{"pos":[30,10],"type":"HArmor1x1","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[]},"","",""];
ais.all.Flydo = [{"parts":[{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[30,-10],"type":"Engine02","dir":0},{"pos":[0,40],"type":"EnergyTransfer","dir":0},{"pos":[30,40],"type":"HArmor1x2","dir":0},{"pos":[-30,0],"type":"Battery1x2","dir":0},{"pos":[-30,40],"type":"HArmor1x2","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,2,2,1],["Find units that are out of energy"],["Stay in #m range of slot # units",500,2]]},{"parts":[{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[50,-30],"type":"Battery1x1","dir":0},{"pos":[20,-40],"type":"TargetingMod","dir":0},{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[20,40],"type":"BulletSpeedMod","dir":0},{"pos":[-40,0],"type":"TargetingMod","dir":0},{"pos":[-50,-50],"type":"Engine02","dir":0},{"pos":[-20,40],"type":"DamageMod","dir":0},{"pos":[-20,-40],"type":"ReloaderMod","dir":0},{"pos":[-50,40],"type":"HArmor1x2","dir":0},{"pos":[50,40],"type":"HArmor1x2","dir":0},{"pos":[50,-50],"type":"HArmor1x1","dir":0},{"pos":[0,0],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Field # at start",2],["Try to field # every # seconds",1,30],["@attackTypes enemy within #m","Attack",2700],["@capTypes Command Points within #m","Spread to",10000]]},{"parts":[{"pos":[10,-50],"type":"Engine02","dir":0},{"pos":[-40,30],"type":"Wing2x1","dir":0},{"pos":[40,0],"type":"Mount30","dir":0},{"pos":[-40,-30],"type":"Battery2x1","dir":0},{"pos":[0,0],"type":"ReloaderMod","dir":0},{"pos":[40,-30],"type":"Battery2x1","dir":0},{"pos":[40,30],"type":"Wing2x1","dir":0},{"pos":[-40,0],"type":"Mount30","dir":0},{"pos":[-10,-50],"type":"Engine02","dir":0},{"pos":[-40,-50],"type":"HArmor2x1","dir":0},{"pos":[40,-50],"type":"HArmor2x1","dir":0},{"pos":[0,30],"type":"HArmor2x1","dir":0},{"pos":[-40,0],"type":"LightBeamTurret","dir":0},{"pos":[40,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,1,2,1],["When #% of energy, @chargeTypes",50,"Find recharger"],["@capTypes Command Points within #m","Protect",1000],["@capTypes Command Points within #m","Capture",10000],["Goto @locationTypes","Friendly Army Middle"]]},"","","","","","",""];
ais.all.Furia = [{"parts":[{"pos":[-70,-20],"type":"Battery1x2","dir":0},{"pos":[-100,20],"type":"VArmor2x2Angle","dir":0},{"pos":[70,60],"type":"Wing1x2","dir":0},{"pos":[-70,20],"type":"Battery1x2","dir":0},{"pos":[70,20],"type":"Battery1x2","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[0,-20],"type":"ReloaderMod","dir":0},{"pos":[-70,60],"type":"Wing1x2","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[70,-20],"type":"Battery1x2","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[-40,-80],"type":"Engine07","dir":0},{"pos":[40,-80],"type":"Engine07","dir":0},{"pos":[0,-60],"type":"Battery2x2","dir":0},{"pos":[40,90],"type":"Wing2x1","dir":0},{"pos":[-40,90],"type":"Wing2x1","dir":0},{"pos":[-100,-20],"type":"VArmor2x2Angle","dir":0},{"pos":[-80,-60],"type":"VArmor2x2Angle","dir":0},{"pos":[80,-60],"type":"VArmor2x2Angle","dir":0},{"pos":[100,-20],"type":"VArmor2x2Angle","dir":0},{"pos":[100,20],"type":"VArmor2x2Angle","dir":0},{"pos":[-90,-100],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-70,-100],"type":"VArmor1x1CornerBack","dir":0},{"pos":[70,-100],"type":"VArmor1x1CornerBack","dir":0},{"pos":[90,-100],"type":"VArmor1x1CornerBack","dir":0},{"pos":[0,60],"type":"ReloaderMod","dir":0},{"pos":[40,-40],"type":"Battery2x2","dir":0},{"pos":[-40,-40],"type":"Battery2x2","dir":0},{"pos":[-40,70],"type":"Battery2x1","dir":0},{"pos":[40,70],"type":"Battery2x1","dir":0},{"pos":[10,-140],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-10,-140],"type":"VArmor1x1CornerBack","dir":0},{"pos":[0,-100],"type":"VArmor2x2","dir":0},{"pos":[-10,100],"type":"VArmor1x2Corner4","dir":0},{"pos":[10,100],"type":"VArmor1x2Corner4","dir":0},{"pos":[0,20],"type":"HeavyBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",10],["@attackTypes enemy within #m","Kite",1000],["Stay in #m range of slot # units",150,5],["When #% of energy, @chargeTypes",80,"Find recharger"],["Field # at start",1],["Try to field # every # seconds",2,20],["@capTypes command points within #m","Guard",10000]]},{"parts":[{"pos":[100,80],"type":"HArmor2x2","dir":0},{"pos":[20,80],"type":"HArmor2x2","dir":0},{"pos":[100,-40],"type":"BulletSpeedMod","dir":0},{"pos":[40,0],"type":"Mount30","dir":0},{"pos":[-80,0],"type":"Mount30","dir":0},{"pos":[-40,0],"type":"Mount30","dir":0},{"pos":[-100,-40],"type":"BulletSpeedMod","dir":0},{"pos":[-20,40],"type":"BulletSpeedMod","dir":0},{"pos":[20,40],"type":"BulletSpeedMod","dir":0},{"pos":[-30,-50],"type":"Engine02","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[-140,40],"type":"BulletSpeedMod","dir":0},{"pos":[80,0],"type":"Mount30","dir":0},{"pos":[170,40],"type":"HArmor1x2","dir":0},{"pos":[140,40],"type":"BulletSpeedMod","dir":0},{"pos":[-170,80],"type":"Wing1x2","dir":0},{"pos":[170,80],"type":"Wing1x2","dir":0},{"pos":[-140,80],"type":"HArmor2x2","dir":0},{"pos":[-170,40],"type":"HArmor1x2","dir":0},{"pos":[-100,80],"type":"HArmor2x2","dir":0},{"pos":[-60,80],"type":"HArmor2x2","dir":0},{"pos":[60,80],"type":"HArmor2x2","dir":0},{"pos":[-20,80],"type":"HArmor2x2","dir":0},{"pos":[140,80],"type":"HArmor2x2","dir":0},{"pos":[0,-40],"type":"HArmor2x2","dir":0},{"pos":[-120,0],"type":"Mount30","dir":0},{"pos":[120,0],"type":"Mount30","dir":0},{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[-100,40],"type":"BulletSpeedMod","dir":0},{"pos":[-60,40],"type":"BulletSpeedMod","dir":0},{"pos":[60,40],"type":"BulletSpeedMod","dir":0},{"pos":[100,40],"type":"BulletSpeedMod","dir":0},{"pos":[140,-40],"type":"BulletSpeedMod","dir":0},{"pos":[60,-40],"type":"BulletSpeedMod","dir":0},{"pos":[-60,-40],"type":"BulletSpeedMod","dir":0},{"pos":[-140,-40],"type":"BulletSpeedMod","dir":0},{"pos":[-170,-10],"type":"Engine02","dir":0},{"pos":[170,-10],"type":"Engine02","dir":0},{"pos":[-150,0],"type":"Battery1x2","dir":0},{"pos":[150,0],"type":"Battery1x2","dir":0},{"pos":[-120,0],"type":"ArtilleryTurret","dir":0},{"pos":[-80,0],"type":"ArtilleryTurret","dir":0},{"pos":[-40,0],"type":"ArtilleryTurret","dir":0},{"pos":[0,0],"type":"ArtilleryTurret","dir":0},{"pos":[40,0],"type":"ArtilleryTurret","dir":0},{"pos":[80,0],"type":"ArtilleryTurret","dir":0},{"pos":[120,0],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["Field # at start",1],["Try to field # every # seconds",1,60],["When #% of energy, @chargeTypes",20,"find recharger"],["Stay in #m range of friendly units",1000],["@attackTypes enemy within #m","Attack",3000],["Goto @locationTypes","Enemy Home Point"],["Field # for # of ship in slot # at priority #",1,1,1,3]]},{"parts":[{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[50,-10],"type":"Wing1x1Round","dir":0},{"pos":[0,40],"type":"Mount90","dir":0},{"pos":[0,-40],"type":"EnergyTransfer","dir":0},{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[-50,-10],"type":"Wing1x1Round","dir":0},{"pos":[-40,20],"type":"Mount30","dir":0},{"pos":[40,20],"type":"Mount30","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[-30,-10],"type":"Solar1x1","dir":0},{"pos":[30,-10],"type":"Solar1x1","dir":0},{"pos":[0,40],"type":"PDTurret","dir":0},{"pos":[-40,20],"type":"TorpTurret","dir":0},{"pos":[40,20],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage @bulletTypes shots",20,"PD immune"],["Find units that are out of energy"],["Stay in #m range of slot # units",600,1],["Stayaway in #m range from slot # units",400,3],["Field # for # of ship in slot # at priority #",1,2,1,2],["Field # at start",2],["Field # for # of ship in slot # at priority #",1,1,2,2],["Try to field # every # seconds",1,50]]},{"parts":[{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[0,-30],"type":"UArmor2x1","dir":0},{"pos":[30,-40],"type":"Engine03","dir":0},{"pos":[30,0],"type":"Wing1x2","dir":0},{"pos":[-30,-20],"type":"Battery1x2","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",3,90],["Avoid over #damage shots",30],["@capTypes command points within #m","Capture",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","---","less brawling value",400],["When #% of energy, @chargeTypes",10,"find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","stronger","more brawling value",3000],["@capTypes command points within #m","Spread to",10000],["Field # at start",1]]},{"parts":[{"pos":[-50,0],"type":"Battery1x2","dir":0},{"pos":[50,0],"type":"Battery1x2","dir":0},{"pos":[40,40],"type":"Mount30","dir":0},{"pos":[-40,80],"type":"Mount30","dir":0},{"pos":[40,80],"type":"Mount30","dir":0},{"pos":[-40,40],"type":"Mount30","dir":0},{"pos":[0,60],"type":"Mount30","dir":0},{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[-30,0],"type":"Battery1x2","dir":0},{"pos":[0,-20],"type":"Engine07","dir":0},{"pos":[80,0],"type":"HArmor2x2","dir":0},{"pos":[80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,0],"type":"HArmor2x2","dir":0},{"pos":[-80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-10,90],"type":"Wing1x1Round","dir":0},{"pos":[10,90],"type":"Wing1x1Round","dir":0},{"pos":[-40,80],"type":"LightBeamTurret","dir":0},{"pos":[0,60],"type":"LightBeamTurret","dir":0},{"pos":[40,80],"type":"LightBeamTurret","dir":0},{"pos":[0,20],"type":"LightBeamTurret","dir":0},{"pos":[40,40],"type":"LightBeamTurret","dir":0},{"pos":[-40,40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","slower","more HP",5000],["Field # for # of ship in slot # at priority #",1,3,1,1],["Field # for # of ship in slot # at priority #",1,3,1,1],["Field # for # of ship in slot # at priority #",1,3,1,1],["Goto @locationTypes","friendly army middle"]]},"","","","",""];
ais.all.Keystone = [{"parts":[{"pos":[50,0],"type":"HArmor1x2","dir":0},{"pos":[50,30],"type":"Wing1x1Angle","dir":0},{"pos":[20,0],"type":"Mount30","dir":0},{"pos":[-30,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,-30],"type":"HArmor1x1","dir":0},{"pos":[-50,30],"type":"Wing1x1Angle","dir":0},{"pos":[-50,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,50],"type":"Wing1x1Angle","dir":0},{"pos":[0,-30],"type":"Reactor2x1","dir":0},{"pos":[30,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,0],"type":"HArmor1x2","dir":0},{"pos":[30,30],"type":"HArmor1x1","dir":0},{"pos":[0,40],"type":"Mount360Micro","dir":0},{"pos":[50,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,-50],"type":"HArmor2x1","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[0,70],"type":"HArmor1x2Font1","dir":0},{"pos":[0,-70],"type":"HArmor1x2Back1","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[70,0],"type":"HArmor1x2","dir":0},{"pos":[-20,0],"type":"Mount90","dir":0},{"pos":[-30,30],"type":"HArmor1x1","dir":0},{"pos":[0,40],"type":"PDTurret","dir":0},{"pos":[-20,0],"type":"TorpTurret","dir":0},{"pos":[20,0],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Ram",300],["Avoid over #damage shots",160],["@attackTypes enemy within #m","Attack",600],["Avoid over #damage shots",59],["@attackTypes enemy within #m","Attack",800],["Avoid over #damage shots",50],["@attackTypes enemy within #m","Attack",1000],["@capTypes Command Points within #m","Capture",1000],["Stay in #m range of slot # units",100,1],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",10,10],["Field # for # of ship in slot # at priority #",1,1,3,3],["Field # for # of ship in slot # at priority #",1,1,7,3],["Field # for # of ship in slot # at priority #",1,9,3,1]]},{"parts":[{"pos":[-10,-10],"type":"Reactor1x1","dir":0},{"pos":[10,-30],"type":"Wing1x1Notch","dir":0},{"pos":[-30,-30],"type":"Wing1x1Notch","dir":0},{"pos":[-10,-40],"type":"Engine03","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","Less Range",500,750],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","Less Range",760,850],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","Less Range",1001,1100],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","Less Range",1400,1450],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More Range",1400,1500],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Capture",750],["@attackTypes enemy within #m","Circle",1800],["@attackTypes enemy within #m","Flee",1300],["@attackTypes enemy within #m","Flee",750],["@capTypes Command Points within #m","Spread to",90000],["Try to field # every # seconds",1,30],["Field # at start",2]]},{"parts":[{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[0,30],"type":"Wing2x1","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[-30,20],"type":"VArmor1x2Corner4","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy within #m","Ram",150],["@attackTypes enemy within #m","Backstab",250],["@attackTypes enemy within #m","Attack",550],["Avoid over #damage shots",20],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","---",1300],["@capTypes Command Points within #m","Capture",2000],["Stay in #m range of slot # units",500,7],["Stay in #m range of slot # units",100,9],["Stay in #m range of slot # units",100,10],["@capTypes Command Points within #m","Spread to",5000],["Field # for # of ship in slot # at priority #",30,1,7,2],["Field # for # of ship in slot # at priority #",2,1,10,2]]},{"parts":[{"pos":[-30,60],"type":"Wing1x2","dir":0},{"pos":[30,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[70,-20],"type":"HArmor1x2","dir":0},{"pos":[20,20],"type":"DamageMod","dir":0},{"pos":[50,20],"type":"HArmor1x2","dir":0},{"pos":[-70,-20],"type":"HArmor1x2","dir":0},{"pos":[-50,20],"type":"HArmor1x2","dir":0},{"pos":[0,-20],"type":"Mount270","dir":0},{"pos":[20,-60],"type":"ReloaderMod","dir":0},{"pos":[-80,-60],"type":"Mount30","dir":0},{"pos":[80,20],"type":"Mount30","dir":0},{"pos":[-80,20],"type":"Mount30","dir":0},{"pos":[80,-60],"type":"Mount30","dir":0},{"pos":[-80,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-110,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,20],"type":"HArmor1x2","dir":0},{"pos":[100,-20],"type":"Mount90","dir":0},{"pos":[80,60],"type":"HArmor2x2Angle","dir":0},{"pos":[110,20],"type":"HArmor1x2","dir":0},{"pos":[-30,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[110,50],"type":"HArmor1x1Angle","dir":0},{"pos":[110,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-20,20],"type":"DamageMod","dir":0},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[-110,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,90],"type":"HArmor1x1Angle","dir":0},{"pos":[70,90],"type":"HArmor1x1Angle","dir":0},{"pos":[90,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,50],"type":"Battery1x1","dir":0},{"pos":[50,50],"type":"Battery1x1","dir":0},{"pos":[-90,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-40,-20],"type":"DamageMod","dir":0},{"pos":[0,50],"type":"Battery2x1","dir":0},{"pos":[0,-100],"type":"Reactor2x2","dir":0},{"pos":[0,80],"type":"Mount30","dir":0},{"pos":[40,-20],"type":"DamageMod","dir":0},{"pos":[-20,-60],"type":"DamageMod","dir":0},{"pos":[-100,-20],"type":"Mount180","dir":0},{"pos":[100,-20],"type":"PDTurret","dir":0},{"pos":[-100,-20],"type":"PDTurret","dir":0},{"pos":[80,-60],"type":"TorpTurret","dir":0},{"pos":[-80,20],"type":"TorpTurret","dir":0},{"pos":[80,20],"type":"TorpTurret","dir":0},{"pos":[-80,-60],"type":"TorpTurret","dir":0},{"pos":[0,80],"type":"TorpTurret","dir":0},{"pos":[0,-20],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",150],["When #% of energy, @chargeTypes",10,"Rest"],["@attackTypes enemy within #m","Ram",450],["@attackTypes enemy @unitTypes within #m","Ram","Carrier",630],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Less Brawling Value","---",630],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Less HP","---",630],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Less DPS","---",630],["@attackTypes enemy within #m","Ram",730],["Avoid over #damage shots",59],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Less Brawling Value","---",850],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","---",1600],["@capTypes Command Points within #m","Spread to",90000],["Field # for # of ship in slot # at priority #",1,1,8,4],["Field # at start",2],["Field # for # of ship in slot # at priority #",2,1,7,4],["Field # at priority #",1,10]]},{"parts":[{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[-40,-20],"type":"BulletSpeedMod","dir":0},{"pos":[-50,20],"type":"Wing1x2","dir":0},{"pos":[40,-20],"type":"BulletSpeedMod","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[50,20],"type":"Wing1x2","dir":0},{"pos":[20,-60],"type":"TargetingMod","dir":0},{"pos":[0,50],"type":"Reactor2x1","dir":0},{"pos":[-20,-60],"type":"TargetingMod","dir":0},{"pos":[-20,20],"type":"DamageMod","dir":0},{"pos":[0,-20],"type":"Mount270","dir":0},{"pos":[20,20],"type":"TargetingMod","dir":0},{"pos":[30,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[-80,-60],"type":"Mount90","dir":0},{"pos":[0,-20],"type":"MissileTurret","dir":0},{"pos":[-80,-60],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",5,"Flee enemies"],["Avoid over #damage shots",150],["@attackTypes enemy within #m","Attack",270],["Avoid over #damage shots",50],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More DPS",10,1600],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","---",1600],["Avoid over #damage shots",20],["@attackTypes enemy @unitTypes within #m","Attack","Scout",1800],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",1800],["Stay in #m range of slot # units",500,7],["@capTypes Command Points within #m","Spread to",90000],["Field # for # of ship in slot # at priority #",1,4,1,4],["Field # for # of ship in slot # at priority #",1,6,1,6],["Field # for # of ship in slot # at priority #",1,1,7,5],["Field # at start",1],["Field # for # of ship in slot # at priority #",1,2,6,4],["Field # at priority #",1,9]]},{"parts":[{"pos":[-50,-70],"type":"Engine01","dir":0},{"pos":[-70,-70],"type":"Engine02","dir":0},{"pos":[20,-60],"type":"ReloaderMod","dir":0},{"pos":[-20,-60],"type":"ReloaderMod","dir":0},{"pos":[20,20],"type":"BulletSpeedMod","dir":0},{"pos":[50,20],"type":"VArmor1x2IBeam","dir":0},{"pos":[0,-20],"type":"Mount360","dir":0},{"pos":[0,60],"type":"Reactor2x2","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[50,-70],"type":"Engine01","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[-30,60],"type":"VArmor1x2IBeam","dir":0},{"pos":[-20,20],"type":"BulletSpeedMod","dir":0},{"pos":[-50,20],"type":"VArmor1x2IBeam","dir":0},{"pos":[-50,60],"type":"VArmor1x2IBeam","dir":0},{"pos":[-70,-20],"type":"VArmor1x2IBeam","dir":0},{"pos":[-90,-10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-90,-70],"type":"Wing1x1Angle","dir":0},{"pos":[70,-70],"type":"Wing1x1Angle","dir":0},{"pos":[-80,60],"type":"Wing2x2","dir":0},{"pos":[-20,-90],"type":"Reactor2x1","dir":0},{"pos":[20,-90],"type":"HArmor2x1","dir":0},{"pos":[-20,-120],"type":"Mount360","dir":0},{"pos":[20,-120],"type":"Mount360Micro","dir":0},{"pos":[-70,20],"type":"VArmor1x2IBeam","dir":0},{"pos":[-90,20],"type":"VArmor1x2IBeam","dir":0},{"pos":[30,60],"type":"Battery1x2","dir":0},{"pos":[50,60],"type":"VArmor1x2Corner4","dir":0},{"pos":[-20,-120],"type":"PDTurret","dir":0},{"pos":[20,-120],"type":"AutoTurret","dir":0},{"pos":[0,-20],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",10,"Flee enemies"],["@attackTypes enemy within #m","Ram",280],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","---","---",1300],["Avoid over #damage shots",150],["Avoid over #damage shots",50],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Capture",1000],["@attackTypes enemy @unitTypes within #m","Attack","Carrier",2000],["@attackTypes enemy @unitTypes within #m","Attack","Battleship",2000],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",100,2000],["Stay in #m range of slot # units",300,7],["Stay in #m range of slot # units",300,5],["Stay in #m range of slot # units",300,4],["@capTypes Command Points within #m","Spread to",90000],["Field # for # of ship in slot # at priority #",1,1,8,3],["Field # for # of ship in slot # at priority #",2,1,7,5],["Field # for # of ship in slot # at priority #",1,2,4,6],["Field # for # of ship in slot # at priority #",1,2,10,2]]},{"parts":[{"pos":[-10,-50],"type":"Engine02","dir":0},{"pos":[80,0],"type":"Mount180","dir":0},{"pos":[80,80],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,40],"type":"Reactor2x2","dir":0},{"pos":[80,40],"type":"Reactor2x2","dir":0},{"pos":[-40,120],"type":"Wing2x2","dir":0},{"pos":[40,120],"type":"Wing2x2","dir":0},{"pos":[70,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[40,80],"type":"ReloaderMod","dir":0},{"pos":[-40,80],"type":"ReloaderMod","dir":0},{"pos":[0,60],"type":"Mount360","dir":0},{"pos":[0,100],"type":"ReloaderMod","dir":0},{"pos":[-80,80],"type":"HArmor2x2Angle","dir":0},{"pos":[0,130],"type":"Battery2x1","dir":0},{"pos":[-80,0],"type":"Mount360","dir":0},{"pos":[10,-50],"type":"Engine01","dir":0},{"pos":[70,120],"type":"Wing1x2","dir":0},{"pos":[-70,120],"type":"Wing1x2","dir":0},{"pos":[-90,110],"type":"Wing1x1Round","dir":0},{"pos":[90,110],"type":"Wing1x1Round","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[50,-50],"type":"Engine02","dir":0},{"pos":[-30,-50],"type":"Engine02","dir":0},{"pos":[-50,-50],"type":"Engine02","dir":0},{"pos":[40,0],"type":"EnergyTransfer","dir":0},{"pos":[0,-10],"type":"Reactor2x1","dir":0},{"pos":[-40,0],"type":"HArmor2x2","dir":0},{"pos":[-80,0],"type":"PDTurret","dir":0},{"pos":[80,0],"type":"PDTurret","dir":0},{"pos":[0,60],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Flee enemies"],["Avoid over #damage shots",150],["Avoid #dps danger areas",60],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","---",550],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Faster","More DPS",550],["@attackTypes enemy @unitTypes within #m","Attack","Carrier",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Less Brawling Value","Slower",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","More Brawling Value","No PD",1300],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","More Brawling Value","Weaker",1300],["@capTypes Command Points within #m","Capture",1000],["When #% of energy, @chargeTypes",30,"Rest"],["Stay in #m range of slot # units",1000,3],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","More Brawling Value",2000],["@attackTypes enemy @unitTypes within #m","Attack","Carrier",5000],["@capTypes Command Points within #m","Spread to",90000],["Field # for # of ship in slot # at priority #",1,1,5,4],["Field # for # of ship in slot # at priority #",1,1,8,5]]},{"parts":[{"pos":[-60,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-100,20],"type":"Wing2x2","dir":0},{"pos":[-60,-10],"type":"Battery2x1","dir":0},{"pos":[60,-10],"type":"Battery2x1","dir":0},{"pos":[60,60],"type":"HArmor2x2Angle","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[50,-50],"type":"Engine01","dir":0},{"pos":[30,80],"type":"Wing1x2","dir":0},{"pos":[-50,-50],"type":"Engine01","dir":0},{"pos":[-30,80],"type":"Wing1x2","dir":0},{"pos":[100,20],"type":"Wing2x2","dir":0},{"pos":[20,-20],"type":"Mount30","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[20,10],"type":"Battery2x1","dir":0},{"pos":[-20,40],"type":"Mount30","dir":0},{"pos":[-30,10],"type":"HArmor1x1","dir":0},{"pos":[20,40],"type":"Mount30","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[-90,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-70,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[70,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[90,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-30,-60],"type":"VArmor1x2End","dir":0},{"pos":[30,-60],"type":"VArmor1x2End","dir":0},{"pos":[-110,-20],"type":"VArmor1x2SideBarFilled","dir":0},{"pos":[110,-20],"type":"VArmor1x2SideBarFilled","dir":0},{"pos":[-20,-20],"type":"Mount360","dir":0},{"pos":[-60,20],"type":"Mount90","dir":0},{"pos":[60,20],"type":"Mount90","dir":0},{"pos":[-20,-20],"type":"PDTurret","dir":0},{"pos":[-20,40],"type":"LightBeamTurret","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0},{"pos":[-60,20],"type":"LightBeamTurret","dir":0},{"pos":[20,-20],"type":"LightBeamTurret","dir":0},{"pos":[60,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",8,"Flee enemies"],["@attackTypes enemy within #m","Attack",200],["Avoid over #damage shots",150],["@attackTypes enemy @unitTypes within #m","Ram","Carrier",450],["@attackTypes enemy within #m","Ram",450],["Avoid over #damage shots",50],["@capTypes Command Points within #m","Capture",500],["@attackTypes enemy @unitTypes within #m","Backstab","Carrier",1300],["Avoid over #damage shots",20],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","Less Brawling Value",1300],["When #% of energy, @chargeTypes",35,"Rest"],["Stay in #m range of slot # units",100,9],["Stay in #m range of slot # units",400,4],["@attackTypes enemy @unitTypes within #m","Backstab","Carrier",2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","Less Brawling Value",2000],["@capTypes Command Points within #m","Capture",1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",120,2000],["@attackTypes enemy within #m","Backstab",2000],["Stay in #m range of slot # units",1000,7],["When #% of energy, @chargeTypes",60,"Rest"],["Goto @locationTypes","Enemy Army Middle"],["Goto @locationTypes","Enemy Spawn"],["Avoid over #damage shots",20],["Field # for # of ship in slot # at priority #",1,1,7,3],["Field # at start",1],["Field # for # of ship in slot # at priority #",1,1,6,4]]},{"parts":[{"pos":[120,-80],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-110,-110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,150],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,130],"type":"HArmor1x1","dir":0},{"pos":[30,130],"type":"HArmor1x1","dir":0},{"pos":[-50,130],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[-80,-50],"type":"HArmor2x1","dir":0},{"pos":[80,-50],"type":"HArmor2x1","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[-60,20],"type":"Mount360","dir":0},{"pos":[60,20],"type":"Mount360","dir":0},{"pos":[30,150],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[0,100],"type":"Mount360","dir":0},{"pos":[50,130],"type":"HArmor1x1Angle","dir":0},{"pos":[-40,100],"type":"ReloaderMod","dir":0},{"pos":[40,100],"type":"ReloaderMod","dir":0},{"pos":[80,100],"type":"Wing2x2","dir":0},{"pos":[-80,-70],"type":"HArmor2x1","dir":0},{"pos":[-130,70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[130,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[-80,-90],"type":"HArmor1x2Back1","dir":0},{"pos":[80,-90],"type":"HArmor1x2Back1","dir":0},{"pos":[80,-70],"type":"HArmor2x1","dir":0},{"pos":[-130,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[-120,120],"type":"HArmor2x2Angle","dir":0},{"pos":[-120,90],"type":"HArmor2x1","dir":0},{"pos":[110,-110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[120,120],"type":"HArmor2x2Angle","dir":0},{"pos":[120,90],"type":"HArmor2x1","dir":0},{"pos":[-120,-80],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-120,-50],"type":"HArmor2x1","dir":0},{"pos":[120,-50],"type":"HArmor2x1","dir":0},{"pos":[130,70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-110,150],"type":"HArmor1x1Angle","dir":0},{"pos":[110,150],"type":"HArmor1x1Angle","dir":0},{"pos":[-20,20],"type":"TargetingMod","dir":0},{"pos":[20,20],"type":"TargetingMod","dir":0},{"pos":[-80,-20],"type":"ReloaderMod","dir":0},{"pos":[-40,60],"type":"ReloaderMod","dir":0},{"pos":[-80,60],"type":"ReloaderMod","dir":0},{"pos":[-100,20],"type":"ReloaderMod","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[80,-20],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[100,20],"type":"ReloaderMod","dir":0},{"pos":[80,60],"type":"ReloaderMod","dir":0},{"pos":[0,60],"type":"Reactor2x2","dir":0},{"pos":[40,60],"type":"ReloaderMod","dir":0},{"pos":[-110,60],"type":"Battery1x2","dir":0},{"pos":[-110,-20],"type":"Battery1x2","dir":0},{"pos":[110,60],"type":"Battery1x2","dir":0},{"pos":[110,-20],"type":"Battery1x2","dir":0},{"pos":[-80,100],"type":"Wing2x2","dir":0},{"pos":[-10,-70],"type":"Engine02","dir":0},{"pos":[10,-70],"type":"Engine02","dir":0},{"pos":[0,-20],"type":"Battery2x2","dir":0},{"pos":[0,100],"type":"PDTurret","dir":0},{"pos":[-60,20],"type":"AutoTurret","dir":0},{"pos":[60,20],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",59],["When #% of energy, @chargeTypes",10,"Flee enemies"],["@attackTypes enemy within #m","Circle",470],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","---",1000],["When #% of energy, @chargeTypes",30,"Rest"],["@capTypes Command Points within #m","Capture",1000],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,2,10,1]]},{"parts":[{"pos":[-90,10],"type":"HArmor1x1","dir":0},{"pos":[50,10],"type":"HArmor1x1","dir":0},{"pos":[-60,60],"type":"TargetingMod","dir":0},{"pos":[-60,20],"type":"TargetingMod","dir":0},{"pos":[-20,0],"type":"ReloaderMod","dir":0},{"pos":[-20,40],"type":"Mount360","dir":0},{"pos":[-20,-30],"type":"HArmor2x1","dir":0},{"pos":[-20,80],"type":"TargetingMod","dir":0},{"pos":[20,20],"type":"ReloaderMod","dir":0},{"pos":[-50,-20],"type":"VArmor1x2IBeam","dir":0},{"pos":[10,-20],"type":"VArmor1x2IBeam","dir":0},{"pos":[-80,-20],"type":"Reactor2x2","dir":0},{"pos":[20,60],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"Reactor2x2","dir":0},{"pos":[-60,90],"type":"Wing2x1","dir":0},{"pos":[20,90],"type":"Wing2x1","dir":0},{"pos":[-90,40],"type":"Wing1x2","dir":0},{"pos":[50,40],"type":"Wing1x2","dir":0},{"pos":[10,-70],"type":"Engine01","dir":0},{"pos":[-50,-70],"type":"Engine01","dir":0},{"pos":[-70,-70],"type":"Engine01","dir":0},{"pos":[-90,-70],"type":"Engine01","dir":0},{"pos":[40,-60],"type":"Reactor2x2","dir":0},{"pos":[-20,-60],"type":"Mount360Micro","dir":0},{"pos":[-20,-60],"type":"PDTurret","dir":0},{"pos":[-20,40],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",50],["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",20,"Flee enemies"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","---","---",1300],["@attackTypes enemy within #m","Attack",2000],["Stay in #m range of slot # units",1700,9],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",1,2,9,2],["Field # for # of ship in slot # at priority #",1,1,3,2],["Field # for # of ship in slot # at priority #",1,4,1,2],["Field # for # of ship in slot # at priority #",1,1,1,3]]}];
ais.all.Kornine = [{"parts":[{"pos":[-30,-50],"type":"Engine02","dir":0},{"pos":[-60,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-80,0],"type":"Mount360Micro","dir":0},{"pos":[40,0],"type":"Reactor2x2","dir":0},{"pos":[80,0],"type":"Mount360Micro","dir":0},{"pos":[-40,40],"type":"HArmor2x2Angle","dir":0},{"pos":[40,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,0],"type":"Reactor2x2","dir":0},{"pos":[60,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-70,30],"type":"Wing1x1Round","dir":0},{"pos":[70,30],"type":"Wing1x1Round","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[10,-70],"type":"Engine02","dir":0},{"pos":[-10,-70],"type":"Engine02","dir":0},{"pos":[0,60],"type":"EnergyTransfer","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[0,-20],"type":"Reactor2x2","dir":0},{"pos":[0,20],"type":"MissileTurret","dir":0},{"pos":[-80,0],"type":"HeavyPDTurret","dir":0},{"pos":[80,0],"type":"HeavyPDTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",1,1],["Stay in #m range of slot # units",700,2],["@attackTypes enemy within #m","Kite",1000],["Field # for # of ship in slot # at priority #",2,6,2,1]]},{"parts":[{"pos":[0,60],"type":"Mount90","dir":0},{"pos":[-30,20],"type":"Battery1x2","dir":0},{"pos":[-30,50],"type":"Wing1x1Round","dir":0},{"pos":[-10,10],"type":"Engine01","dir":0},{"pos":[20,20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[30,50],"type":"Wing1x1Round","dir":0},{"pos":[0,60],"type":"RingTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",30,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",350],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",1000],["@attackTypes enemy within #m","Attack",600],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,2],["Try to field # every # seconds",2,30],["Field # at priority #",1,3],["Field # at start",4]]},{"parts":[{"pos":[10,30],"type":"Battery1x1","dir":0},{"pos":[40,20],"type":"Mount30","dir":0},{"pos":[-10,30],"type":"Wing1x1Round","dir":0},{"pos":[-10,10],"type":"Wing1x1Round","dir":0},{"pos":[10,0],"type":"Engine04","dir":0},{"pos":[70,0],"type":"Engine04","dir":0},{"pos":[30,-10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[50,-10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[50,50],"type":"UArmor1x1Angle","dir":0},{"pos":[70,30],"type":"UArmor1x1Angle","dir":0},{"pos":[40,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid #dps danger areas",5],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Weaker","Weaker",1000],["@attackTypes enemy within #m","Flee",1000],["Field # at priority #",1,2],["Try to field # every # seconds",1,30],["@capTypes Command Points within #m","Spread to",10000]]},{"parts":[{"pos":[30,-30],"type":"Engine02","dir":0},{"pos":[-60,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[40,20],"type":"Mount30","dir":0},{"pos":[-10,-10],"type":"Battery1x1","dir":0},{"pos":[10,-10],"type":"Reactor1x1","dir":0},{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[-30,-30],"type":"Engine02","dir":0},{"pos":[-40,20],"type":"Mount30","dir":0},{"pos":[60,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[0,-30],"type":"HArmor2x1","dir":0},{"pos":[-70,20],"type":"Wing1x2","dir":0},{"pos":[70,20],"type":"Wing1x2","dir":0},{"pos":[0,20],"type":"RingTurret","dir":0},{"pos":[-40,20],"type":"RingTurret","dir":0},{"pos":[40,20],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",1,2],["Stay in #m range of slot # units",700,1],["@attackTypes enemy within #m","Attack",900],["Try to field # every # seconds",1,35],["Stay in #m range of slot # units",300,1]]},"","","","","",""];
ais.all.LazerBlade = [{"parts":[{"pos":[-70,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,-20],"type":"HArmor1x2","dir":0},{"pos":[30,110],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,110],"type":"HArmor1x1Angle","dir":0},{"pos":[-20,80],"type":"Mount90","dir":0},{"pos":[-50,60],"type":"HArmor1x2","dir":0},{"pos":[-50,90],"type":"HArmor1x1Angle","dir":0},{"pos":[60,20],"type":"Mount90","dir":0},{"pos":[50,60],"type":"HArmor1x2","dir":0},{"pos":[-60,20],"type":"Mount90","dir":0},{"pos":[20,80],"type":"Mount90","dir":0},{"pos":[50,90],"type":"HArmor1x1Angle","dir":0},{"pos":[20,10],"type":"Reactor2x1","dir":0},{"pos":[-30,40],"type":"HArmor1x2","dir":0},{"pos":[110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-20,10],"type":"Reactor2x1","dir":0},{"pos":[-110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[30,40],"type":"HArmor1x2","dir":0},{"pos":[30,-40],"type":"HArmor1x2","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[0,40],"type":"Mount270","dir":0},{"pos":[130,10],"type":"HArmor1x1Angle","dir":0},{"pos":[-130,10],"type":"HArmor1x1Angle","dir":0},{"pos":[70,70],"type":"HArmor1x1Angle","dir":0},{"pos":[70,-10],"type":"Battery1x1","dir":0},{"pos":[-70,-10],"type":"Battery1x1","dir":0},{"pos":[-30,-40],"type":"HArmor1x2","dir":0},{"pos":[50,-20],"type":"HArmor1x2","dir":0},{"pos":[0,-50],"type":"Reactor2x1","dir":0},{"pos":[-10,-80],"type":"Engine04","dir":0},{"pos":[10,-80],"type":"Engine04","dir":0},{"pos":[30,-70],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,-70],"type":"HArmor1x1Angle","dir":0},{"pos":[0,-20],"type":"Mount270","dir":0},{"pos":[-110,-20],"type":"Engine04","dir":0},{"pos":[-90,0],"type":"HArmor1x2","dir":0},{"pos":[-110,10],"type":"Battery1x1","dir":0},{"pos":[-90,-40],"type":"Engine04","dir":0},{"pos":[90,0],"type":"HArmor1x2","dir":0},{"pos":[110,10],"type":"Battery1x1","dir":0},{"pos":[110,-20],"type":"Engine04","dir":0},{"pos":[90,-40],"type":"Engine04","dir":0},{"pos":[-60,20],"type":"LightBeamTurret","dir":0},{"pos":[-20,80],"type":"LightBeamTurret","dir":0},{"pos":[20,80],"type":"LightBeamTurret","dir":0},{"pos":[60,20],"type":"LightBeamTurret","dir":0},{"pos":[0,40],"type":"LightBeamTurret","dir":0},{"pos":[0,-20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",10,1],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",100,1000],["@attackTypes enemy within #m","Attack",500],["@capTypes Command Points within #m","Capture",10000]]},"","","","","","","","",""];
ais.all.Lazur = [{"parts":[{"pos":[-30,130],"type":"HArmor1x1Angle","dir":0},{"pos":[90,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-80,-60],"type":"HArmor2x2","dir":0},{"pos":[80,-60],"type":"HArmor2x2","dir":0},{"pos":[40,-60],"type":"Reactor2x2","dir":0},{"pos":[-40,-60],"type":"Reactor2x2","dir":0},{"pos":[0,-140],"type":"Engine07","dir":0},{"pos":[0,20],"type":"ReloaderMod","dir":0},{"pos":[-40,20],"type":"Mount90","dir":0},{"pos":[40,20],"type":"Mount90","dir":0},{"pos":[-40,-100],"type":"Battery2x2","dir":0},{"pos":[40,-100],"type":"Battery2x2","dir":0},{"pos":[80,-100],"type":"HArmor2x2","dir":0},{"pos":[-80,-100],"type":"HArmor2x2","dir":0},{"pos":[0,-100],"type":"Battery2x2","dir":0},{"pos":[-160,-100],"type":"Wing2x2","dir":0},{"pos":[160,-100],"type":"Wing2x2","dir":0},{"pos":[-110,-20],"type":"HArmor1x2","dir":0},{"pos":[110,-20],"type":"HArmor1x2","dir":0},{"pos":[-120,-60],"type":"HArmor2x2","dir":0},{"pos":[-120,-100],"type":"HArmor2x2","dir":0},{"pos":[120,-60],"type":"HArmor2x2","dir":0},{"pos":[120,-100],"type":"HArmor2x2","dir":0},{"pos":[-80,-130],"type":"HArmor2x1","dir":0},{"pos":[80,-130],"type":"HArmor2x1","dir":0},{"pos":[-70,90],"type":"HArmor1x1Angle","dir":0},{"pos":[-90,50],"type":"HArmor1x1Angle","dir":0},{"pos":[30,130],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,10],"type":"HArmor1x1Angle","dir":0},{"pos":[110,10],"type":"HArmor1x1Angle","dir":0},{"pos":[70,90],"type":"HArmor1x1Angle","dir":0},{"pos":[-80,20],"type":"Mount30","dir":0},{"pos":[-60,60],"type":"Mount30","dir":0},{"pos":[-40,100],"type":"Mount30","dir":0},{"pos":[0,120],"type":"Mount30","dir":0},{"pos":[40,100],"type":"Mount30","dir":0},{"pos":[60,60],"type":"Mount30","dir":0},{"pos":[80,20],"type":"Mount30","dir":0},{"pos":[0,90],"type":"HArmor2x1","dir":0},{"pos":[0,-60],"type":"Battery2x2","dir":0},{"pos":[-40,-20],"type":"Battery2x2","dir":0},{"pos":[40,-20],"type":"Battery2x2","dir":0},{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[-130,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[130,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[-40,-130],"type":"Battery2x1","dir":0},{"pos":[40,-130],"type":"Battery2x1","dir":0},{"pos":[-20,60],"type":"ReloaderMod","dir":0},{"pos":[20,60],"type":"ReloaderMod","dir":0},{"pos":[-80,-20],"type":"HArmor2x2","dir":0},{"pos":[80,-20],"type":"HArmor2x2","dir":0},{"pos":[80,20],"type":"HeavyBeamTurret","dir":0},{"pos":[40,100],"type":"HeavyBeamTurret","dir":0},{"pos":[-40,100],"type":"HeavyBeamTurret","dir":0},{"pos":[60,60],"type":"HeavyBeamTurret","dir":0},{"pos":[-80,20],"type":"HeavyBeamTurret","dir":0},{"pos":[-60,60],"type":"HeavyBeamTurret","dir":0},{"pos":[40,20],"type":"PDTurret","dir":0},{"pos":[-40,20],"type":"PDTurret","dir":0},{"pos":[0,120],"type":"HeavyPDTurret","dir":0},{"pos":[0,-20],"type":"HeavyPDTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",500],["@capTypes Command Points within #m","Capture",10000],["Field # at start",1],["Try to field # every # seconds",1,60],["Field # at priority #",1,1]]},{"parts":[{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[10,-10],"type":"Battery1x1","dir":0},{"pos":[-10,50],"type":"Wing1x1Notch","dir":0},{"pos":[0,20],"type":"EMPGun","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",4],["Try to field # every # seconds",1,30]]},"","","","","","","",{"parts":[{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[30,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,0],"type":"Battery1x2","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[-30,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,-30],"type":"Wing1x1Notch","dir":0},{"pos":[50,-30],"type":"Wing1x1Notch","dir":0},{"pos":[0,-20],"type":"EnergyTransfer","dir":0},{"pos":[0,20],"type":"Reactor2x2","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,1,1,5],["Stay in #m range of slot # units",500,1]]}];
ais.all.Liberty = ["",{"parts":[{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[10,10],"type":"Battery1x1","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy within #m","Flee",2000],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,1,4,2],["Field # for # of ship in slot # at priority #",1,2,4,2],["Field # for # of ship in slot # at priority #",1,1,1,3],["Field # for # of ship in slot # at priority #",1,2,1,4],["Field # for # of ship in slot # at priority #",4,1,8,5],["Field # at priority #",1,1]]},{"parts":[{"pos":[20,0],"type":"Mount30","dir":0},{"pos":[10,30],"type":"Battery1x1","dir":0},{"pos":[10,-40],"type":"Engine04","dir":0},{"pos":[-10,0],"type":"HArmor1x2","dir":0},{"pos":[-10,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-10,30],"type":"Wing1x1Angle","dir":0},{"pos":[30,30],"type":"HArmor1x1Angle","dir":0},{"pos":[20,0],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Attack",400],["Avoid over #damage shots",22],["Stay in #m range of slot # units",1000,4],["@attackTypes enemy @unitTypes within #m","Attack","Bomber",800],["@attackTypes enemy @unitTypes within #m","Attack","Interceptor",800],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",800],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",800],["@attackTypes enemy @unitTypes within #m","Flee","Carrier",1000],["@attackTypes enemy @unitTypes within #m","Flee","Battleship",1000],["@attackTypes enemy @unitTypes within #m","Flee","Cruiser",1000],["@attackTypes enemy @unitTypes within #m","Flee","Destroyer",1000],["@capTypes Command Points within #m","Capture",1000],["Stay in #m range of slot # units",500,4],["Stay in #m range of friendly units",500],["Goto @locationTypes","Friendly Spawn"],["Field # for # of ship in slot # at priority #",1,2,4,1],["Field # at priority #",2,2]]},{"parts":[{"pos":[-80,20],"type":"Reactor2x2","dir":0},{"pos":[-50,60],"type":"Battery1x2","dir":0},{"pos":[110,70],"type":"HArmor1x1Angle","dir":0},{"pos":[110,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,10],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,-10],"type":"HArmor1x1Angle","dir":0},{"pos":[110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[110,-10],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[110,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,-50],"type":"HArmor1x1Angle","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[110,10],"type":"HArmor1x1Angle","dir":0},{"pos":[110,-50],"type":"HArmor1x1Angle","dir":0},{"pos":[0,100],"type":"Mount360","dir":0},{"pos":[-40,-40],"type":"ReloaderMod","dir":0},{"pos":[40,-40],"type":"TargetingMod","dir":0},{"pos":[0,-20],"type":"Mount360","dir":0},{"pos":[40,-80],"type":"Reactor2x2","dir":0},{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[-40,-80],"type":"EnergyTransfer","dir":0},{"pos":[-110,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-60,140],"type":"HArmor2x2Angle","dir":0},{"pos":[-20,140],"type":"ReloaderMod","dir":0},{"pos":[-40,100],"type":"ReloaderMod","dir":0},{"pos":[20,60],"type":"BulletSpeedMod","dir":0},{"pos":[-20,60],"type":"BulletSpeedMod","dir":0},{"pos":[80,20],"type":"Reactor2x2","dir":0},{"pos":[60,140],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,30],"type":"Battery2x1","dir":0},{"pos":[40,30],"type":"Battery2x1","dir":0},{"pos":[-90,100],"type":"Wing1x2","dir":0},{"pos":[90,100],"type":"Wing1x2","dir":0},{"pos":[-70,100],"type":"HArmor1x2","dir":0},{"pos":[70,100],"type":"HArmor1x2","dir":0},{"pos":[-70,-90],"type":"Engine02","dir":0},{"pos":[-90,-70],"type":"Engine02","dir":0},{"pos":[70,-90],"type":"Engine02","dir":0},{"pos":[90,-70],"type":"Engine02","dir":0},{"pos":[70,-50],"type":"HArmor1x1","dir":0},{"pos":[-70,-50],"type":"HArmor1x1","dir":0},{"pos":[-80,-20],"type":"HArmor2x2","dir":0},{"pos":[80,-20],"type":"HArmor2x2","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[-110,90],"type":"HArmor1x1Angle","dir":0},{"pos":[0,-120],"type":"Mount90","dir":0},{"pos":[0,-60],"type":"DamageMod","dir":0},{"pos":[20,140],"type":"ReloaderMod","dir":0},{"pos":[40,100],"type":"TargetingMod","dir":0},{"pos":[50,50],"type":"Battery1x1","dir":0},{"pos":[50,70],"type":"HArmor1x1","dir":0},{"pos":[-80,60],"type":"HArmor2x2","dir":0},{"pos":[80,60],"type":"HArmor2x2","dir":0},{"pos":[-40,-120],"type":"Mount90","dir":0},{"pos":[40,-120],"type":"Mount90","dir":0},{"pos":[40,-120],"type":"PDTurret","dir":0},{"pos":[-40,-120],"type":"PDTurret","dir":0},{"pos":[0,-120],"type":"FlackTurret","dir":0},{"pos":[0,100],"type":"PlasmaTurret","dir":0},{"pos":[0,-20],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",100],["@attackTypes enemy within #m","Ram",500],["@capTypes Command Points within #m","Capture",500],["@attackTypes enemy @unitTypes within #m","Attack","Carrier",1200],["@attackTypes enemy @unitTypes within #m","Attack","Battleship",1200],["@attackTypes enemy @unitTypes within #m","Attack","Cruiser",1200],["@attackTypes enemy @unitTypes within #m","Attack","Destroyer",1200],["Avoid over #damage shots",59],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","---",3000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","---","More expensive",3000],["@attackTypes enemy within #m","Attack",1200],["Stay in #m range of slot # units",400,4],["@capTypes Command Points within #m","Capture",2000],["Goto @locationTypes","Enemy Army Middle"],["@capTypes Command Points within #m","Capture",10000],["Field # at start",2],["Field # at priority #",1,1],["Field # at priority #",1,5]]},{"parts":[{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[-10,-30],"type":"UArmor1x1","dir":0},{"pos":[10,-30],"type":"Battery1x1","dir":0},{"pos":[-10,30],"type":"Battery1x1","dir":0},{"pos":[10,-60],"type":"Engine03","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[30,-50],"type":"Wing1x1Notch","dir":0},{"pos":[10,30],"type":"Wing1x1Notch","dir":0},{"pos":[-30,-50],"type":"Wing1x1Notch","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy within #m","Attack",350],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Stronger","More Brawling Value",1600],["Stay in #m range of slot # units",4000,4],["@attackTypes enemy @unitTypes within #m","Attack","Scout",1500],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",1500],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",1500],["@attackTypes enemy @unitTypes within #m","Attack","Interceptor",1500],["@attackTypes enemy @unitTypes within #m","Attack","Bomber",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less DPS","Less Brawling Value",1500],["@attackTypes enemy within #m","Flee",1500],["@capTypes Command Points within #m","Capture",1000],["@capTypes Command Points within #m","Protect",4000],["Field # for # of ship in slot # at priority #",1,2,4,1],["@capTypes Command Points within #m","Spread to",10000]]},{"parts":[{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[-10,-30],"type":"UArmor1x1","dir":0},{"pos":[10,-40],"type":"Engine03","dir":0},{"pos":[20,30],"type":"Wing2x1","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[-10,30],"type":"UArmor1x1Angle","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[30,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[30,-30],"type":"UArmor1x1","dir":0},{"pos":[-10,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-30,-30],"type":"UArmor1x1Angle","dir":0},{"pos":[50,-30],"type":"UArmor1x1Angle","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy within #m","Attack",350],["Stay in #m range of slot # units",2600,4],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","More expensive",1200],["@attackTypes enemy @unitTypes within #m","Attack","Bomber",1500],["Stay in #m range of slot # units",500,6],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",1500],["@attackTypes enemy @unitTypes within #m","Attack","Interceptor",1500],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",1250],["@attackTypes enemy @unitTypes within #m","Attack","Scout",1250],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Faster","---",1250],["@capTypes Command Points within #m","Capture",1500],["@capTypes Command Points within #m","Protect",2500],["Stay in #m range of slot # units",500,4],["Stay in #m range of slot # units",500,8],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",3,2,4,2],["Field # for # of ship in slot # at priority #",2,1,4,4],["Field # for # of ship in slot # at priority #",3,1,8,4]]},{"parts":[{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[10,-40],"type":"Engine03","dir":0},{"pos":[20,30],"type":"Wing2x1","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[-10,30],"type":"UArmor1x1Angle","dir":0},{"pos":[-10,-30],"type":"UArmor1x1","dir":0},{"pos":[30,-30],"type":"UArmor1x1","dir":0},{"pos":[0,0],"type":"BombGun","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",21],["When #% of energy, @chargeTypes",25,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","Slower",100,1500],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","Slower",120,1300],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","Slower",150,1100],["@attackTypes enemy within #m","Flee",1600],["@capTypes Command Points within #m","Capture",2000],["Stay in #m range of slot # units",500,4],["Stay in #m range of slot # units",500,8],["Field # for # of ship in slot # at priority #",1,1,8,2]]},{"parts":[{"pos":[-30,-90],"type":"Engine02","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[-20,60],"type":"ReloaderMod","dir":0},{"pos":[-50,60],"type":"Battery1x2","dir":0},{"pos":[-20,-20],"type":"BulletSpeedMod","dir":0},{"pos":[-50,-10],"type":"HArmor1x1","dir":0},{"pos":[-30,-50],"type":"HArmor1x1","dir":0},{"pos":[0,90],"type":"HArmor2x1","dir":0},{"pos":[30,-50],"type":"HArmor1x1","dir":0},{"pos":[50,60],"type":"Battery1x2","dir":0},{"pos":[50,-10],"type":"HArmor1x1","dir":0},{"pos":[20,60],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"DamageMod","dir":0},{"pos":[20,-20],"type":"BulletSpeedMod","dir":0},{"pos":[0,-80],"type":"Mount360Micro","dir":0},{"pos":[30,-90],"type":"Engine02","dir":0},{"pos":[60,-80],"type":"HArmor2x2Angle","dir":0},{"pos":[-60,-80],"type":"HArmor2x2Angle","dir":0},{"pos":[50,-40],"type":"HArmor1x2","dir":0},{"pos":[-50,-40],"type":"HArmor1x2","dir":0},{"pos":[-30,90],"type":"Wing1x1Angle","dir":0},{"pos":[30,90],"type":"Wing1x1Angle","dir":0},{"pos":[50,90],"type":"Wing1x1Notch","dir":0},{"pos":[-50,90],"type":"Wing1x1Notch","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[10,-50],"type":"Reactor1x1","dir":0},{"pos":[-10,-50],"type":"Battery1x1","dir":0},{"pos":[0,-80],"type":"PDTurret","dir":0},{"pos":[0,20],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",100],["@attackTypes enemy within #m","Ram",300],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More DPS","Less Range",900],["@capTypes Command Points within #m","Capture",500],["Stay in #m range of slot # units",700,4],["@attackTypes enemy @unitTypes within #m","Attack","Interceptor",1700],["@attackTypes enemy @unitTypes within #m","Attack","Bomber",1700],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",1700],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",1700],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Faster","---",1700],["@attackTypes enemy within #m","Attack",2000],["@capTypes Command Points within #m","Capture",2000],["Goto @locationTypes","Friendly Spawn"],["Field # at priority #",1,2],["Field # at priority #",1,3],["Field # at priority #",3,5]]},"",""];
ais.all.LightShower = [{"parts":[{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[-50,-50],"type":"Wing1x1Round","dir":0},{"pos":[50,-50],"type":"Wing1x1Round","dir":0},{"pos":[0,0],"type":"HeavyBeamTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",1400,2],["@attackTypes enemy within #m","Kite",2000],["Field # at priority #",1,1],["Avoid everything"],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,30]]},{"parts":[{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[-40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[70,30],"type":"Wing1x1Round","dir":0},{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[-70,30],"type":"Wing1x1Round","dir":0},{"pos":[-70,-10],"type":"Engine02","dir":0},{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[0,0],"type":"HeavyBeamTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of friendly units",500],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Kite",1500],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,35]]},{"parts":[{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[0,0],"type":"Mount360Micro","dir":0},{"pos":[10,-30],"type":"Battery1x1","dir":0},{"pos":[-30,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[30,-10],"type":"Wing1x1Notch","dir":0},{"pos":[-30,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,0],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",3,1,4,1],["Stay in #m range of slot # units",800,4],["@attackTypes enemy within #m","Attack",1500],["Stay in #m range of slot # units",400,4],["Avoid everything"],["Try to field # every # seconds",1,20],["Goto @locationTypes","Friendly Army Middle"]]},{"parts":[{"pos":[-50,-50],"type":"Wing1x1Round","dir":0},{"pos":[40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[-40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[50,-50],"type":"Wing1x1Round","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[-80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,10],"type":"Reactor2x1","dir":0},{"pos":[80,10],"type":"Reactor2x1","dir":0},{"pos":[0,-80],"type":"EnergyTransfer","dir":0},{"pos":[0,100],"type":"Mount360","dir":0},{"pos":[0,0],"type":"HeavyBeamTurret","dir":0},{"pos":[0,100],"type":"PDTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",1500,1],["Avoid everything"],["Stay in #m range of slot # units",1400,2],["Field # at priority #",1,2],["Try to field # every # seconds",1,40]]},{"parts":[{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[-30,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[30,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[0,10],"type":"Battery2x1","dir":0},{"pos":[-40,20],"type":"Mount30","dir":0},{"pos":[40,20],"type":"Mount30","dir":0},{"pos":[10,30],"type":"Wing1x1Round","dir":0},{"pos":[-10,40],"type":"VArmor1x1Corner3","dir":0},{"pos":[-40,20],"type":"LightBeamTurret","dir":0},{"pos":[40,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",1,1],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",1000],["Avoid #dps danger areas",5],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,25]]},"","","","",""];
ais.all.LongPoint = [{"parts":[{"pos":[40,-20],"type":"BulletSpeedMod","dir":0},{"pos":[-30,-60],"type":"Engine04","dir":0},{"pos":[-70,20],"type":"Wing1x2","dir":0},{"pos":[0,40],"type":"Mount30","dir":0},{"pos":[0,80],"type":"Mount30","dir":0},{"pos":[70,20],"type":"Wing1x2","dir":0},{"pos":[70,-20],"type":"Engine04","dir":0},{"pos":[0,-30],"type":"Reactor2x1","dir":0},{"pos":[50,-60],"type":"Engine04","dir":0},{"pos":[30,-60],"type":"Engine04","dir":0},{"pos":[-70,-20],"type":"Engine04","dir":0},{"pos":[-50,-60],"type":"Engine04","dir":0},{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[-40,-20],"type":"BulletSpeedMod","dir":0},{"pos":[40,20],"type":"BulletSpeedMod","dir":0},{"pos":[-40,20],"type":"BulletSpeedMod","dir":0},{"pos":[40,60],"type":"BulletSpeedMod","dir":0},{"pos":[-40,60],"type":"BulletSpeedMod","dir":0},{"pos":[-40,100],"type":"BulletSpeedMod","dir":0},{"pos":[40,100],"type":"BulletSpeedMod","dir":0},{"pos":[0,-50],"type":"Battery2x1","dir":0},{"pos":[0,120],"type":"BulletSpeedMod","dir":0},{"pos":[-10,-70],"type":"Solar1x1","dir":0},{"pos":[10,-70],"type":"Solar1x1","dir":0},{"pos":[0,0],"type":"ArtilleryTurret","dir":0},{"pos":[0,80],"type":"ArtilleryTurret","dir":0},{"pos":[0,40],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["Avoid everything"],["Stay in #m range of slot # units",2500,2],["@attackTypes enemy within #m","Attack",10000],["When #% of energy, @chargeTypes",20,"Rest"],["Field # for # of ship in slot # at priority #",2,1,2,2]]},{"parts":[{"pos":[-170,-110],"type":"Engine02","dir":0},{"pos":[-80,40],"type":"Battery2x2","dir":0},{"pos":[-40,60],"type":"BulletSpeedMod","dir":0},{"pos":[40,60],"type":"BulletSpeedMod","dir":0},{"pos":[80,80],"type":"Mount30","dir":0},{"pos":[120,100],"type":"BulletSpeedMod","dir":0},{"pos":[120,60],"type":"BulletSpeedMod","dir":0},{"pos":[-120,100],"type":"BulletSpeedMod","dir":0},{"pos":[80,120],"type":"Wing2x2","dir":0},{"pos":[-80,120],"type":"Wing2x2","dir":0},{"pos":[-80,80],"type":"Mount30","dir":0},{"pos":[-100,-60],"type":"BulletSpeedMod","dir":0},{"pos":[-180,-60],"type":"BulletSpeedMod","dir":0},{"pos":[100,-60],"type":"BulletSpeedMod","dir":0},{"pos":[180,-60],"type":"BulletSpeedMod","dir":0},{"pos":[140,-10],"type":"HArmor2x1","dir":0},{"pos":[-140,-10],"type":"HArmor2x1","dir":0},{"pos":[-180,40],"type":"Mount30","dir":0},{"pos":[-180,10],"type":"HArmor2x1","dir":0},{"pos":[-140,20],"type":"HArmor2x2","dir":0},{"pos":[180,10],"type":"HArmor2x1","dir":0},{"pos":[140,20],"type":"HArmor2x2","dir":0},{"pos":[-110,20],"type":"HArmor1x2","dir":0},{"pos":[-150,50],"type":"HArmor1x1","dir":0},{"pos":[110,20],"type":"HArmor1x2","dir":0},{"pos":[40,140],"type":"BulletSpeedMod","dir":0},{"pos":[180,40],"type":"Mount30","dir":0},{"pos":[-180,-20],"type":"BulletSpeedMod","dir":0},{"pos":[180,-20],"type":"BulletSpeedMod","dir":0},{"pos":[80,10],"type":"HArmor2x1","dir":0},{"pos":[150,50],"type":"HArmor1x1","dir":0},{"pos":[-40,140],"type":"BulletSpeedMod","dir":0},{"pos":[80,40],"type":"Battery2x2","dir":0},{"pos":[110,-110],"type":"Engine02","dir":0},{"pos":[170,-110],"type":"Engine02","dir":0},{"pos":[-110,-110],"type":"Engine02","dir":0},{"pos":[-80,10],"type":"HArmor2x1","dir":0},{"pos":[-120,60],"type":"BulletSpeedMod","dir":0},{"pos":[-100,-20],"type":"BulletSpeedMod","dir":0},{"pos":[100,-20],"type":"BulletSpeedMod","dir":0},{"pos":[-40,100],"type":"BulletSpeedMod","dir":0},{"pos":[40,100],"type":"BulletSpeedMod","dir":0},{"pos":[0,80],"type":"Mount90","dir":0},{"pos":[0,40],"type":"BulletSpeedMod","dir":0},{"pos":[0,120],"type":"Mount30","dir":0},{"pos":[0,160],"type":"BulletSpeedMod","dir":0},{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[-140,-40],"type":"Mount90","dir":0},{"pos":[140,-40],"type":"Mount90","dir":0},{"pos":[-40,20],"type":"HArmor2x2","dir":0},{"pos":[40,20],"type":"HArmor2x2","dir":0},{"pos":[-40,-20],"type":"Mount30","dir":0},{"pos":[40,-20],"type":"Mount30","dir":0},{"pos":[0,-40],"type":"HArmor2x2","dir":0},{"pos":[140,-80],"type":"BulletSpeedMod","dir":0},{"pos":[-140,-80],"type":"BulletSpeedMod","dir":0},{"pos":[-30,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-150,70],"type":"HArmor1x1Angle","dir":0},{"pos":[150,70],"type":"HArmor1x1Angle","dir":0},{"pos":[180,40],"type":"PDTurret","dir":0},{"pos":[-40,-20],"type":"PDTurret","dir":0},{"pos":[40,-20],"type":"PDTurret","dir":0},{"pos":[-180,40],"type":"PDTurret","dir":0},{"pos":[-80,80],"type":"ArtilleryTurret","dir":0},{"pos":[140,-40],"type":"ArtilleryTurret","dir":0},{"pos":[80,80],"type":"ArtilleryTurret","dir":0},{"pos":[0,80],"type":"ArtilleryTurret","dir":0},{"pos":[-140,-40],"type":"ArtilleryTurret","dir":0},{"pos":[0,120],"type":"BombGun","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",1,30],["Field # at start",2],["Field # at priority #",2,1],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","more brawling value","less range",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","slower","more range",3000],["Stay in #m range of friendly units",500],["@capTypes command points within #m","Capture",10000]]},{"parts":[{"pos":[30,10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[10,10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-10,50],"type":"Wing1x1Notch","dir":0},{"pos":[50,50],"type":"Wing1x1Notch","dir":0},{"pos":[20,40],"type":"Mount30","dir":0},{"pos":[50,30],"type":"Battery1x1","dir":0},{"pos":[50,10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-30,30],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-10,0],"type":"Engine03","dir":0},{"pos":[-10,30],"type":"Solar1x1","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Weaker","slower",350],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","more range","more brawling value",2000],["Field # at start",2],["Try to field # every # seconds",3,30],["@capTypes command points within #m","Spread to",10000]]},{"parts":[{"pos":[70,50],"type":"Wing1x1Round","dir":0},{"pos":[-30,80],"type":"Battery1x2","dir":0},{"pos":[0,-20],"type":"BulletSpeedMod","dir":0},{"pos":[40,0],"type":"Mount360Micro","dir":0},{"pos":[0,60],"type":"Mount360Micro","dir":0},{"pos":[40,40],"type":"BulletSpeedMod","dir":0},{"pos":[-40,0],"type":"Mount360Micro","dir":0},{"pos":[0,20],"type":"BulletSpeedMod","dir":0},{"pos":[-40,40],"type":"BulletSpeedMod","dir":0},{"pos":[0,100],"type":"BulletSpeedMod","dir":0},{"pos":[80,20],"type":"BulletSpeedMod","dir":0},{"pos":[-80,20],"type":"BulletSpeedMod","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[30,80],"type":"Battery1x2","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[-70,50],"type":"Wing1x1Round","dir":0},{"pos":[-50,80],"type":"VArmor1x2","dir":0},{"pos":[50,80],"type":"VArmor1x2","dir":0},{"pos":[-70,-20],"type":"VArmor1x2","dir":0},{"pos":[70,-20],"type":"VArmor1x2","dir":0},{"pos":[50,-40],"type":"VArmor1x2","dir":0},{"pos":[-50,-40],"type":"VArmor1x2","dir":0},{"pos":[0,-60],"type":"Solar2x2","dir":0},{"pos":[-40,0],"type":"FlackTurret","dir":0},{"pos":[0,60],"type":"FlackTurret","dir":0},{"pos":[40,0],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["Field # at start",1],["Stay in #m range of slot # units",300,2],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","less expensive",200,900],["Avoid everything"],["Field # for # of @needTypes at priority #",1,3,"fighter counter need",1]]},"","","","","",""];
ais.all.MBT = [{"parts":[{"pos":[80,-10],"type":"Battery2x1","dir":0},{"pos":[10,150],"type":"HArmor1x1Angle","dir":0},{"pos":[20,20],"type":"BulletSpeedMod","dir":0},{"pos":[0,-20],"type":"Mount360","dir":0},{"pos":[-20,-60],"type":"ReloaderMod","dir":0},{"pos":[40,60],"type":"ReloaderMod","dir":0},{"pos":[0,80],"type":"Mount360","dir":0},{"pos":[-40,60],"type":"ReloaderMod","dir":0},{"pos":[100,-40],"type":"Mount30","dir":0},{"pos":[100,80],"type":"Mount30","dir":0},{"pos":[-100,-40],"type":"Mount30","dir":0},{"pos":[40,100],"type":"HArmor2x2Angle","dir":0},{"pos":[-50,20],"type":"HArmor1x2","dir":0},{"pos":[50,20],"type":"HArmor1x2","dir":0},{"pos":[-100,80],"type":"Mount30","dir":0},{"pos":[-40,100],"type":"HArmor2x2Angle","dir":0},{"pos":[-70,80],"type":"HArmor1x2","dir":0},{"pos":[160,0],"type":"Mount30","dir":0},{"pos":[-160,0],"type":"Mount30","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[30,130],"type":"HArmor1x1Angle","dir":0},{"pos":[20,-60],"type":"ReloaderMod","dir":0},{"pos":[160,40],"type":"Wing2x2","dir":0},{"pos":[-70,-30],"type":"Battery1x1","dir":0},{"pos":[-160,40],"type":"Wing2x2","dir":0},{"pos":[-30,130],"type":"HArmor1x1Angle","dir":0},{"pos":[70,-30],"type":"Battery1x1","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[-80,50],"type":"Battery2x1","dir":0},{"pos":[80,50],"type":"Battery2x1","dir":0},{"pos":[-10,150],"type":"HArmor1x1Angle","dir":0},{"pos":[-80,-10],"type":"Battery2x1","dir":0},{"pos":[70,80],"type":"HArmor1x2","dir":0},{"pos":[-130,-40],"type":"HArmor1x2","dir":0},{"pos":[130,-40],"type":"HArmor1x2","dir":0},{"pos":[-100,-80],"type":"BulletSpeedMod","dir":0},{"pos":[100,-80],"type":"BulletSpeedMod","dir":0},{"pos":[-160,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[160,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-100,120],"type":"HArmor2x2Angle","dir":0},{"pos":[100,120],"type":"HArmor2x2Angle","dir":0},{"pos":[-140,-80],"type":"HArmor2x2AngleBack","dir":0},{"pos":[140,-80],"type":"HArmor2x2AngleBack","dir":0},{"pos":[0,-100],"type":"Reactor2x2","dir":0},{"pos":[-30,-110],"type":"Engine02","dir":0},{"pos":[30,-110],"type":"Engine02","dir":0},{"pos":[70,-70],"type":"Engine02","dir":0},{"pos":[-70,-70],"type":"Engine02","dir":0},{"pos":[80,20],"type":"Mount90","dir":0},{"pos":[-80,20],"type":"Mount90","dir":0},{"pos":[-20,20],"type":"BulletSpeedMod","dir":0},{"pos":[0,120],"type":"ReloaderMod","dir":0},{"pos":[-120,0],"type":"Mount90","dir":0},{"pos":[120,0],"type":"Mount90","dir":0},{"pos":[0,50],"type":"Reactor2x1","dir":0},{"pos":[-50,-50],"type":"Battery1x1","dir":0},{"pos":[50,-50],"type":"HArmor1x1","dir":0},{"pos":[0,80],"type":"PDTurret","dir":0},{"pos":[-80,20],"type":"LightBeamTurret","dir":0},{"pos":[80,20],"type":"LightBeamTurret","dir":0},{"pos":[100,-40],"type":"TorpTurret","dir":0},{"pos":[-160,0],"type":"TorpTurret","dir":0},{"pos":[-100,80],"type":"TorpTurret","dir":0},{"pos":[100,80],"type":"TorpTurret","dir":0},{"pos":[-100,-40],"type":"TorpTurret","dir":0},{"pos":[160,0],"type":"TorpTurret","dir":0},{"pos":[120,0],"type":"FlackTurret","dir":0},{"pos":[-120,0],"type":"AutoTurret","dir":0},{"pos":[0,-20],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Ram",300],["Avoid over #damage shots",150],["@attackTypes enemy within #m","Attack",500],["@attackTypes enemy within #m","Ram",650],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Less Brawling Value","---",800],["@attackTypes enemy within #m","Attack",800],["@capTypes Command Points within #m","Capture",500],["Stay in #m range of slot # units",700,2],["@attackTypes enemy within #m","Attack",1500],["Goto @locationTypes","Enemy Army Middle"],["Field # at priority #",1,3],["Field # at priority #",3,6],["Field # at priority #",5,7]]},{"parts":[{"pos":[0,60],"type":"Reactor2x2","dir":0},{"pos":[-50,10],"type":"HArmor1x1","dir":0},{"pos":[40,-80],"type":"DamageMod","dir":0},{"pos":[0,-60],"type":"Mount270","dir":0},{"pos":[-40,-80],"type":"DamageMod","dir":0},{"pos":[0,-100],"type":"TargetingMod","dir":0},{"pos":[0,-20],"type":"TargetingMod","dir":0},{"pos":[-40,-40],"type":"BulletSpeedMod","dir":0},{"pos":[40,-40],"type":"BulletSpeedMod","dir":0},{"pos":[50,10],"type":"HArmor1x1","dir":0},{"pos":[40,-10],"type":"Reactor2x1","dir":0},{"pos":[0,20],"type":"EnergyTransfer","dir":0},{"pos":[-50,40],"type":"Wing1x2","dir":0},{"pos":[-30,20],"type":"HArmor1x2","dir":0},{"pos":[30,20],"type":"HArmor1x2","dir":0},{"pos":[50,40],"type":"Wing1x2","dir":0},{"pos":[90,-10],"type":"Engine02","dir":0},{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[-80,0],"type":"Mount270","dir":0},{"pos":[-40,-10],"type":"Reactor2x1","dir":0},{"pos":[0,-60],"type":"MissileTurret","dir":0},{"pos":[-80,0],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",650],["Avoid over #damage shots",150],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","---",800],["Stay in #m range of slot # units",100,1],["Avoid over #damage shots",20],["Stay in #m range of slot # units",100,8],["Stay in #m range of slot # units",100,7],["Avoid over #damage shots",50],["@attackTypes enemy within #m","Flee",1600],["Goto @locationTypes","Friendly Spawn"],["Field # for # of ship in slot # at priority #",1,1,1,3]]},{"parts":[{"pos":[-50,40],"type":"VArmor1x2Corner4","dir":0},{"pos":[10,10],"type":"Battery1x1","dir":0},{"pos":[-50,10],"type":"Battery1x1","dir":0},{"pos":[10,40],"type":"VArmor1x2Corner4","dir":0},{"pos":[-20,50],"type":"Wing2x1","dir":0},{"pos":[-20,20],"type":"Mount30","dir":0},{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[-20,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy within #m","Ram",350],["When #% of energy, @chargeTypes",25,"Find recharger"],["Avoid over #damage shots",50],["Stay in #m range of slot # units",5000,1],["@attackTypes enemy within #m","Run-by",650],["Avoid over #damage shots",20],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","Slower",1500],["@capTypes Command Points within #m","Capture",700],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Circle","More Brawling Value","More Range",1700],["@capTypes Command Points within #m","Protect",1500],["@capTypes Command Points within #m","Capture",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","Slower",2000],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Less DPS",20,2000],["@capTypes Command Points within #m","Protect",3000],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",2],["Try to field # every # seconds",1,80],["Field # for # of ship in slot # at priority #",1,1,8,5],["Try to field # every # seconds",1,40]]},{"parts":[{"pos":[0,20],"type":"EnergyTransfer","dir":0},{"pos":[0,-20],"type":"Reactor2x2","dir":0},{"pos":[-30,-30],"type":"Engine02","dir":0},{"pos":[-30,20],"type":"Wing1x2","dir":0},{"pos":[0,-50],"type":"Reactor2x1","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Flee",400],["Stay in #m range of slot # units",50,1],["Avoid over #damage shots",50],["Stay in #m range of slot # units",50,8],["Goto @locationTypes","Friendly Spawn"],["Field # at start",1],["Field # for # of ship in slot # at priority #",1,1,1,2],["Field # for # of ship in slot # at priority #",1,2,2,4],["Field # for # of ship in slot # at priority #",1,1,6,2]]},{"parts":[{"pos":[50,-50],"type":"Engine02","dir":0},{"pos":[50,40],"type":"Wing1x2","dir":0},{"pos":[20,40],"type":"DamageMod","dir":0},{"pos":[-40,0],"type":"DamageMod","dir":0},{"pos":[40,0],"type":"DamageMod","dir":0},{"pos":[-20,40],"type":"DamageMod","dir":0},{"pos":[0,0],"type":"Mount270","dir":0},{"pos":[20,-40],"type":"ReloaderMod","dir":0},{"pos":[-20,-40],"type":"DamageMod","dir":0},{"pos":[-50,40],"type":"Wing1x2","dir":0},{"pos":[-50,-50],"type":"Engine02","dir":0},{"pos":[-30,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,-70],"type":"HArmor2x1","dir":0},{"pos":[30,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,0],"type":"VArmor1x2SideBarFilled","dir":0},{"pos":[0,70],"type":"Battery2x1","dir":0},{"pos":[-30,70],"type":"HArmor1x1Angle","dir":0},{"pos":[30,70],"type":"HArmor1x1Angle","dir":0},{"pos":[70,0],"type":"VArmor1x2SideBarFilled","dir":0},{"pos":[0,0],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",50],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Circle",500],["@capTypes Command Points within #m","Capture",500],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","Less DPS",100,1300],["Stay in #m range of slot # units",1600,8],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Spread to",3000],["Goto @locationTypes","Enemy Spawn"],["Field # for # of ship in slot # at priority #",1,1,2,3],["Field # for # of ship in slot # at priority #",1,2,1,3],["Field # for # of ship in slot # at priority #",1,1,8,3]]},{"parts":[{"pos":[100,20],"type":"Wing2x2","dir":0},{"pos":[-70,-40],"type":"HArmor1x2","dir":0},{"pos":[-20,40],"type":"Mount30","dir":0},{"pos":[20,40],"type":"Mount30","dir":0},{"pos":[-60,-10],"type":"Battery2x1","dir":0},{"pos":[60,-10],"type":"Battery2x1","dir":0},{"pos":[-60,60],"type":"HArmor2x2Angle","dir":0},{"pos":[60,60],"type":"HArmor2x2Angle","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[60,20],"type":"Mount30","dir":0},{"pos":[70,-40],"type":"HArmor1x2","dir":0},{"pos":[-60,20],"type":"Mount30","dir":0},{"pos":[50,-50],"type":"Engine01","dir":0},{"pos":[30,80],"type":"Wing1x2","dir":0},{"pos":[-50,-50],"type":"Engine01","dir":0},{"pos":[-30,80],"type":"Wing1x2","dir":0},{"pos":[-100,20],"type":"Wing2x2","dir":0},{"pos":[20,-20],"type":"Mount30","dir":0},{"pos":[20,10],"type":"Battery2x1","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0},{"pos":[-30,10],"type":"HArmor1x1","dir":0},{"pos":[-20,-20],"type":"Mount30","dir":0},{"pos":[-60,20],"type":"LightBeamTurret","dir":0},{"pos":[-20,40],"type":"LightBeamTurret","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0},{"pos":[60,20],"type":"LightBeamTurret","dir":0},{"pos":[-20,-20],"type":"LightBeamTurret","dir":0},{"pos":[20,-20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",10,"Find recharger"],["@attackTypes enemy within #m","Attack",200],["@attackTypes enemy within #m","Ram",500],["Avoid over #damage shots",50],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","More DPS",1,1000],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Capture",500],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","More DPS",1,2000],["@capTypes Command Points within #m","Capture",3000],["Goto @locationTypes","Enemy Spawn"],["Field # for # of ship in slot # at priority #",1,1,5,4],["Field # for # of ship in slot # at priority #",1,2,1,5]]},{"parts":[{"pos":[40,-20],"type":"BulletSpeedMod","dir":0},{"pos":[0,-20],"type":"Mount180","dir":0},{"pos":[80,-60],"type":"Mount90","dir":0},{"pos":[70,-20],"type":"Battery1x2","dir":0},{"pos":[-20,20],"type":"TargetingMod","dir":0},{"pos":[0,50],"type":"HArmor2x1","dir":0},{"pos":[-50,20],"type":"HArmor1x2","dir":0},{"pos":[70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[70,10],"type":"Battery1x1","dir":0},{"pos":[-40,-20],"type":"BulletSpeedMod","dir":0},{"pos":[50,20],"type":"HArmor1x2","dir":0},{"pos":[20,20],"type":"TargetingMod","dir":0},{"pos":[-10,-70],"type":"Engine02","dir":0},{"pos":[-40,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[40,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[30,50],"type":"Wing1x1Round","dir":0},{"pos":[-30,50],"type":"Wing1x1Round","dir":0},{"pos":[-80,-20],"type":"Wing2x2","dir":0},{"pos":[10,-70],"type":"Engine02","dir":0},{"pos":[80,-60],"type":"AutoTurret","dir":0},{"pos":[0,-20],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Ram",300],["Avoid over #damage shots",50],["@attackTypes enemy within #m","Attack",600],["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",170,1100],["Stay in #m range of slot # units",2000,1],["@capTypes Command Points within #m","Capture",1500],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",100,1400],["Stay in #m range of slot # units",200,1],["Stay in #m range of slot # units",200,8],["Goto @locationTypes","Friendly Spawn"],["Field # at start",2],["Field # for # of ship in slot # at priority #",1,1,2,4],["Field # for # of ship in slot # at priority #",1,1,8,4]]},{"parts":[{"pos":[-100,120],"type":"HArmor2x2Angle","dir":0},{"pos":[100,10],"type":"HArmor2x1","dir":0},{"pos":[-60,60],"type":"Mount360","dir":0},{"pos":[60,60],"type":"Mount360","dir":0},{"pos":[-60,100],"type":"BulletSpeedMod","dir":0},{"pos":[-20,80],"type":"TargetingMod","dir":0},{"pos":[-20,40],"type":"ReloaderMod","dir":0},{"pos":[-100,40],"type":"TargetingMod","dir":0},{"pos":[-60,20],"type":"ReloaderMod","dir":0},{"pos":[20,40],"type":"ReloaderMod","dir":0},{"pos":[60,20],"type":"ReloaderMod","dir":0},{"pos":[20,80],"type":"BulletSpeedMod","dir":0},{"pos":[100,40],"type":"TargetingMod","dir":0},{"pos":[60,100],"type":"ReloaderMod","dir":0},{"pos":[100,80],"type":"ReloaderMod","dir":0},{"pos":[-100,80],"type":"ReloaderMod","dir":0},{"pos":[-20,0],"type":"Reactor2x2","dir":0},{"pos":[20,0],"type":"Reactor2x2","dir":0},{"pos":[20,-80],"type":"Battery2x2","dir":0},{"pos":[-20,-80],"type":"Battery2x2","dir":0},{"pos":[-50,-90],"type":"Engine02","dir":0},{"pos":[70,-90],"type":"Engine02","dir":0},{"pos":[50,-90],"type":"Engine02","dir":0},{"pos":[-100,10],"type":"HArmor2x1","dir":0},{"pos":[-70,-90],"type":"Engine02","dir":0},{"pos":[100,120],"type":"HArmor2x2Angle","dir":0},{"pos":[-30,110],"type":"HArmor1x1","dir":0},{"pos":[30,110],"type":"HArmor1x1","dir":0},{"pos":[0,130],"type":"Battery2x1","dir":0},{"pos":[0,110],"type":"HArmor2x1","dir":0},{"pos":[-30,130],"type":"HArmor1x1Angle","dir":0},{"pos":[30,130],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[110,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-90,150],"type":"HArmor1x1Angle","dir":0},{"pos":[90,150],"type":"HArmor1x1Angle","dir":0},{"pos":[-40,-50],"type":"Wing2x1","dir":0},{"pos":[40,-50],"type":"Wing2x1","dir":0},{"pos":[-100,-20],"type":"Mount180","dir":0},{"pos":[100,-20],"type":"Mount180","dir":0},{"pos":[0,-40],"type":"Mount360","dir":0},{"pos":[100,-100],"type":"Wing2x2","dir":0},{"pos":[-100,-100],"type":"Wing2x2","dir":0},{"pos":[0,-40],"type":"PDTurret","dir":0},{"pos":[-100,-20],"type":"LightBeamTurret","dir":0},{"pos":[100,-20],"type":"LightBeamTurret","dir":0},{"pos":[60,60],"type":"TorpTurret","dir":0},{"pos":[-60,60],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",150],["Avoid over #damage shots",50],["@attackTypes enemy within #m","Stay at range",700],["@attackTypes enemy within #m","Flee",1000],["@capTypes Command Points within #m","Capture",600],["@attackTypes enemy within #m","Circle",1300],["@capTypes Command Points within #m","Capture",1000],["@capTypes Command Points within #m","Capture",3000],["Goto @locationTypes","Enemy Spawn"],["Field # for # of ship in slot # at priority #",1,1,9,1],["Field # at priority #",1,5],["Field # for # of ship in slot # at priority #",1,1,6,4]]},{"parts":[{"pos":[30,-50],"type":"Engine01","dir":0},{"pos":[-40,-10],"type":"Battery2x1","dir":0},{"pos":[20,40],"type":"Mount30","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[60,20],"type":"Mount30","dir":0},{"pos":[-60,20],"type":"Mount30","dir":0},{"pos":[-20,40],"type":"Mount30","dir":0},{"pos":[20,10],"type":"Battery2x1","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[-30,10],"type":"HArmor1x1","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0},{"pos":[0,-20],"type":"Mount270","dir":0},{"pos":[-30,-50],"type":"Engine01","dir":0},{"pos":[-50,-40],"type":"HArmor1x2","dir":0},{"pos":[50,-40],"type":"HArmor1x2","dir":0},{"pos":[40,-10],"type":"Battery2x1","dir":0},{"pos":[80,-20],"type":"Wing2x2","dir":0},{"pos":[-80,-20],"type":"Wing2x2","dir":0},{"pos":[100,20],"type":"HArmor2x2Angle","dir":0},{"pos":[-100,20],"type":"HArmor2x2Angle","dir":0},{"pos":[30,80],"type":"Wing1x2","dir":0},{"pos":[-30,80],"type":"Wing1x2","dir":0},{"pos":[0,-20],"type":"PDTurret","dir":0},{"pos":[-60,20],"type":"LightBeamTurret","dir":0},{"pos":[-20,40],"type":"LightBeamTurret","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0},{"pos":[60,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",10,"Find recharger"],["@attackTypes enemy within #m","Attack",200],["@attackTypes enemy within #m","Ram",400],["Avoid over #damage shots",50],["Stay in #m range of slot # units",100,8],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","More DPS",1,1000],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Guard",1000],["Field # for # of ship in slot # at priority #",1,1,8,2],["Field # at priority #",1,4],["Field # for # of ship in slot # at priority #",1,5,3,2],["Try to field # every # seconds",1,200],["Field # for # of ship in slot # at priority #",1,1,6,1]]},{"parts":[{"pos":[-10,-10],"type":"Wing1x1Notch","dir":0},{"pos":[30,-10],"type":"Wing1x1Notch","dir":0},{"pos":[10,10],"type":"Battery1x1","dir":0},{"pos":[10,-20],"type":"Engine03","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More Range",200,600],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More Range",490,800],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More Range",800,1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More Range",999,1000],["Avoid #dps danger areas",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More Range",1200,1250],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More Range",1400,1350],["@capTypes Command Points within #m","Spread to",1000],["Goto @locationTypes","Enemy Army Middle"],["Try to field # every # seconds",1,25],["Field # at start",2],["Field # for # of ship in slot # at priority #",2,1,8,3]]}];
ais.all.MasterMind = [{"parts":[{"pos":[90,90],"type":"Reactor1x1","dir":0},{"pos":[-90,110],"type":"Reactor1x1","dir":0},{"pos":[-30,-30],"type":"Reactor1x1","dir":0},{"pos":[-10,-10],"type":"Reactor1x1","dir":0},{"pos":[10,-10],"type":"Reactor1x1","dir":0},{"pos":[30,-30],"type":"Reactor1x1","dir":0},{"pos":[-60,20],"type":"Mount360Micro","dir":0},{"pos":[60,20],"type":"Mount360Micro","dir":0},{"pos":[0,30],"type":"ShieldGen2x1","dir":0},{"pos":[0,10],"type":"ShieldGen2x1","dir":0},{"pos":[-30,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-30,10],"type":"ShieldGen1x1","dir":0},{"pos":[-30,30],"type":"ShieldGen1x1","dir":0},{"pos":[30,30],"type":"ShieldGen1x1","dir":0},{"pos":[30,10],"type":"ShieldGen1x1","dir":0},{"pos":[30,-10],"type":"ShieldGen1x1","dir":0},{"pos":[30,50],"type":"ShieldGen1x1","dir":0},{"pos":[-30,50],"type":"ShieldGen1x1","dir":0},{"pos":[-30,70],"type":"Reactor1x1","dir":0},{"pos":[-90,-10],"type":"Reactor1x1","dir":0},{"pos":[30,70],"type":"Reactor1x1","dir":0},{"pos":[-90,-30],"type":"Reactor1x1","dir":0},{"pos":[-90,10],"type":"Reactor1x1","dir":0},{"pos":[-90,50],"type":"Reactor1x1","dir":0},{"pos":[-90,70],"type":"Reactor1x1","dir":0},{"pos":[90,70],"type":"Reactor1x1","dir":0},{"pos":[-90,30],"type":"Reactor1x1","dir":0},{"pos":[90,50],"type":"Reactor1x1","dir":0},{"pos":[90,30],"type":"Reactor1x1","dir":0},{"pos":[90,-30],"type":"Reactor1x1","dir":0},{"pos":[90,10],"type":"Reactor1x1","dir":0},{"pos":[-110,70],"type":"Wing1x1Notch","dir":0},{"pos":[-110,50],"type":"Wing1x1Notch","dir":0},{"pos":[-110,30],"type":"Wing1x1Notch","dir":0},{"pos":[-110,-10],"type":"Wing1x1Notch","dir":0},{"pos":[-110,-50],"type":"Wing1x1Notch","dir":0},{"pos":[-110,10],"type":"Wing1x1Notch","dir":0},{"pos":[-110,-30],"type":"Wing1x1Notch","dir":0},{"pos":[110,-10],"type":"Wing1x1Notch","dir":0},{"pos":[110,-50],"type":"Wing1x1Notch","dir":0},{"pos":[110,30],"type":"Wing1x1Notch","dir":0},{"pos":[110,50],"type":"Wing1x1Notch","dir":0},{"pos":[110,70],"type":"Wing1x1Notch","dir":0},{"pos":[110,-80],"type":"Engine03","dir":0},{"pos":[-110,-80],"type":"Engine03","dir":0},{"pos":[0,-40],"type":"CloakGenerator","dir":0},{"pos":[110,10],"type":"Wing1x1Notch","dir":0},{"pos":[110,-30],"type":"Wing1x1Notch","dir":0},{"pos":[-90,90],"type":"Reactor1x1","dir":0},{"pos":[90,110],"type":"Reactor1x1","dir":0},{"pos":[-110,90],"type":"Wing1x1Notch","dir":0},{"pos":[110,90],"type":"Wing1x1Notch","dir":0},{"pos":[90,-10],"type":"Reactor1x1","dir":0},{"pos":[-90,-80],"type":"Engine03","dir":0},{"pos":[-90,-50],"type":"Reactor1x1","dir":0},{"pos":[90,-80],"type":"Engine03","dir":0},{"pos":[90,-50],"type":"Reactor1x1","dir":0},{"pos":[30,130],"type":"Wing1x1Notch","dir":0},{"pos":[10,130],"type":"Wing1x1Notch","dir":0},{"pos":[-10,130],"type":"Wing1x1Notch","dir":0},{"pos":[-30,130],"type":"Wing1x1Notch","dir":0},{"pos":[-50,130],"type":"Wing1x1Notch","dir":0},{"pos":[50,130],"type":"Wing1x1Notch","dir":0},{"pos":[0,60],"type":"Mount270","dir":0},{"pos":[-10,-120],"type":"Engine03","dir":0},{"pos":[10,-120],"type":"Engine03","dir":0},{"pos":[30,-120],"type":"Engine03","dir":0},{"pos":[-30,-120],"type":"Engine03","dir":0},{"pos":[-70,-100],"type":"Engine03","dir":0},{"pos":[70,-100],"type":"Engine03","dir":0},{"pos":[20,-80],"type":"CloakGenerator","dir":0},{"pos":[-20,-80],"type":"CloakGenerator","dir":0},{"pos":[-30,-50],"type":"Reactor1x1","dir":0},{"pos":[30,-50],"type":"Reactor1x1","dir":0},{"pos":[60,-60],"type":"CloakGenerator","dir":0},{"pos":[-60,-60],"type":"CloakGenerator","dir":0},{"pos":[-50,50],"type":"Reactor1x1","dir":0},{"pos":[-70,50],"type":"Reactor1x1","dir":0},{"pos":[-50,70],"type":"Reactor1x1","dir":0},{"pos":[-70,70],"type":"Reactor1x1","dir":0},{"pos":[50,50],"type":"Reactor1x1","dir":0},{"pos":[70,50],"type":"Reactor1x1","dir":0},{"pos":[70,70],"type":"Reactor1x1","dir":0},{"pos":[50,70],"type":"Reactor1x1","dir":0},{"pos":[60,-20],"type":"CloakGenerator","dir":0},{"pos":[-60,-20],"type":"CloakGenerator","dir":0},{"pos":[-50,-100],"type":"Engine03","dir":0},{"pos":[50,-100],"type":"Engine03","dir":0},{"pos":[-60,110],"type":"UArmor2x1","dir":0},{"pos":[-20,110],"type":"UArmor2x1","dir":0},{"pos":[20,110],"type":"UArmor2x1","dir":0},{"pos":[60,110],"type":"UArmor2x1","dir":0},{"pos":[60,90],"type":"UArmor2x1","dir":0},{"pos":[20,90],"type":"UArmor2x1","dir":0},{"pos":[-20,90],"type":"UArmor2x1","dir":0},{"pos":[-60,90],"type":"UArmor2x1","dir":0},{"pos":[0,60],"type":"FlackTurret","dir":0},{"pos":[-60,20],"type":"AutoTurret","dir":0},{"pos":[60,20],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["Stay in #m range of friendly units",1200],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","Less Range",500,1000],["Goto @locationTypes","Friendly Army Middle"]]},{"parts":[{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[10,10],"type":"Battery1x1","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Cloaked","---",2000],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,1,4,2],["Field # for # of ship in slot # at priority #",1,2,4,2],["Field # for # of ship in slot # at priority #",1,1,1,3],["Field # for # of ship in slot # at priority #",1,2,1,4],["Field # for # of ship in slot # at priority #",4,1,8,5],["Field # at priority #",1,1]]},{"parts":[],"name":"","aiRules":[]},{"parts":[{"pos":[-40,0],"type":"TargetingMod","dir":0},{"pos":[-20,40],"type":"TargetingMod","dir":0},{"pos":[110,70],"type":"HArmor1x1Angle","dir":0},{"pos":[110,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,10],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,-10],"type":"HArmor1x1Angle","dir":0},{"pos":[110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[110,-10],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,50],"type":"HArmor1x1Angle","dir":0},{"pos":[110,10],"type":"HArmor1x1Angle","dir":0},{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[-110,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-60,140],"type":"HArmor2x2Angle","dir":0},{"pos":[80,20],"type":"Reactor2x2","dir":0},{"pos":[60,140],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,20],"type":"Reactor2x2","dir":0},{"pos":[-70,100],"type":"HArmor1x2","dir":0},{"pos":[70,100],"type":"HArmor1x2","dir":0},{"pos":[-90,-70],"type":"Engine02","dir":0},{"pos":[-70,-90],"type":"Engine02","dir":0},{"pos":[70,-90],"type":"Engine02","dir":0},{"pos":[90,-70],"type":"Engine02","dir":0},{"pos":[90,100],"type":"Wing1x2","dir":0},{"pos":[-70,-50],"type":"HArmor1x1","dir":0},{"pos":[80,-20],"type":"HArmor2x2","dir":0},{"pos":[70,-50],"type":"HArmor1x1","dir":0},{"pos":[-80,-20],"type":"HArmor2x2","dir":0},{"pos":[-90,100],"type":"Wing1x2","dir":0},{"pos":[-80,60],"type":"HArmor2x2","dir":0},{"pos":[80,60],"type":"HArmor2x2","dir":0},{"pos":[-110,90],"type":"HArmor1x1Angle","dir":0},{"pos":[0,80],"type":"Mount360","dir":0},{"pos":[20,40],"type":"BulletSpeedMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-50,40],"type":"Battery1x2","dir":0},{"pos":[-20,120],"type":"ReloaderMod","dir":0},{"pos":[40,80],"type":"TargetingMod","dir":0},{"pos":[20,120],"type":"ReloaderMod","dir":0},{"pos":[-20,-40],"type":"ReloaderMod","dir":0},{"pos":[20,-40],"type":"TargetingMod","dir":0},{"pos":[-40,80],"type":"DamageMod","dir":0},{"pos":[0,-80],"type":"EnergyTransfer","dir":0},{"pos":[40,-80],"type":"Mount90","dir":0},{"pos":[-40,-80],"type":"Mount90","dir":0},{"pos":[0,-120],"type":"Mount360Micro","dir":0},{"pos":[-40,-120],"type":"Mount360Micro","dir":0},{"pos":[40,-120],"type":"Mount360Micro","dir":0},{"pos":[110,-70],"type":"Engine02","dir":0},{"pos":[-110,-70],"type":"Engine02","dir":0},{"pos":[0,150],"type":"Reactor2x1","dir":0},{"pos":[50,40],"type":"Battery1x2","dir":0},{"pos":[50,-40],"type":"HArmor1x2","dir":0},{"pos":[-50,-40],"type":"HArmor1x2","dir":0},{"pos":[50,110],"type":"HArmor1x1","dir":0},{"pos":[30,150],"type":"HArmor1x1","dir":0},{"pos":[-30,150],"type":"HArmor1x1","dir":0},{"pos":[-50,110],"type":"HArmor1x1","dir":0},{"pos":[-110,-30],"type":"Wing1x1Angle","dir":0},{"pos":[110,-30],"type":"Wing1x1Angle","dir":0},{"pos":[40,-80],"type":"PDTurret","dir":0},{"pos":[-40,-80],"type":"PDTurret","dir":0},{"pos":[40,-120],"type":"PDTurret","dir":0},{"pos":[-40,-120],"type":"PDTurret","dir":0},{"pos":[0,-120],"type":"FlackTurret","dir":0},{"pos":[0,0],"type":"PlasmaTurret","dir":0},{"pos":[0,80],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",100],["Stay in #m range of slot # units",3000,8],["@attackTypes enemy within #m","Ram",500],["@capTypes Command Points within #m","Capture",500],["Avoid over #damage shots",59],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","---",3000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","---","More expensive",3000],["@attackTypes enemy within #m","Attack",1200],["Stay in #m range of slot # units",400,4],["@capTypes Command Points within #m","Capture",2000],["Goto @locationTypes","Enemy Army Middle"],["@capTypes Command Points within #m","Capture",10000],["Field # at start",2],["Field # at priority #",1,1],["Field # at priority #",1,2]]},{"parts":[{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[-30,-10],"type":"UArmor1x1","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[0,-40],"type":"Mount30","dir":0},{"pos":[30,-40],"type":"Engine03","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[30,10],"type":"Wing1x1Angle","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0},{"pos":[0,-40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy within #m","Attack",350],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Stronger","More Brawling Value",1600],["Stay in #m range of slot # units",4000,4],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Less expensive",100,1700],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less DPS","Less Brawling Value",1500],["@attackTypes enemy within #m","Flee",1500],["@capTypes Command Points within #m","Capture",1000],["@capTypes Command Points within #m","Protect",4000],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,2,4,1]]},{"parts":[{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[10,-40],"type":"Engine03","dir":0},{"pos":[20,30],"type":"Wing2x1","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[-10,30],"type":"UArmor1x1Angle","dir":0},{"pos":[-10,-30],"type":"UArmor1x1","dir":0},{"pos":[30,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[30,-30],"type":"UArmor1x1","dir":0},{"pos":[-10,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-30,-30],"type":"UArmor1x1Angle","dir":0},{"pos":[50,-30],"type":"UArmor1x1Angle","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy within #m","Attack",400],["Avoid over #damage shots",20],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Cloaked",1000],["Stay in #m range of slot # units",2600,4],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","More expensive",1200],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Less expensive",150,1000],["Stay in #m range of slot # units",500,6],["@capTypes Command Points within #m","Capture",1500],["@capTypes Command Points within #m","Protect",2500],["Stay in #m range of slot # units",500,4],["Stay in #m range of slot # units",500,8],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",2,2,4,2],["Field # for # of ship in slot # at priority #",1,1,4,4],["Field # for # of ship in slot # at priority #",3,1,7,4]]},{"parts":[{"pos":[0,40],"type":"BulletSpeedMod","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[-40,-20],"type":"DamageMod","dir":0},{"pos":[40,-20],"type":"DamageMod","dir":0},{"pos":[40,20],"type":"DamageMod","dir":0},{"pos":[-40,20],"type":"DamageMod","dir":0},{"pos":[-30,-60],"type":"Battery1x2","dir":0},{"pos":[30,-60],"type":"Battery1x2","dir":0},{"pos":[0,-40],"type":"Engine07","dir":0},{"pos":[-50,-60],"type":"Wing1x2","dir":0},{"pos":[50,-60],"type":"Wing1x2","dir":0},{"pos":[0,0],"type":"BombGun","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid over #damage shots",21],["When #% of energy, @chargeTypes",50,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","Slower",100,1700],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","Slower",120,1400],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","Slower",150,1200],["@attackTypes enemy within #m","Flee",1600],["@capTypes Command Points within #m","Capture",2000],["Stay in #m range of slot # units",500,4],["Stay in #m range of slot # units",500,8],["Field # for # of ship in slot # at priority #",1,2,8,1],["Try to field # every # seconds",1,40]]},{"parts":[{"pos":[70,-80],"type":"VArmor1x2","dir":0},{"pos":[-70,-80],"type":"VArmor1x2","dir":0},{"pos":[0,20],"type":"Mount10Range","dir":0},{"pos":[-40,0],"type":"TargetingMod","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"Mount30","dir":0},{"pos":[40,-40],"type":"Mount30","dir":0},{"pos":[-40,-40],"type":"Mount30","dir":0},{"pos":[20,-80],"type":"Mount30","dir":0},{"pos":[0,-40],"type":"DamageMod","dir":0},{"pos":[40,40],"type":"Mount30","dir":0},{"pos":[-50,-90],"type":"Engine01","dir":0},{"pos":[-70,-40],"type":"Battery1x2","dir":0},{"pos":[70,-40],"type":"Battery1x2","dir":0},{"pos":[50,-90],"type":"Engine01","dir":0},{"pos":[-20,-80],"type":"Mount30","dir":0},{"pos":[70,30],"type":"Wing1x1Round","dir":0},{"pos":[70,0],"type":"Battery1x2","dir":0},{"pos":[-70,0],"type":"Battery1x2","dir":0},{"pos":[-70,30],"type":"Wing1x1Round","dir":0},{"pos":[0,80],"type":"StasisField","dir":0},{"pos":[-20,-120],"type":"VArmor2x2","dir":0},{"pos":[20,-120],"type":"VArmor2x2","dir":0},{"pos":[-100,-40],"type":"VArmor2x2","dir":0},{"pos":[100,-40],"type":"VArmor2x2","dir":0},{"pos":[90,0],"type":"VArmor1x2Corner4","dir":0},{"pos":[-90,0],"type":"VArmor1x2Corner4","dir":0},{"pos":[-110,0],"type":"VArmor1x2Corner4","dir":0},{"pos":[110,0],"type":"VArmor1x2Corner4","dir":0},{"pos":[-100,-80],"type":"VArmor2x2","dir":0},{"pos":[100,-80],"type":"VArmor2x2","dir":0},{"pos":[-40,40],"type":"WavePullTurret","dir":0},{"pos":[0,20],"type":"WavePullTurret","dir":0},{"pos":[40,40],"type":"WavePullTurret","dir":0},{"pos":[40,-40],"type":"BombGun","dir":0},{"pos":[20,-80],"type":"BombGun","dir":0},{"pos":[-20,-80],"type":"BombGun","dir":0},{"pos":[-40,-40],"type":"BombGun","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,2,4,2],["Stay in #m range of slot # units",2000,4],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","Slower",100,2000],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","Slower",150,1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","---","More HP",1300],["Avoid over #damage shots",20],["Stay in #m range of slot # units",500,4]]},"",{"parts":[{"pos":[-40,40],"type":"TargetingMod","dir":0},{"pos":[80,-20],"type":"TargetingMod","dir":0},{"pos":[0,-60],"type":"Reactor2x2","dir":0},{"pos":[-130,100],"type":"VArmor1x2SideBar","dir":0},{"pos":[-130,60],"type":"VArmor1x2SideBar","dir":0},{"pos":[-130,20],"type":"VArmor1x2SideBar","dir":0},{"pos":[-130,-20],"type":"VArmor1x2SideBar","dir":0},{"pos":[130,-20],"type":"VArmor1x2SideBar","dir":0},{"pos":[130,20],"type":"VArmor1x2SideBar","dir":0},{"pos":[130,100],"type":"VArmor1x2SideBar","dir":0},{"pos":[130,60],"type":"VArmor1x2SideBar","dir":0},{"pos":[-100,120],"type":"TargetingMod","dir":0},{"pos":[-60,100],"type":"Mount10Range","dir":0},{"pos":[-30,160],"type":"HArmor1x2","dir":0},{"pos":[-100,80],"type":"TargetingMod","dir":0},{"pos":[-20,120],"type":"TargetingMod","dir":0},{"pos":[30,160],"type":"HArmor1x2","dir":0},{"pos":[20,120],"type":"TargetingMod","dir":0},{"pos":[20,80],"type":"TargetingMod","dir":0},{"pos":[100,120],"type":"TargetingMod","dir":0},{"pos":[60,100],"type":"Mount10Range","dir":0},{"pos":[-20,80],"type":"TargetingMod","dir":0},{"pos":[100,80],"type":"TargetingMod","dir":0},{"pos":[0,160],"type":"Reactor2x2","dir":0},{"pos":[-150,100],"type":"Wing1x2","dir":0},{"pos":[-150,-20],"type":"Wing1x2","dir":0},{"pos":[-150,60],"type":"Wing1x2","dir":0},{"pos":[0,-20],"type":"TargetingMod","dir":0},{"pos":[150,60],"type":"Wing1x2","dir":0},{"pos":[150,-20],"type":"Wing1x2","dir":0},{"pos":[150,100],"type":"Wing1x2","dir":0},{"pos":[150,20],"type":"Wing1x2","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[-40,0],"type":"Mount360","dir":0},{"pos":[-80,20],"type":"TargetingMod","dir":0},{"pos":[-150,20],"type":"Wing1x2","dir":0},{"pos":[40,0],"type":"Mount360","dir":0},{"pos":[40,-40],"type":"TargetingMod","dir":0},{"pos":[80,20],"type":"TargetingMod","dir":0},{"pos":[-80,-20],"type":"TargetingMod","dir":0},{"pos":[40,40],"type":"TargetingMod","dir":0},{"pos":[-40,-40],"type":"TargetingMod","dir":0},{"pos":[-80,50],"type":"HArmor2x1","dir":0},{"pos":[80,50],"type":"HArmor2x1","dir":0},{"pos":[0,50],"type":"HArmor2x1","dir":0},{"pos":[-80,-60],"type":"ShieldGen2x2","dir":0},{"pos":[80,-60],"type":"ShieldGen2x2","dir":0},{"pos":[-50,-70],"type":"ShieldGen1x1","dir":0},{"pos":[-30,-70],"type":"ShieldGen1x1","dir":0},{"pos":[30,-70],"type":"ShieldGen1x1","dir":0},{"pos":[50,-70],"type":"ShieldGen1x1","dir":0},{"pos":[-110,50],"type":"ShieldGen1x1","dir":0},{"pos":[110,50],"type":"ShieldGen1x1","dir":0},{"pos":[-110,20],"type":"HArmor1x2","dir":0},{"pos":[110,20],"type":"HArmor1x2","dir":0},{"pos":[-110,-20],"type":"HArmor1x2","dir":0},{"pos":[110,-20],"type":"HArmor1x2","dir":0},{"pos":[-60,160],"type":"Solar2x2","dir":0},{"pos":[60,160],"type":"Solar2x2","dir":0},{"pos":[-90,150],"type":"Solar1x1","dir":0},{"pos":[90,150],"type":"Solar1x1","dir":0},{"pos":[-110,-50],"type":"Solar1x1","dir":0},{"pos":[110,-50],"type":"Solar1x1","dir":0},{"pos":[-90,170],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,150],"type":"HArmor1x1Angle","dir":0},{"pos":[90,170],"type":"HArmor1x1Angle","dir":0},{"pos":[110,150],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[110,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,200],"type":"Solar2x2","dir":0},{"pos":[30,190],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,190],"type":"HArmor1x1Angle","dir":0},{"pos":[50,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-20,-100],"type":"Solar2x2","dir":0},{"pos":[20,-100],"type":"Solar2x2","dir":0},{"pos":[-50,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[60,100],"type":"FlackTurret","dir":0},{"pos":[-60,100],"type":"FlackTurret","dir":0},{"pos":[-40,0],"type":"FlackTurret","dir":0},{"pos":[40,0],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",1000]]}];
ais.all.MeteorShower = [{"parts":[{"pos":[-50,30],"type":"Battery1x1","dir":0},{"pos":[0,40],"type":"Mount90","dir":0},{"pos":[-40,50],"type":"HArmor1x2Font1","dir":0},{"pos":[30,20],"type":"HArmor1x2","dir":0},{"pos":[-30,30],"type":"Reactor1x1","dir":0},{"pos":[-10,70],"type":"Wing1x1Angle","dir":0},{"pos":[-30,0],"type":"Engine04","dir":0},{"pos":[0,0],"type":"CloakGenerator","dir":0},{"pos":[30,20],"type":"Stripe1x2","dir":2},{"pos":[0,40],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",40],["@attackTypes enemy within #m","Ram",450],["@capTypes Command Points within #m","Guard",10000],["Field # at priority #",1,3],["Try to field # every # seconds",1,67]]},{"parts":[{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[0,-20],"type":"CloakGenerator","dir":0},{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[30,10],"type":"Wing1x1Notch","dir":0},{"pos":[-30,10],"type":"Wing1x1Notch","dir":0},{"pos":[-30,30],"type":"Wing1x1Notch","dir":0},{"pos":[30,30],"type":"UArmor1x1Angle","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[0,20],"type":"BombGun","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",1,50],["When #% of energy, @chargeTypes",70,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Less expensive","---",600],["Avoid over #damage shots",40],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","Slower",120,2000],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","Slower",140,2000],["@capTypes Command Points within #m","Protect",2000],["When #% of energy, @chargeTypes",96,"Find recharger"],["@capTypes Command Points within #m","Spread to",10000]]},{"parts":[{"pos":[10,-40],"type":"Engine04","dir":0},{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[-10,-30],"type":"Battery1x1","dir":0},{"pos":[-10,-50],"type":"Wing1x1Notch","dir":0},{"pos":[-30,-20],"type":"VArmor1x2SideBar","dir":0},{"pos":[-10,-30],"type":"Stripe1x1Corner","dir":1},{"pos":[-30,-20],"type":"Stripe1x2","dir":2},{"pos":[0,0],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",3,99],["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid over #damage shots",29],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Slower","Less Range",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Cloaked","Slower",2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Less DPS",1000],["@attackTypes enemy within #m","Attack",500],["@capTypes Command Points within #m","Spread to",10000],["Field # when money over # at priority #",1,700,10],["Field # at priority #",1,6],["Field # at start",2]]},{"parts":[{"pos":[-30,60],"type":"Wing1x2","dir":0},{"pos":[0,60],"type":"CloakGenerator","dir":0},{"pos":[40,-20],"type":"DamageMod","dir":0},{"pos":[-40,20],"type":"DamageMod","dir":0},{"pos":[0,0],"type":"Mount10Range","dir":0},{"pos":[40,20],"type":"DamageMod","dir":0},{"pos":[-40,-20],"type":"DamageMod","dir":0},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[-20,-60],"type":"CloakGenerator","dir":0},{"pos":[20,-60],"type":"CloakGenerator","dir":0},{"pos":[-70,-10],"type":"Engine01","dir":0},{"pos":[-50,50],"type":"VArmor1x1","dir":0},{"pos":[-70,30],"type":"VArmor1x1","dir":0},{"pos":[50,-50],"type":"VArmor1x1","dir":0},{"pos":[-50,-50],"type":"Battery1x1","dir":0},{"pos":[70,0],"type":"Reactor1x2","dir":0},{"pos":[0,0],"type":"TeslaTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",40,"Find recharger"],["Avoid over #damage shots",50],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Has PD","More expensive",1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Slower",230,1500],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Faster",150,1000],["@capTypes Command Points within #m","Protect",800],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",800,2500],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Faster",230,1500],["Stay in #m range of slot # units",-100,10],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Weaker",4000],["Field # at priority #",1,5],["Field # at priority #",2,7],["Field # for # of @needTypes at priority #",1,2,"Fighter Counter Need",4]]},{"parts":[{"pos":[50,-10],"type":"Wing1x1Notch","dir":0},{"pos":[20,20],"type":"Mount30","dir":0},{"pos":[30,-20],"type":"Battery1x2","dir":0},{"pos":[-20,20],"type":"Mount30","dir":0},{"pos":[0,-20],"type":"CloakGenerator","dir":0},{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[-50,10],"type":"Wing1x1Notch","dir":0},{"pos":[50,10],"type":"Wing1x1Notch","dir":0},{"pos":[-50,-10],"type":"UArmor1x1Angle","dir":0},{"pos":[20,20],"type":"EMPGun","dir":0},{"pos":[-20,20],"type":"EMPGun","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",1,80],["When #% of energy, @chargeTypes",60,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","More expensive","Cloaked",700],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Stronger","---",500],["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Slower",100,1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Cloaked","More expensive",2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Less DPS",2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","More expensive",3000],["@capTypes Command Points within #m","Protect",2000],["When #% of energy, @chargeTypes",96,"Find recharger"],["Field # for # of ship in slot # at priority #",2,2,10,5],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of @needTypes at priority #",1,4,"Cloak Counter Need",5]]},{"parts":[{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[-30,-50],"type":"Engine02","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[0,-20],"type":"Mount360Micro","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[0,-60],"type":"Reactor2x2","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[-70,0],"type":"ShieldGen2x1","dir":3},{"pos":[50,-40],"type":"Wing1x2","dir":0},{"pos":[-50,-40],"type":"Wing1x2","dir":0},{"pos":[40,40],"type":"BulletSpeedMod","dir":0},{"pos":[0,60],"type":"DamageMod","dir":0},{"pos":[-40,40],"type":"TargetingMod","dir":0},{"pos":[0,-20],"type":"PDTurret","dir":0},{"pos":[0,20],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["When Shields down to #%, flee",20],["@attackTypes enemy within #m","Flee",800],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More DPS",10,1000],["Avoid over #damage shots",40],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","No PD",2400],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","More expensive",2200],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Slower",120,2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","Not Cloaked",2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","More expensive","---",1800],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,6]]},{"parts":[{"pos":[40,-40],"type":"HArmor2x2","dir":0},{"pos":[-20,0],"type":"Mount360Micro","dir":0},{"pos":[20,0],"type":"Mount360Micro","dir":0},{"pos":[60,0],"type":"EnergyTransfer","dir":0},{"pos":[-30,-40],"type":"Wing1x2","dir":0},{"pos":[-10,-50],"type":"Engine02","dir":0},{"pos":[10,-50],"type":"Engine02","dir":0},{"pos":[-20,40],"type":"Reactor2x2","dir":0},{"pos":[20,40],"type":"Reactor2x2","dir":0},{"pos":[40,-40],"type":"SymbolDecal9","dir":0},{"pos":[-20,0],"type":"PDTurret","dir":0},{"pos":[20,0],"type":"PDTurret","dir":0}],"name":"support1","aiRules":[["Stay in #m range of slot # units",700,10],["Avoid over #damage shots",30],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More DPS","More expensive",1500],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",700,2000],["Stay in #m range of slot # units",200,10],["Find units that are out of energy"],["Goto @locationTypes","Friendly Home Point"],["Field # at priority #",1,4],["Field # for # of ship in slot # at priority #",2,4,5,5]]},{"parts":[{"pos":[0,60],"type":"CloakGenerator","dir":0},{"pos":[-20,-60],"type":"CloakGenerator","dir":0},{"pos":[40,-20],"type":"DamageMod","dir":0},{"pos":[-40,20],"type":"DamageMod","dir":0},{"pos":[0,0],"type":"Mount10Range","dir":0},{"pos":[40,20],"type":"DamageMod","dir":0},{"pos":[-40,-20],"type":"DamageMod","dir":0},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[-30,60],"type":"Wing1x2","dir":0},{"pos":[20,-60],"type":"CloakGenerator","dir":0},{"pos":[-70,-10],"type":"Engine01","dir":0},{"pos":[-50,50],"type":"VArmor1x1","dir":0},{"pos":[-70,30],"type":"VArmor1x1","dir":0},{"pos":[50,-50],"type":"VArmor1x1","dir":0},{"pos":[70,0],"type":"Reactor1x2","dir":0},{"pos":[-50,-50],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"RingTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",40,"Find recharger"],["Avoid over #damage shots",50],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Has PD","More expensive",1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Slower",230,1500],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Faster",150,1000],["@capTypes Command Points within #m","Protect",800],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",800,2500],["Stay in #m range of slot # units",-100,10],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Weaker",4000],["Field # at priority #",1,6]]},{"parts":[{"pos":[0,80],"type":"Reactor2x2","dir":0},{"pos":[80,60],"type":"Wing2x2","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[-80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-80,60],"type":"Wing2x2","dir":0},{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[-70,-60],"type":"HArmor1x2","dir":0},{"pos":[70,-60],"type":"HArmor1x2","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[-80,20],"type":"HArmor2x2","dir":0},{"pos":[80,20],"type":"HArmor2x2","dir":0},{"pos":[-40,60],"type":"Mount360Micro","dir":0},{"pos":[40,60],"type":"Mount360Micro","dir":0},{"pos":[0,-80],"type":"HArmor2x2","dir":0},{"pos":[-40,90],"type":"HArmor2x1","dir":0},{"pos":[40,90],"type":"Reactor2x1","dir":0},{"pos":[-80,-20],"type":"SymbolDecal3","dir":3},{"pos":[-80,20],"type":"SymbolDecal3","dir":3},{"pos":[80,20],"type":"SymbolDecal3","dir":1},{"pos":[80,-20],"type":"SymbolDecal3","dir":1},{"pos":[0,-80],"type":"SymbolDecal15","dir":0},{"pos":[-40,60],"type":"PDTurret","dir":0},{"pos":[40,60],"type":"PDTurret","dir":0},{"pos":[0,0],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",1,1],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","More Brawling Value","Not Cloaked",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","---","Stronger",1000],["Avoid over #damage shots",40],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","No PD",2000],["Stay in #m range of slot # units",800,10],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","No PD",10000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","No PD","More expensive",10000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Stronger","Not Cloaked",3000],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",2,9]]},{"parts":[{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-70,-50],"type":"Battery1x1","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[0,-80],"type":"EnergyTransfer","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[80,20],"type":"Reactor2x2","dir":0},{"pos":[80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[70,-50],"type":"Battery1x1","dir":0},{"pos":[70,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-80,20],"type":"Reactor2x2","dir":0},{"pos":[-80,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,60],"type":"Wing2x2","dir":0},{"pos":[-80,60],"type":"Wing2x2","dir":0},{"pos":[-70,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-40,60],"type":"Mount360Micro","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[0,-40],"type":"DamageMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[0,80],"type":"HArmor2x2","dir":0},{"pos":[-30,90],"type":"HArmor1x1Angle","dir":0},{"pos":[30,90],"type":"HArmor1x1Angle","dir":0},{"pos":[40,60],"type":"Mount360Micro","dir":0},{"pos":[-80,-20],"type":"SymbolDecal3","dir":3},{"pos":[80,-20],"type":"SymbolDecal3","dir":1},{"pos":[0,80],"type":"SymbolDecal15","dir":0},{"pos":[-40,60],"type":"PDTurret","dir":0},{"pos":[40,60],"type":"PDTurret","dir":0},{"pos":[0,0],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",2,0],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More DPS",10,1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Stronger","---",1200],["When #% of energy, @chargeTypes",20,"Flee enemies"],["Avoid over #damage shots",40],["Stay in #m range of slot # units",1000,10],["Stayaway in #m range from slot # units",400,10],["Stayaway in #m range from slot # units",400,9],["Stay in #m range of slot # units",1200,7],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","No PD","Slower",10000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","No PD","More expensive",3000],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Slower",200,2000],["@capTypes Command Points within #m","Capture",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","More expensive","Slower",10000],["Goto @locationTypes","Enemy Home Point"]]}];
ais.all.Micor = [{"parts":[{"pos":[10,-20],"type":"Battery1x2","dir":0},{"pos":[-50,-60],"type":"Engine04","dir":0},{"pos":[10,10],"type":"Wing1x1Round","dir":0},{"pos":[-50,-20],"type":"Battery1x2","dir":0},{"pos":[-20,-70],"type":"Reactor2x1","dir":0},{"pos":[-50,10],"type":"Wing1x1Round","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[-20,0],"type":"Mount180","dir":0},{"pos":[-20,-40],"type":"Mount180","dir":0},{"pos":[-20,0],"type":"PDTurret","dir":0},{"pos":[-20,-40],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","less arc",100,650],["@attackTypes enemy within #m","Circle",800],["@capTypes command points within #m","Capture",10000],["When #% of energy, @chargeTypes",20,"Rest"],["Field # at start",2],["Try to field # every # seconds",2,30]]},{"parts":[{"pos":[0,-60],"type":"Mount180","dir":0},{"pos":[-40,-80],"type":"TargetingMod","dir":0},{"pos":[40,-80],"type":"DamageMod","dir":0},{"pos":[-40,-120],"type":"Reactor2x2","dir":0},{"pos":[40,-120],"type":"Reactor2x2","dir":0},{"pos":[0,-100],"type":"ReloaderMod","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[70,-60],"type":"Wing1x2","dir":0},{"pos":[-40,-40],"type":"TargetingMod","dir":0},{"pos":[40,-40],"type":"BulletSpeedMod","dir":0},{"pos":[-70,-60],"type":"Wing1x2","dir":0},{"pos":[0,-20],"type":"DamageMod","dir":0},{"pos":[-40,20],"type":"Mount180","dir":0},{"pos":[40,20],"type":"Mount180","dir":0},{"pos":[-70,-100],"type":"Engine04","dir":0},{"pos":[70,-100],"type":"Engine04","dir":0},{"pos":[-10,-140],"type":"Engine04","dir":0},{"pos":[10,-140],"type":"Engine04","dir":0},{"pos":[0,20],"type":"Mount180","dir":0},{"pos":[40,20],"type":"PDTurret","dir":0},{"pos":[-40,20],"type":"PDTurret","dir":0},{"pos":[0,20],"type":"PDTurret","dir":0},{"pos":[0,-60],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Circle",1200],["@capTypes command points within #m","Capture",10000],["When #% of energy, @chargeTypes",20,"Rest"],["Field # at start",2],["Try to field # every # seconds",2,30]]},{"parts":[{"pos":[-10,0],"type":"Engine04","dir":0},{"pos":[-10,30],"type":"Battery1x1","dir":0}],"name":"","aiRules":[["Avoid everything"],["Field # at start",4],["Try to field # every # seconds",1,30],["@capTypes command points within #m","Spread to",10000]]},"","","","","","",""];
ais.all.MiniCharger = [{"parts":[{"pos":[-30,-50],"type":"HArmor1x1","dir":0},{"pos":[40,30],"type":"VArmor1x2","dir":3},{"pos":[-90,0],"type":"HArmor1x2Font1","dir":1},{"pos":[90,0],"type":"HArmor1x2Font1","dir":3},{"pos":[0,90],"type":"HArmor1x2Font1","dir":0},{"pos":[-30,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,50],"type":"HArmor1x1","dir":0},{"pos":[0,70],"type":"HArmor2x1","dir":0},{"pos":[0,-70],"type":"HArmor1x2","dir":3},{"pos":[0,0],"type":"EnergyTransfer","dir":0},{"pos":[0,-40],"type":"Reactor2x2","dir":0},{"pos":[0,40],"type":"Reactor2x2","dir":0},{"pos":[-40,30],"type":"Battery2x1","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[-40,-30],"type":"VArmor1x2","dir":3},{"pos":[40,-30],"type":"Battery2x1","dir":0},{"pos":[-40,0],"type":"VArmor2x2","dir":0},{"pos":[40,0],"type":"VArmor2x2","dir":0},{"pos":[30,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-50],"type":"HArmor1x1","dir":0},{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[0,-90],"type":"HArmor1x2Font1","dir":2},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[40,20],"type":"Stripe2x2Corner","dir":0},{"pos":[-40,30],"type":"StripeDouble2x1","dir":0},{"pos":[40,-30],"type":"StripeDouble2x1","dir":0},{"pos":[40,-10],"type":"Stripe2x1","dir":0},{"pos":[-40,10],"type":"Stripe2x1","dir":0},{"pos":[0,80],"type":"StripeDouble2x2","dir":2},{"pos":[-40,-20],"type":"Stripe2x2Corner","dir":1},{"pos":[-80,0],"type":"StripeDouble2x2","dir":3},{"pos":[90,0],"type":"StripeDouble2x1","dir":3},{"pos":[0,-80],"type":"StripeDouble2x2","dir":0}],"name":"","aiRules":[["Field # when money over # at priority #",1,600,1],["@attackTypes enemy within #m","Stay at range",3000],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More DPS",1,2000],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",300,2000],["Find units that are out of energy"],["Goto @locationTypes","Friendly Army Middle"]]},{"parts":[{"pos":[0,40],"type":"BulletSpeedMod","dir":0},{"pos":[-90,0],"type":"HArmor1x2Font1","dir":1},{"pos":[90,0],"type":"HArmor1x2Font1","dir":3},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[0,90],"type":"HArmor1x2Font1","dir":0},{"pos":[-30,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[0,70],"type":"HArmor2x1","dir":0},{"pos":[-30,-50],"type":"HArmor1x1","dir":0},{"pos":[-30,50],"type":"HArmor1x1","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[-30,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[40,20],"type":"BulletSpeedMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-50],"type":"HArmor1x1","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[0,-90],"type":"HArmor1x2Font1","dir":2},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[0,0],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,1,1,2],["Avoid over #damage shots",100],["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","more range",10,3000],["@capTypes Command Points within #m","Spread to",10000],["@attackTypes enemy within #m","Kite",3000]]},{"parts":[{"pos":[-70,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,70],"type":"HArmor2x1","dir":0},{"pos":[-90,0],"type":"HArmor1x2Font1","dir":1},{"pos":[90,0],"type":"HArmor1x2Font1","dir":3},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[0,90],"type":"HArmor1x2Font1","dir":0},{"pos":[-30,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,50],"type":"HArmor1x1","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[-30,-50],"type":"HArmor1x1","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[0,40],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"HArmor1x1Angle","dir":3},{"pos":[50,-50],"type":"HArmor1x1Angle","dir":3},{"pos":[30,-50],"type":"HArmor1x1","dir":0},{"pos":[50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[0,-90],"type":"HArmor1x2Font1","dir":2},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[0,0],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,1,1,2],["Avoid over #damage shots",100],["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","more range",10,3000],["@capTypes Command Points within #m","Spread to",10000],["@attackTypes enemy within #m","Kite",3000]]},{"parts":[{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[-90,0],"type":"HArmor1x2Font1","dir":1},{"pos":[90,0],"type":"HArmor1x2Font1","dir":3},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[0,90],"type":"HArmor1x2Font1","dir":0},{"pos":[-30,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,40],"type":"TargetingMod","dir":0},{"pos":[-50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[-30,50],"type":"HArmor1x1","dir":0},{"pos":[-30,-50],"type":"HArmor1x1","dir":0},{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[0,70],"type":"HArmor2x1","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"BulletSpeedMod","dir":0},{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-50],"type":"HArmor1x1","dir":0},{"pos":[50,50],"type":"HArmor1x1AngleBack","dir":1},{"pos":[-50,50],"type":"HArmor1x1AngleBack","dir":3},{"pos":[0,-90],"type":"HArmor1x2Font1","dir":2},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[0,0],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,1,1,2],["Avoid over #damage shots",100],["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","more range",10,3000],["@capTypes Command Points within #m","Spread to",10000],["@attackTypes enemy within #m","Kite",3000]]},{"parts":[{"pos":[-90,0],"type":"HArmor1x2Font1","dir":1},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[90,0],"type":"HArmor1x2Font1","dir":3},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[0,90],"type":"HArmor1x2Font1","dir":0},{"pos":[-30,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,40],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[-30,50],"type":"HArmor1x1","dir":0},{"pos":[-30,-50],"type":"HArmor1x1","dir":0},{"pos":[-50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,70],"type":"HArmor2x1","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[-40,20],"type":"BulletSpeedMod","dir":0},{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"HArmor1x1Angle","dir":3},{"pos":[50,-50],"type":"HArmor1x1Angle","dir":3},{"pos":[30,-50],"type":"HArmor1x1","dir":0},{"pos":[50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[0,-90],"type":"HArmor1x2Font1","dir":2},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,1,1,2],["Avoid over #damage shots",100],["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","more range",10,3000],["@capTypes Command Points within #m","Spread to",10000],["@attackTypes enemy within #m","Kite",3000]]},{"parts":[{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[90,0],"type":"HArmor1x2Font1","dir":3},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[0,90],"type":"HArmor1x2Font1","dir":0},{"pos":[-30,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[70,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,40],"type":"TargetingMod","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[-70,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,50],"type":"HArmor1x1","dir":0},{"pos":[-30,-50],"type":"HArmor1x1","dir":0},{"pos":[-30,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-90,0],"type":"HArmor1x2Font1","dir":1},{"pos":[0,70],"type":"HArmor2x1","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[-40,20],"type":"DampenerMod","dir":0},{"pos":[30,-70],"type":"HArmor1x1Angle","dir":3},{"pos":[50,-50],"type":"HArmor1x1Angle","dir":3},{"pos":[50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[30,-50],"type":"HArmor1x1","dir":0},{"pos":[-50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[0,-90],"type":"HArmor1x2Font1","dir":2},{"pos":[0,0],"type":"EMPGun2","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,1,1,2],["Avoid over #damage shots",100],["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","more range",10,3000],["@capTypes Command Points within #m","Spread to",10000],["@attackTypes enemy within #m","Kite",3000]]},{"parts":[{"pos":[0,50],"type":"HArmor1x2Font1","dir":0},{"pos":[-30,-30],"type":"HArmor1x1Angle","dir":1},{"pos":[-50,0],"type":"HArmor1x2Font1","dir":1},{"pos":[30,30],"type":"HArmor1x1Angle","dir":0},{"pos":[0,-30],"type":"HArmor2x1","dir":0},{"pos":[0,-50],"type":"HArmor1x2Font1","dir":2},{"pos":[0,30],"type":"Battery2x1","dir":0},{"pos":[-30,0],"type":"HArmor1x2","dir":0},{"pos":[50,0],"type":"HArmor1x2Font1","dir":3},{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[30,-10],"type":"Engine02","dir":0},{"pos":[-30,30],"type":"Wing1x1Angle","dir":0},{"pos":[0,-30],"type":"Stripe2x1","dir":0},{"pos":[0,-50],"type":"Stripe2x1","dir":0},{"pos":[-30,0],"type":"Stripe2x1","dir":3},{"pos":[-50,0],"type":"Stripe2x1","dir":3},{"pos":[0,30],"type":"Stripe2x1","dir":2},{"pos":[0,50],"type":"Stripe2x1","dir":2},{"pos":[50,0],"type":"Stripe2x1","dir":1},{"pos":[0,0],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",51],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Attack",500],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,1,1,3]]},{"parts":[{"pos":[30,50],"type":"HArmor1x1","dir":0},{"pos":[40,20],"type":"Mount360Micro","dir":0},{"pos":[50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[70,0],"type":"HArmor1x2Font1","dir":3},{"pos":[-30,50],"type":"HArmor1x1","dir":0},{"pos":[-50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,0],"type":"HArmor1x2Font1","dir":1},{"pos":[0,70],"type":"HArmor1x2Font1","dir":0},{"pos":[0,50],"type":"Reactor2x1","dir":0},{"pos":[-30,-50],"type":"HArmor1x1","dir":0},{"pos":[-40,20],"type":"Mount360Micro","dir":0},{"pos":[-40,-20],"type":"Mount360Micro","dir":0},{"pos":[40,-20],"type":"Mount360Micro","dir":0},{"pos":[0,0],"type":"DampenerMod","dir":2},{"pos":[0,30],"type":"Reactor2x1","dir":0},{"pos":[0,-40],"type":"Engine09","dir":0},{"pos":[30,-50],"type":"HArmor1x1","dir":0},{"pos":[-50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[50,50],"type":"HArmor1x1Angle","dir":0},{"pos":[40,20],"type":"PDTurret","dir":0},{"pos":[40,-20],"type":"PDTurret","dir":0},{"pos":[-40,20],"type":"PDTurret","dir":0},{"pos":[-40,-20],"type":"PDTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",15,"Find recharger"],["Field # for # of @needTypes at priority #",1,8,"Point Defense Need",1],["Stay in #m range of slot # units",250,1],["Avoid over #damage @bulletTypes shots",50,"PD immune"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","More expensive","Not Cloaked",2500]]},{"parts":[{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[10,10],"type":"Battery1x1","dir":3},{"pos":[30,-10],"type":"Wing1x1Notch","dir":2},{"pos":[10,10],"type":"Stripe1x1","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",5],["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid #dps danger areas",10],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",1],["Field # at priority #",2,2]]},{"parts":[{"pos":[0,70],"type":"VArmor1x2SideBarFilled","dir":1},{"pos":[0,-30],"type":"VArmor1x2SideBarFilled","dir":3},{"pos":[20,20],"type":"Mount30","dir":0},{"pos":[-20,20],"type":"Mount30","dir":0},{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[0,50],"type":"Battery2x1","dir":0},{"pos":[-50,20],"type":"VArmor1x2SideBarFilled","dir":0},{"pos":[30,-20],"type":"Engine03","dir":0},{"pos":[0,-10],"type":"VArmor1x2IBeam","dir":3},{"pos":[50,20],"type":"VArmor1x2SideBarFilled","dir":0},{"pos":[30,50],"type":"Wing1x1Angle","dir":0},{"pos":[-30,50],"type":"VArmor1x1Corner2","dir":0},{"pos":[-50,20],"type":"StripeDouble2x1","dir":3},{"pos":[50,20],"type":"StripeDouble2x1","dir":3},{"pos":[0,-30],"type":"StripeDouble2x1","dir":2},{"pos":[0,70],"type":"StripeDouble2x1","dir":2},{"pos":[-20,20],"type":"LightBeamTurret","dir":0},{"pos":[20,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # at start",1],["When #% of energy, @chargeTypes",10,"find recharger"],["Avoid over #damage shots",30],["@attackTypes enemy within #m","Attack",200],["When #% of energy, @chargeTypes",20,"find recharger"],["@attackTypes enemy within #m","Attack",500],["@capTypes command points within #m","Protect",2000],["Field # for # of ship in slot # at priority #",1,1,1,5],["@capTypes command points within #m","Capture",10000]]}];
ais.all.Nayenne = [{"parts":[{"pos":[-10,-20],"type":"Engine03","dir":0},{"pos":[-30,-10],"type":"Wing1x1Angle","dir":0},{"pos":[-30,-30],"type":"Battery1x1","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",25,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",40,1500],["@capTypes Command Points within #m","Spread to",10000],["@attackTypes enemy that is @absoluteTypes then # within #m","Circle","More Range",1200,1150],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More Range",1200,3000],["Field # at priority #",3,4],["Field # for # of ship in slot # at priority #",2,1,5,3],["Field # for # of ship in slot # at priority #",1,1,5,1],["Field # at start",2],["Field # for # of ship in slot # at priority #",1,2,7,2]]},{"parts":[{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[-30,-10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[10,-10],"type":"Battery1x1","dir":0},{"pos":[-30,10],"type":"Wing1x1Angle","dir":0},{"pos":[0,20],"type":"RingTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",55,"Find recharger"],["@attackTypes enemy within #m","Attack",600],["Stayaway in #m range from slot # units",400,21],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Less HP",100,800],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",90,1200],["Avoid over #damage shots",60],["@capTypes Command Points within #m","Capture",10000],["@capTypes Command Points within #m","Protect",10000],["Field # at priority #",4,3],["Field # at priority #",6,4],["Field # for # of ship in slot # at priority #",3,1,5,2],["Field # for # of ship in slot # at priority #",4,1,7,2]]},{"parts":[{"pos":[-30,-30],"type":"Battery1x1","dir":0},{"pos":[50,-10],"type":"HArmor1x1","dir":0},{"pos":[-50,-10],"type":"HArmor1x1","dir":0},{"pos":[-50,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[50,10],"type":"HArmor1x1","dir":0},{"pos":[10,50],"type":"HArmor1x1","dir":0},{"pos":[50,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-10],"type":"HArmor1x1","dir":0},{"pos":[-50,10],"type":"HArmor1x1","dir":0},{"pos":[-30,-10],"type":"HArmor1x1","dir":0},{"pos":[30,-30],"type":"Battery1x1","dir":0},{"pos":[-10,50],"type":"HArmor1x1","dir":0},{"pos":[30,50],"type":"HArmor1x1Angle","dir":0},{"pos":[50,30],"type":"Wing1x1Angle","dir":0},{"pos":[-50,30],"type":"Wing1x1Angle","dir":0},{"pos":[-30,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[20,20],"type":"Mount30","dir":0},{"pos":[-20,20],"type":"Mount30","dir":0},{"pos":[-20,20],"type":"AutoTurret","dir":0},{"pos":[20,20],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Attack",600],["Avoid over #damage shots",80],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",600,1400],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,1,7,2],["Field # for # of ship in slot # at priority #",1,1,5,2],["Field # at priority #",2,3],["Field # at start",1]]},{"parts":[{"pos":[20,40],"type":"Mount30","dir":0},{"pos":[-20,40],"type":"Mount30","dir":0},{"pos":[-30,70],"type":"Wing1x1Angle","dir":0},{"pos":[-10,0],"type":"Battery1x2","dir":0},{"pos":[30,70],"type":"Wing1x1Angle","dir":0},{"pos":[-30,-10],"type":"Engine01","dir":0},{"pos":[20,0],"type":"CloakGenerator","dir":0},{"pos":[-20,40],"type":"RingTurret","dir":0},{"pos":[20,40],"type":"RingTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",60,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",600,1600],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",400,1900],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More Range",1200,1900],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More DPS",40,2500],["Stay in #m range of slot # units",2000,7],["Stay in #m range of slot # units",2000,6],["Stay in #m range of slot # units",2000,5],["@capTypes Command Points within #m","Guard",10000],["Field # for # of ship in slot # at priority #",2,1,7,2],["Field # for # of ship in slot # at priority #",2,1,5,2],["Field # at start",1]]},{"parts":[{"pos":[-80,0],"type":"HArmor2x2Front2","dir":0},{"pos":[80,-70],"type":"HArmor2x1","dir":0},{"pos":[-50,-130],"type":"Engine02","dir":0},{"pos":[30,-150],"type":"Engine02","dir":0},{"pos":[50,-130],"type":"Engine02","dir":0},{"pos":[-110,70],"type":"Engine02","dir":0},{"pos":[50,-90],"type":"HArmor1x1","dir":0},{"pos":[-50,-90],"type":"HArmor1x1","dir":0},{"pos":[20,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-30,-150],"type":"Engine02","dir":0},{"pos":[110,70],"type":"Engine02","dir":0},{"pos":[-20,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[10,-170],"type":"Engine02","dir":0},{"pos":[10,-130],"type":"HArmor1x1","dir":0},{"pos":[-10,-130],"type":"HArmor1x1","dir":0},{"pos":[-10,-170],"type":"Engine02","dir":0},{"pos":[130,80],"type":"Wing1x2","dir":0},{"pos":[50,-60],"type":"Wing1x2","dir":0},{"pos":[-130,80],"type":"Wing1x2","dir":0},{"pos":[-50,-60],"type":"Wing1x2","dir":0},{"pos":[40,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-130,40],"type":"Battery1x2","dir":0},{"pos":[130,40],"type":"Battery1x2","dir":0},{"pos":[-110,130],"type":"HArmor1x1Angle","dir":0},{"pos":[-40,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-110,110],"type":"HArmor1x1","dir":0},{"pos":[110,110],"type":"HArmor1x1","dir":0},{"pos":[110,130],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,20],"type":"HArmor1x2","dir":0},{"pos":[50,20],"type":"HArmor1x2","dir":0},{"pos":[-130,0],"type":"HArmor1x2","dir":0},{"pos":[-30,20],"type":"Battery1x2","dir":0},{"pos":[130,0],"type":"HArmor1x2","dir":0},{"pos":[30,20],"type":"Battery1x2","dir":0},{"pos":[0,-70],"type":"HArmor2x1","dir":0},{"pos":[-90,-110],"type":"Engine02","dir":0},{"pos":[90,-110],"type":"Engine02","dir":0},{"pos":[-70,-90],"type":"HArmor1x1","dir":0},{"pos":[-70,-130],"type":"Engine02","dir":0},{"pos":[70,-130],"type":"Engine02","dir":0},{"pos":[90,-40],"type":"HArmor1x2","dir":0},{"pos":[70,-90],"type":"HArmor1x1","dir":0},{"pos":[80,0],"type":"HArmor2x2Front2","dir":0},{"pos":[-90,-40],"type":"HArmor1x2","dir":0},{"pos":[-70,-40],"type":"HArmor1x2","dir":0},{"pos":[70,-40],"type":"HArmor1x2","dir":0},{"pos":[0,40],"type":"Mount30","dir":0},{"pos":[-40,60],"type":"Mount30","dir":0},{"pos":[-80,-70],"type":"HArmor2x1","dir":0},{"pos":[40,60],"type":"Mount30","dir":0},{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[80,170],"type":"HArmor1x2Font1","dir":0},{"pos":[80,100],"type":"Mount30","dir":0},{"pos":[-80,170],"type":"HArmor1x2Font1","dir":0},{"pos":[-80,140],"type":"Mount30","dir":0},{"pos":[-80,100],"type":"Mount30","dir":0},{"pos":[50,130],"type":"HArmor1x1","dir":0},{"pos":[-50,130],"type":"HArmor1x1","dir":0},{"pos":[80,140],"type":"Mount30","dir":0},{"pos":[0,80],"type":"Mount30","dir":0},{"pos":[-30,-70],"type":"Battery1x1","dir":0},{"pos":[30,-70],"type":"Battery1x1","dir":0},{"pos":[-30,-50],"type":"HArmor1x1","dir":0},{"pos":[30,-50],"type":"HArmor1x1","dir":0},{"pos":[80,40],"type":"HArmor2x2Back1","dir":0},{"pos":[-80,40],"type":"HArmor2x2Back1","dir":0},{"pos":[-80,70],"type":"HArmor2x1","dir":0},{"pos":[80,70],"type":"HArmor2x1","dir":0},{"pos":[-20,180],"type":"Mount30","dir":0},{"pos":[20,180],"type":"Mount30","dir":0},{"pos":[-50,160],"type":"HArmor1x2","dir":0},{"pos":[50,160],"type":"HArmor1x2","dir":0},{"pos":[-40,100],"type":"Mount30","dir":0},{"pos":[40,100],"type":"Mount30","dir":0},{"pos":[20,140],"type":"Mount30","dir":0},{"pos":[-20,140],"type":"Mount30","dir":0},{"pos":[10,110],"type":"HArmor1x1Angle","dir":0},{"pos":[-10,110],"type":"HArmor1x1Angle","dir":0},{"pos":[0,-40],"type":"Reactor2x2","dir":0},{"pos":[130,-40],"type":"Engine04","dir":0},{"pos":[-130,-40],"type":"Engine04","dir":0},{"pos":[-40,60],"type":"WavePullTurret","dir":0},{"pos":[-20,180],"type":"WavePullTurret","dir":0},{"pos":[40,60],"type":"WavePullTurret","dir":0},{"pos":[20,180],"type":"WavePullTurret","dir":0},{"pos":[0,0],"type":"WavePullTurret","dir":0},{"pos":[0,80],"type":"HeavyPDTurret","dir":0},{"pos":[40,100],"type":"RingTurret","dir":0},{"pos":[80,140],"type":"RingTurret","dir":0},{"pos":[-80,140],"type":"RingTurret","dir":0},{"pos":[-40,100],"type":"RingTurret","dir":0},{"pos":[0,40],"type":"BombGun","dir":0},{"pos":[80,100],"type":"BombGun","dir":0},{"pos":[-80,100],"type":"BombGun","dir":0},{"pos":[-20,140],"type":"BombGun","dir":0},{"pos":[20,140],"type":"BombGun","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",15,"Rest"],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",500,350],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",150,250],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More expensive",600,900],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More expensive",300,1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More expensive",500,1200],["@attackTypes enemy within #m","Attack",650],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","More Range",5000],["Stay in #m range of slot # units",500,7],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",1,1,5,2],["Field # at priority #",1,1]]},{"parts":[{"pos":[-50,50],"type":"HArmor1x1","dir":0},{"pos":[-50,-10],"type":"HArmor1x1","dir":0},{"pos":[-30,80],"type":"Wing1x2","dir":0},{"pos":[30,-30],"type":"HArmor1x1","dir":0},{"pos":[-30,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,-30],"type":"HArmor1x1","dir":0},{"pos":[30,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,80],"type":"Wing1x2","dir":0},{"pos":[30,40],"type":"HArmor1x2","dir":0},{"pos":[-30,40],"type":"HArmor1x2","dir":0},{"pos":[50,20],"type":"HArmor1x2","dir":0},{"pos":[-50,20],"type":"HArmor1x2","dir":0},{"pos":[50,-10],"type":"HArmor1x1","dir":0},{"pos":[0,80],"type":"EnergyTransfer","dir":0},{"pos":[50,50],"type":"HArmor1x1","dir":0},{"pos":[50,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[50,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[10,-50],"type":"Engine02","dir":0},{"pos":[-10,-50],"type":"Engine02","dir":0},{"pos":[0,40],"type":"Reactor2x2","dir":0},{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[-30,0],"type":"HArmor1x2","dir":0},{"pos":[30,0],"type":"HArmor1x2","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",700,7],["Stay in #m range of slot # units",700,5],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",42,2000],["Avoid over #damage shots",20],["Avoid #dps danger areas",5],["Find units that are out of energy"],["Goto @locationTypes","Friendly Army Middle"],["Field # for # of ship in slot # at priority #",1,1,7,2],["Field # for # of ship in slot # at priority #",2,1,7,3],["Field # for # of ship in slot # at priority #",4,1,7,4],["Field # for # of ship in slot # at priority #",1,2,7,2],["Field # for # of ship in slot # at priority #",1,1,5,2]]},{"parts":[{"pos":[140,-100],"type":"HArmor2x2Angle","dir":0},{"pos":[40,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-40,180],"type":"Mount30","dir":0},{"pos":[-30,-170],"type":"Engine02","dir":0},{"pos":[30,-170],"type":"Engine02","dir":0},{"pos":[70,60],"type":"HArmor1x2","dir":0},{"pos":[-70,60],"type":"HArmor1x2","dir":0},{"pos":[-70,-60],"type":"HArmor1x2","dir":0},{"pos":[70,-60],"type":"HArmor1x2","dir":0},{"pos":[-110,20],"type":"HArmor1x2","dir":0},{"pos":[110,20],"type":"HArmor1x2","dir":0},{"pos":[90,-60],"type":"HArmor1x2","dir":0},{"pos":[-90,-60],"type":"HArmor1x2","dir":0},{"pos":[-70,-110],"type":"Engine02","dir":0},{"pos":[-110,-60],"type":"Wing1x2","dir":0},{"pos":[-100,60],"type":"Mount30","dir":0},{"pos":[100,60],"type":"Mount30","dir":0},{"pos":[110,-60],"type":"Wing1x2","dir":0},{"pos":[-130,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-130,-20],"type":"HArmor1x2","dir":0},{"pos":[70,-20],"type":"HArmor1x2","dir":0},{"pos":[-70,-20],"type":"HArmor1x2","dir":0},{"pos":[70,20],"type":"Battery1x2","dir":0},{"pos":[-70,20],"type":"Battery1x2","dir":0},{"pos":[-160,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[90,20],"type":"HArmor1x2","dir":0},{"pos":[-90,-150],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-90,20],"type":"HArmor1x2","dir":0},{"pos":[90,-150],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-100,-120],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-40,150],"type":"HArmor2x1","dir":0},{"pos":[-80,100],"type":"Reactor2x2","dir":0},{"pos":[80,100],"type":"Reactor2x2","dir":0},{"pos":[-130,-130],"type":"HArmor1x1AngleBack","dir":0},{"pos":[100,-120],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-100,-90],"type":"HArmor2x1","dir":0},{"pos":[-130,10],"type":"HArmor1x1","dir":0},{"pos":[100,-90],"type":"HArmor2x1","dir":0},{"pos":[130,10],"type":"HArmor1x1","dir":0},{"pos":[130,40],"type":"Wing1x2","dir":0},{"pos":[-130,40],"type":"Wing1x2","dir":0},{"pos":[40,180],"type":"Mount30","dir":0},{"pos":[130,-20],"type":"HArmor1x2","dir":0},{"pos":[70,-110],"type":"Engine02","dir":0},{"pos":[160,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,-130],"type":"HArmor2x1","dir":0},{"pos":[-40,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-140,-100],"type":"HArmor2x2Angle","dir":0},{"pos":[40,-130],"type":"HArmor2x1","dir":0},{"pos":[130,-130],"type":"HArmor1x1AngleBack","dir":0},{"pos":[130,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[50,-170],"type":"Engine02","dir":0},{"pos":[-50,-170],"type":"Engine02","dir":0},{"pos":[0,-140],"type":"Mount30","dir":0},{"pos":[0,-110],"type":"HArmor2x1","dir":0},{"pos":[0,-80],"type":"DamageMod","dir":0},{"pos":[40,-60],"type":"DamageMod","dir":0},{"pos":[-40,-60],"type":"DamageMod","dir":0},{"pos":[0,-40],"type":"Mount30","dir":0},{"pos":[40,-20],"type":"DamageMod","dir":0},{"pos":[0,0],"type":"ReloaderMod","dir":0},{"pos":[-40,-20],"type":"DamageMod","dir":0},{"pos":[40,20],"type":"HArmor2x2","dir":0},{"pos":[-40,20],"type":"HArmor2x2","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[40,60],"type":"DamageMod","dir":0},{"pos":[-40,60],"type":"DamageMod","dir":0},{"pos":[40,100],"type":"DamageMod","dir":0},{"pos":[-40,100],"type":"DamageMod","dir":0},{"pos":[0,120],"type":"ReloaderMod","dir":0},{"pos":[0,150],"type":"Battery2x1","dir":0},{"pos":[40,130],"type":"HArmor2x1","dir":0},{"pos":[-40,130],"type":"HArmor2x1","dir":0},{"pos":[40,150],"type":"HArmor2x1","dir":0},{"pos":[0,180],"type":"Mount30","dir":0},{"pos":[0,80],"type":"Mount30","dir":0},{"pos":[-80,180],"type":"HArmor2x2Angle","dir":0},{"pos":[80,180],"type":"HArmor2x2Angle","dir":0},{"pos":[0,-180],"type":"Mount90","dir":0},{"pos":[-100,-20],"type":"Mount30","dir":0},{"pos":[100,-20],"type":"Mount30","dir":0},{"pos":[100,140],"type":"HArmor2x2Angle","dir":0},{"pos":[70,140],"type":"HArmor1x2","dir":0},{"pos":[-100,140],"type":"HArmor2x2Angle","dir":0},{"pos":[-70,140],"type":"HArmor1x2","dir":0},{"pos":[0,-140],"type":"WavePullTurret","dir":0},{"pos":[100,60],"type":"WavePullTurret","dir":0},{"pos":[-40,180],"type":"WavePullTurret","dir":0},{"pos":[-100,60],"type":"WavePullTurret","dir":0},{"pos":[40,180],"type":"WavePullTurret","dir":0},{"pos":[0,-180],"type":"AutoTurret","dir":0},{"pos":[-100,-20],"type":"AutoTurret","dir":0},{"pos":[100,-20],"type":"AutoTurret","dir":0},{"pos":[0,180],"type":"HeavyPDTurret","dir":0},{"pos":[0,80],"type":"BombGun","dir":0},{"pos":[0,-40],"type":"BombGun","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",350,350],["When #% of energy, @chargeTypes",20,"Rest"],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More expensive",700,1200],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More expensive",400,1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Weaker",10000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","More Range","Slower",2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","More expensive","Slower",10000],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",50,800],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,2],["Field # for # of ship in slot # at priority #",1,1,7,4],["Field # at start",1]]},{"parts":[{"pos":[30,10],"type":"Engine02","dir":0},{"pos":[-30,10],"type":"Engine02","dir":0},{"pos":[0,40],"type":"Reactor2x2","dir":0},{"pos":[0,0],"type":"EnergyTransfer","dir":0},{"pos":[10,-30],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-10,-30],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-50,10],"type":"Wing1x1Angle","dir":0},{"pos":[50,10],"type":"Wing1x1Angle","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More expensive",40,1600],["Avoid over #damage shots",20],["Avoid #dps danger areas",5],["Find units that are out of energy"],["Stay in #m range of slot # units",500,5],["Stay in #m range of slot # units",500,7],["Stay in #m range of slot # units",500,2],["Goto @locationTypes","Friendly Army Middle"],["Field # at priority #",3,3],["Field # for # of ship in slot # at priority #",3,1,5,2],["Field # for # of ship in slot # at priority #",2,1,7,2],["Field # at start",1]]},{"parts":[{"pos":[-30,-60],"type":"Wing1x2","dir":0},{"pos":[-30,-90],"type":"Battery1x1","dir":0},{"pos":[0,-60],"type":"Mount30","dir":0},{"pos":[-10,-140],"type":"Engine04","dir":0},{"pos":[10,-140],"type":"VArmor1x1CornerBack","dir":0},{"pos":[0,-100],"type":"Mount30","dir":0},{"pos":[-30,-140],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-30,-110],"type":"Battery1x1","dir":0},{"pos":[0,-60],"type":"RingTurret","dir":0},{"pos":[0,-100],"type":"RingTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",40,"Find recharger"],["@attackTypes enemy within #m","Attack",400],["Stay in #m range of slot # units",500,7],["Stayaway in #m range from slot # units",250,9],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Less Range",600,1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Stronger",1000],["Stay in #m range of slot # units",500,5],["Avoid over #damage shots",12],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","Less DPS",35,1000],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",2,3],["Field # at priority #",3,4],["Field # for # of ship in slot # at priority #",3,1,7,2],["Field # for # of ship in slot # at priority #",3,1,5,2]]},{"parts":[{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[10,-10],"type":"Battery1x1","dir":0},{"pos":[-30,10],"type":"Wing1x1Angle","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[0,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",350],["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",25,"Find recharger"],["Stayaway in #m range from slot # units",300,10],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Weaker",1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","Less Arc",270,1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","More expensive",300,1000],["@attackTypes enemy within #m","Attack",1000],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",4,3],["Field # at priority #",6,4],["Field # at priority #",15,7],["Field # for # of ship in slot # at priority #",4,1,5,2],["Field # for # of ship in slot # at priority #",4,1,7,2],["Field # at start",5]]}];
ais.all.NodeSwarm = [{"parts":[{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[-30,30],"type":"Wing1x1Notch","dir":0},{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[0,20],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",25,"Find recharger"],["Field # at priority #",1,3],["Avoid over #damage shots",24],["Avoid everything"],["@capTypes Command Points within #m","Spread to",100],["@attackTypes enemy within #m","Kite",1000],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,4],["Field # for # of ship in slot # at priority #",1,1,8,1]]},{"parts":[{"pos":[0,90],"type":"ShieldGen2x1","dir":0},{"pos":[10,-10],"type":"Reactor1x1","dir":0},{"pos":[40,40],"type":"Mount360","dir":0},{"pos":[0,20],"type":"DamageMod","dir":0},{"pos":[0,60],"type":"DamageMod","dir":0},{"pos":[40,0],"type":"DamageMod","dir":0},{"pos":[-40,0],"type":"DamageMod","dir":0},{"pos":[-80,60],"type":"DamageMod","dir":0},{"pos":[-80,20],"type":"DamageMod","dir":0},{"pos":[80,60],"type":"DamageMod","dir":0},{"pos":[80,20],"type":"DamageMod","dir":0},{"pos":[-40,80],"type":"DamageMod","dir":0},{"pos":[40,80],"type":"DamageMod","dir":0},{"pos":[-110,-20],"type":"Engine04","dir":0},{"pos":[-50,-40],"type":"Engine04","dir":0},{"pos":[-40,40],"type":"Mount360","dir":0},{"pos":[50,-40],"type":"Engine04","dir":0},{"pos":[-10,-10],"type":"Battery1x1","dir":0},{"pos":[-80,90],"type":"Battery2x1","dir":0},{"pos":[80,90],"type":"Battery2x1","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[30,-60],"type":"Engine04","dir":0},{"pos":[-30,-60],"type":"Engine04","dir":0},{"pos":[20,-30],"type":"UArmor2x1","dir":0},{"pos":[-20,-30],"type":"UArmor2x1","dir":0},{"pos":[20,110],"type":"Wing2x1","dir":0},{"pos":[-20,110],"type":"Wing2x1","dir":0},{"pos":[-70,-40],"type":"Engine04","dir":0},{"pos":[70,-40],"type":"Engine04","dir":0},{"pos":[90,-40],"type":"Engine04","dir":0},{"pos":[110,-20],"type":"Engine04","dir":0},{"pos":[-90,-40],"type":"Engine04","dir":0},{"pos":[110,20],"type":"Wing1x2","dir":0},{"pos":[-110,20],"type":"Wing1x2","dir":0},{"pos":[-80,-10],"type":"Battery2x1","dir":0},{"pos":[80,-10],"type":"Battery2x1","dir":0},{"pos":[-40,40],"type":"AutoTurret","dir":0},{"pos":[40,40],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",15,"Find recharger"],["Avoid over #damage shots",45],["Avoid #dps danger areas",25],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Weaker","Less Brawling Value",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Less Brawling Value","More expensive",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Weaker","---",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Less Brawling Value","Weaker",10000],["Find units that are out of energy"],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",1,1,5,3],["Field # for # of ship in slot # at priority #",1,2,6,1]]},{"parts":[{"pos":[-20,0],"type":"EnergyTransfer","dir":0},{"pos":[20,0],"type":"Reactor2x2","dir":0},{"pos":[-20,30],"type":"Wing2x1","dir":0},{"pos":[-20,-30],"type":"Reactor2x1","dir":0},{"pos":[-50,-10],"type":"Engine02","dir":0},{"pos":[10,-30],"type":"HArmor1x1","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,5,7,2],["Stay in #m range of slot # units",300,7],["Stayaway in #m range from slot # units",250,3],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Stronger","More expensive",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","---","---",1000],["Field # for # of ship in slot # at priority #",1,3,7,4],["Field # for # of ship in slot # at priority #",1,8,7,3],["Field # for # of ship in slot # at priority #",1,1,5,2],["Field # for # of ship in slot # at priority #",1,4,1,3]]},{"parts":[{"pos":[-190,40],"type":"Wing1x2","dir":0},{"pos":[180,0],"type":"Mount30","dir":0},{"pos":[-80,40],"type":"Mount30","dir":0},{"pos":[80,40],"type":"Mount30","dir":0},{"pos":[40,40],"type":"Mount30","dir":0},{"pos":[-40,40],"type":"Mount30","dir":0},{"pos":[0,40],"type":"Mount30","dir":0},{"pos":[-160,40],"type":"Mount30","dir":0},{"pos":[-120,40],"type":"Mount30","dir":0},{"pos":[160,40],"type":"Mount30","dir":0},{"pos":[120,40],"type":"Mount30","dir":0},{"pos":[-180,0],"type":"Mount30","dir":0},{"pos":[190,40],"type":"Wing1x2","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[10,-10],"type":"Engine02","dir":0},{"pos":[-10,0],"type":"Battery1x2","dir":0},{"pos":[-160,40],"type":"TorpTurret","dir":0},{"pos":[0,40],"type":"TorpTurret","dir":0},{"pos":[-40,40],"type":"TorpTurret","dir":0},{"pos":[40,40],"type":"TorpTurret","dir":0},{"pos":[-80,40],"type":"TorpTurret","dir":0},{"pos":[80,40],"type":"TorpTurret","dir":0},{"pos":[180,0],"type":"TorpTurret","dir":0},{"pos":[-120,40],"type":"TorpTurret","dir":0},{"pos":[120,40],"type":"TorpTurret","dir":0},{"pos":[160,40],"type":"TorpTurret","dir":0},{"pos":[-180,0],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",300,7],["@attackTypes enemy within #m","Attack",1500],["Field # for # of ship in slot # at priority #",1,4,3,4],["Field # for # of ship in slot # at priority #",1,7,7,2],["Goto @locationTypes","Enemy Army Middle"],["@capTypes Command Points within #m","Capture",10000]]},{"parts":[{"pos":[70,40],"type":"UArmor1x2","dir":0},{"pos":[0,-40],"type":"Engine07","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[-20,0],"type":"ReloaderMod","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[20,0],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[-20,80],"type":"TargetingMod","dir":0},{"pos":[-50,0],"type":"Battery1x2","dir":0},{"pos":[50,0],"type":"Battery1x2","dir":0},{"pos":[70,0],"type":"UArmor1x2","dir":0},{"pos":[-70,40],"type":"UArmor1x2","dir":0},{"pos":[-70,0],"type":"UArmor1x2","dir":0},{"pos":[-60,-30],"type":"Wing2x1","dir":0},{"pos":[60,-30],"type":"Wing2x1","dir":0},{"pos":[-30,-40],"type":"Engine03","dir":0},{"pos":[30,-40],"type":"Engine03","dir":0},{"pos":[-50,70],"type":"Battery1x1","dir":0},{"pos":[50,70],"type":"Battery1x1","dir":0},{"pos":[20,80],"type":"TargetingMod","dir":0},{"pos":[0,40],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",50,"Find recharger"],["Avoid over #damage shots",20],["Avoid everything"],["@attackTypes enemy within #m","Circle",1500],["Stay in #m range of slot # units",500,7],["Field # for # of ship in slot # at priority #",1,4,3,1],["@capTypes Command Points within #m","Capture",10000]]},{"parts":[{"pos":[0,-30],"type":"Reactor2x1","dir":0},{"pos":[0,110],"type":"ShieldGen2x1","dir":0},{"pos":[20,0],"type":"ReloaderMod","dir":0},{"pos":[-40,-40],"type":"Engine07","dir":0},{"pos":[40,110],"type":"Wing2x1","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[-20,80],"type":"DamageMod","dir":0},{"pos":[40,-40],"type":"Engine07","dir":0},{"pos":[-40,110],"type":"Wing2x1","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[50,80],"type":"Battery1x2","dir":0},{"pos":[-50,80],"type":"Battery1x2","dir":0},{"pos":[-20,0],"type":"ReloaderMod","dir":0},{"pos":[20,80],"type":"DamageMod","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[50,0],"type":"UArmor1x2","dir":0},{"pos":[-50,0],"type":"UArmor1x2","dir":0},{"pos":[70,40],"type":"Wing1x2","dir":0},{"pos":[-70,40],"type":"Wing1x2","dir":0},{"pos":[-70,10],"type":"Battery1x1","dir":0},{"pos":[70,10],"type":"Battery1x1","dir":0},{"pos":[0,40],"type":"RingTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",45,"Find recharger"],["Avoid over #damage shots",25],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","More HP",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Weaker","More Range",1000],["Field # for # of ship in slot # at priority #",1,5,7,3],["When #% of energy, @chargeTypes",100,"Find recharger"],["Goto @locationTypes","Enemy Spawn"]]},{"parts":[{"pos":[-40,0],"type":"EnergyTransfer","dir":0},{"pos":[-10,0],"type":"Battery1x2","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[-110,10],"type":"Wing1x1Round","dir":0},{"pos":[-90,-10],"type":"Engine02","dir":0},{"pos":[-40,30],"type":"HArmor1x2Front2","dir":0},{"pos":[-40,60],"type":"HArmor2x2Front1","dir":0},{"pos":[-40,-30],"type":"HArmor1x2Back2","dir":0},{"pos":[-40,-60],"type":"HArmor2x2Back1","dir":0}],"name":"","aiRules":[["Avoid #dps danger areas",10],["Stayaway in #m range from slot # units",250,7],["Stay in #m range of slot # units",2000,1],["Find units that are out of energy"],["Field # at priority #",1,1],["When #% of energy, @chargeTypes",70,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","More expensive","---",1000],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,3],["Field # at priority #",1,4],["Try to field # every # seconds",1,35],["Try to field # every # seconds",1,50],["Try to field # every # seconds",1,80],["Try to field # every # seconds",1,110],["Try to field # every # seconds",1,95],["Field # at priority #",1,5]]},{"parts":[{"pos":[-40,-60],"type":"HArmor2x2Back1","dir":0},{"pos":[-90,-10],"type":"Engine02","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[-60,40],"type":"DamageMod","dir":0},{"pos":[-20,40],"type":"DamageMod","dir":0},{"pos":[-40,-30],"type":"HArmor1x2Back2","dir":0},{"pos":[-90,30],"type":"Wing1x1Round","dir":0},{"pos":[10,30],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"TargetingMod","dir":0},{"pos":[-40,0],"type":"Mount90","dir":0},{"pos":[-40,0],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",800,7],["@attackTypes enemy within #m","Attack",1000],["Stay in #m range of slot # units",400,10],["Stayaway in #m range from slot # units",400,7],["Field # for # of ship in slot # at priority #",1,3,7,4],["When #% of energy, @chargeTypes",50,"Find recharger"],["Field # for # of ship in slot # at priority #",1,3,7,5],["Field # for # of ship in slot # at priority #",1,3,7,6]]},{"parts":[{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[0,10],"type":"Battery2x1","dir":0},{"pos":[-20,40],"type":"Mount90","dir":0},{"pos":[20,40],"type":"Mount90","dir":0},{"pos":[30,-20],"type":"Engine03","dir":0},{"pos":[-30,10],"type":"Wing1x1Notch","dir":0},{"pos":[30,10],"type":"Wing1x1Notch","dir":0},{"pos":[-20,40],"type":"LightBeamTurret","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid over #damage shots",30],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Stronger","More Brawling Value",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Weaker","Less Brawling Value",1000],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",1,6,7,2]]},{"parts":[{"pos":[180,30],"type":"HArmor1x2Front2","dir":0},{"pos":[120,0],"type":"HArmor2x2","dir":0},{"pos":[0,80],"type":"Mount360","dir":0},{"pos":[-40,60],"type":"ReloaderMod","dir":0},{"pos":[0,120],"type":"TargetingMod","dir":0},{"pos":[-40,100],"type":"ReloaderMod","dir":0},{"pos":[0,40],"type":"TargetingMod","dir":0},{"pos":[40,130],"type":"Wing2x1","dir":0},{"pos":[-40,130],"type":"Wing2x1","dir":0},{"pos":[-40,-10],"type":"Battery2x1","dir":0},{"pos":[40,-10],"type":"Battery2x1","dir":0},{"pos":[-40,20],"type":"HArmor2x2","dir":0},{"pos":[-80,20],"type":"HArmor2x2","dir":0},{"pos":[40,20],"type":"HArmor2x2","dir":0},{"pos":[80,20],"type":"HArmor2x2","dir":0},{"pos":[-120,0],"type":"HArmor2x2","dir":0},{"pos":[40,100],"type":"ReloaderMod","dir":0},{"pos":[-180,0],"type":"HArmor2x2","dir":0},{"pos":[-180,30],"type":"HArmor1x2Front2","dir":0},{"pos":[-180,60],"type":"HArmor2x2Front1","dir":0},{"pos":[-180,-60],"type":"HArmor2x2Back1","dir":0},{"pos":[-150,0],"type":"HArmor1x2","dir":0},{"pos":[-180,-30],"type":"HArmor1x2Back2","dir":0},{"pos":[180,60],"type":"HArmor2x2Front1","dir":0},{"pos":[180,-30],"type":"HArmor1x2Back2","dir":0},{"pos":[180,-60],"type":"HArmor2x2Back1","dir":0},{"pos":[180,0],"type":"HArmor2x2","dir":0},{"pos":[150,0],"type":"HArmor1x2","dir":0},{"pos":[110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-150,-80],"type":"Wing1x2","dir":0},{"pos":[150,-80],"type":"Wing1x2","dir":0},{"pos":[-130,-90],"type":"Engine02","dir":0},{"pos":[130,-90],"type":"Engine02","dir":0},{"pos":[-100,-60],"type":"DamageMod","dir":0},{"pos":[-100,-100],"type":"TargetingMod","dir":0},{"pos":[-60,-120],"type":"TargetingMod","dir":0},{"pos":[-60,-40],"type":"DamageMod","dir":0},{"pos":[-20,-60],"type":"TargetingMod","dir":0},{"pos":[-20,-100],"type":"BulletSpeedMod","dir":0},{"pos":[60,-120],"type":"TargetingMod","dir":0},{"pos":[100,-100],"type":"TargetingMod","dir":0},{"pos":[20,-60],"type":"TargetingMod","dir":0},{"pos":[60,-40],"type":"DamageMod","dir":0},{"pos":[100,-60],"type":"DamageMod","dir":0},{"pos":[60,-80],"type":"Mount270","dir":0},{"pos":[20,-100],"type":"ReloaderMod","dir":0},{"pos":[-60,-80],"type":"Mount360","dir":0},{"pos":[0,-20],"type":"Reactor2x2","dir":0},{"pos":[-80,-10],"type":"HArmor2x1","dir":0},{"pos":[80,-10],"type":"HArmor2x1","dir":0},{"pos":[40,60],"type":"BulletSpeedMod","dir":0},{"pos":[0,80],"type":"HeavyPDTurret","dir":0},{"pos":[60,-80],"type":"PlasmaTurret","dir":0},{"pos":[-60,-80],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,3,8,2],["Stay in #m range of friendly units",600],["Goto @locationTypes","Enemy Army Middle"]]}];
ais.all.Novice = [{"parts":[{"pos":[30,-20],"type":"Engine04","dir":0},{"pos":[50,30],"type":"Wing1x1Round","dir":0},{"pos":[-50,0],"type":"Engine04","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[-50,30],"type":"Wing1x1Round","dir":0},{"pos":[30,20],"type":"HArmor1x2","dir":0},{"pos":[50,0],"type":"Engine04","dir":0},{"pos":[-30,20],"type":"HArmor1x2","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[0,30],"type":"Battery2x1","dir":0},{"pos":[0,-30],"type":"Battery2x1","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Backstab",400],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",2],["Try to field # every # seconds",2,30]]},{"parts":[{"pos":[50,-80],"type":"HArmor1x2","dir":0},{"pos":[-70,-40],"type":"HArmor1x2","dir":0},{"pos":[30,40],"type":"HArmor1x2","dir":0},{"pos":[-30,70],"type":"Wing1x1Round","dir":0},{"pos":[0,30],"type":"Reactor2x1","dir":0},{"pos":[-20,0],"type":"Mount90","dir":0},{"pos":[20,0],"type":"Mount90","dir":0},{"pos":[-50,30],"type":"Wing1x1Round","dir":0},{"pos":[-50,0],"type":"HArmor1x2","dir":0},{"pos":[-40,-40],"type":"Mount90","dir":0},{"pos":[50,30],"type":"Wing1x1Round","dir":0},{"pos":[50,0],"type":"HArmor1x2","dir":0},{"pos":[-30,40],"type":"HArmor1x2","dir":0},{"pos":[0,60],"type":"Mount90","dir":0},{"pos":[40,-40],"type":"Mount90","dir":0},{"pos":[-50,-80],"type":"HArmor1x2","dir":0},{"pos":[30,70],"type":"Wing1x1Round","dir":0},{"pos":[-70,-10],"type":"Wing1x1Round","dir":0},{"pos":[70,-10],"type":"Wing1x1Round","dir":0},{"pos":[70,-40],"type":"HArmor1x2","dir":0},{"pos":[-70,-80],"type":"Engine04","dir":0},{"pos":[70,-80],"type":"Engine04","dir":0},{"pos":[-20,-70],"type":"Reactor2x1","dir":0},{"pos":[0,-90],"type":"Reactor2x1","dir":0},{"pos":[20,-70],"type":"Reactor2x1","dir":0},{"pos":[-10,-40],"type":"HArmor1x2","dir":0},{"pos":[10,-40],"type":"HArmor1x2","dir":0},{"pos":[-30,-100],"type":"Engine04","dir":0},{"pos":[30,-100],"type":"Engine04","dir":0},{"pos":[-20,0],"type":"LightBeamTurret","dir":0},{"pos":[20,0],"type":"LightBeamTurret","dir":0},{"pos":[-40,-40],"type":"LightBeamTurret","dir":0},{"pos":[40,-40],"type":"LightBeamTurret","dir":0},{"pos":[0,60],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",300],["@capTypes Command Points within #m","Capture",10000],["Field # at start",1],["Try to field # every # seconds",1,30]]},"","","","","","","",""];
ais.all.NukeSwarm = [{"parts":[{"pos":[-10,-20],"type":"Engine03","dir":0},{"pos":[10,-10],"type":"Battery1x1","dir":0},{"pos":[-30,10],"type":"Wing1x1Notch","dir":0},{"pos":[0,20],"type":"AOEWarhead","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",10,2],["@attackTypes enemy within #m","Ram",200]]},{"parts":[{"pos":[30,10],"type":"Wing1x1Notch","dir":0},{"pos":[-10,-20],"type":"Engine03","dir":0},{"pos":[10,-10],"type":"Battery1x1","dir":0},{"pos":[0,20],"type":"AOEWarhead","dir":0}],"name":"","aiRules":[["Goto @locationTypes","Enemy Home Point"],["@attackTypes enemy within #m","Ram",400],["Try to field # every # seconds",2,30]]},{"parts":[{"pos":[-30,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,0],"type":"Engine03","dir":0},{"pos":[30,30],"type":"HArmor1x1Angle","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[0,20],"type":"AOEWarhead","dir":0}],"name":"","aiRules":[["Field # at priority #",8,3],["@capTypes Command Points within #m","Guard",10000]]},{"parts":[{"pos":[-30,30],"type":"Wing1x1Notch","dir":0},{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[30,30],"type":"Wing1x1Notch","dir":0},{"pos":[0,-10],"type":"Battery2x1","dir":0},{"pos":[30,-20],"type":"Engine03","dir":0},{"pos":[-30,10],"type":"UArmor1x1","dir":0},{"pos":[30,10],"type":"UArmor1x1","dir":0},{"pos":[0,20],"type":"ShapedWarhead","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",10],["@attackTypes enemy within #m","Ram",10000],["Try to field # every # seconds",2,30],["Field # at start",2]]},"","","","","",""];
ais.all.Orbiter = [{"parts":[{"pos":[-20,-40],"type":"VArmor2x2","dir":0},{"pos":[80,-60],"type":"VArmor2x2","dir":0},{"pos":[-40,0],"type":"Mount180","dir":0},{"pos":[40,0],"type":"Mount180","dir":0},{"pos":[-20,40],"type":"Mount180","dir":0},{"pos":[20,40],"type":"Mount180","dir":0},{"pos":[50,-40],"type":"Battery1x2","dir":0},{"pos":[-10,-90],"type":"Engine01","dir":0},{"pos":[-50,-40],"type":"Battery1x2","dir":0},{"pos":[-80,-60],"type":"VArmor2x2","dir":0},{"pos":[-80,-20],"type":"VArmor2x2","dir":0},{"pos":[80,-20],"type":"VArmor2x2","dir":0},{"pos":[10,-90],"type":"Engine01","dir":0},{"pos":[20,-40],"type":"VArmor2x2","dir":0},{"pos":[-40,-80],"type":"Mount360Micro","dir":0},{"pos":[40,-80],"type":"Mount360Micro","dir":0},{"pos":[-50,-130],"type":"Solar3x3","dir":0},{"pos":[50,-130],"type":"Solar3x3","dir":0},{"pos":[-70,-90],"type":"Solar1x1","dir":0},{"pos":[70,-90],"type":"Solar1x1","dir":0},{"pos":[-80,10],"type":"Wing2x1","dir":0},{"pos":[80,10],"type":"Wing2x1","dir":0},{"pos":[0,0],"type":"BulletSpeedMod","dir":0},{"pos":[-40,0],"type":"TorpTurret","dir":0},{"pos":[-20,40],"type":"TorpTurret","dir":0},{"pos":[20,40],"type":"TorpTurret","dir":0},{"pos":[40,0],"type":"TorpTurret","dir":0},{"pos":[-40,-80],"type":"FlackTurret","dir":0},{"pos":[40,-80],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","slower","has PD",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Circle","slower","no PD",2000],["@attackTypes enemy within #m","Circle",1100],["@capTypes command points within #m","Capture",10000],["Field # at priority #",10,2]]},{"parts":[{"pos":[0,-90],"type":"Battery2x1","dir":0},{"pos":[30,-100],"type":"HArmor1x2","dir":0},{"pos":[-40,-20],"type":"HArmor2x2","dir":0},{"pos":[40,-20],"type":"HArmor2x2","dir":0},{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[-40,20],"type":"HArmor2x2Angle","dir":0},{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[40,20],"type":"HArmor2x2Angle","dir":0},{"pos":[20,-60],"type":"Mount30","dir":0},{"pos":[-60,-60],"type":"Mount30","dir":0},{"pos":[-20,-60],"type":"Mount30","dir":0},{"pos":[60,-60],"type":"Mount30","dir":0},{"pos":[-30,-110],"type":"Engine02","dir":0},{"pos":[0,-120],"type":"Solar2x2","dir":0},{"pos":[-70,-90],"type":"Wing1x1Round","dir":0},{"pos":[-50,-100],"type":"HArmor1x2","dir":0},{"pos":[50,-100],"type":"HArmor1x2","dir":0},{"pos":[70,-20],"type":"HArmor1x2","dir":0},{"pos":[-70,-20],"type":"HArmor1x2","dir":0},{"pos":[0,-20],"type":"LightBeamTurret","dir":0},{"pos":[0,20],"type":"LightBeamTurret","dir":0},{"pos":[-60,-60],"type":"PDTurret","dir":0},{"pos":[-20,-60],"type":"PDTurret","dir":0},{"pos":[20,-60],"type":"PDTurret","dir":0},{"pos":[60,-60],"type":"PDTurret","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",1,30],["@capTypes command points within #m","Capture",2000],["@attackTypes enemy within #m","Attack",400],["@capTypes command points within #m","Guard",1000],["Field # at start",1],["Field # for # of @needTypes at priority #",1,3,"fighter counter need",1]]},{"parts":[],"name":"","aiRules":[]},{"parts":[],"name":"","aiRules":[]},{"parts":[],"name":"","aiRules":[]},"","","","",""];
ais.all.Orblin = [{"parts":[{"pos":[30,-70],"type":"HArmor1x1","dir":0},{"pos":[-30,-70],"type":"HArmor1x1","dir":0},{"pos":[0,-40],"type":"DamageMod","dir":0},{"pos":[-20,0],"type":"Mount90","dir":0},{"pos":[50,0],"type":"Wing1x2","dir":0},{"pos":[-50,0],"type":"Wing1x2","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[20,0],"type":"Mount90","dir":0},{"pos":[30,-40],"type":"Battery1x2","dir":0},{"pos":[-30,-40],"type":"Battery1x2","dir":0},{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[0,-90],"type":"HArmor2x1","dir":0},{"pos":[30,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[70,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-60,-30],"type":"HArmor2x1","dir":0},{"pos":[60,-30],"type":"HArmor2x1","dir":0},{"pos":[-20,0],"type":"PlasmaTurret","dir":0},{"pos":[20,0],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","less brawling value","slower",850],["Try to field # every # seconds",1,15],["Field # at priority #",2,1],["@attackTypes enemy within #m","Attack",600],["@capTypes command points within #m","Capture",10000]]},{"parts":[{"pos":[-30,-50],"type":"UArmor1x1","dir":0},{"pos":[-10,30],"type":"OverKillAi","dir":0},{"pos":[70,-20],"type":"Battery1x2","dir":0},{"pos":[0,0],"type":"Mount270","dir":0},{"pos":[-40,-20],"type":"DamageMod","dir":0},{"pos":[40,-20],"type":"DamageMod","dir":0},{"pos":[40,20],"type":"DamageMod","dir":0},{"pos":[30,-50],"type":"UArmor1x1","dir":0},{"pos":[0,50],"type":"Battery2x1","dir":0},{"pos":[-40,20],"type":"DamageMod","dir":0},{"pos":[10,30],"type":"UArmor1x1","dir":0},{"pos":[-30,50],"type":"Wing1x1Round","dir":0},{"pos":[30,50],"type":"Wing1x1Round","dir":0},{"pos":[-70,-20],"type":"Battery1x2","dir":0},{"pos":[-50,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[50,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[0,-80],"type":"Engine07","dir":0},{"pos":[0,-40],"type":"DamageMod","dir":0},{"pos":[0,0],"type":"BombGun","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",40,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","more HP",400,1250],["Avoid over #damage shots",22],["@attackTypes enemy that is @absoluteTypes then # within #m","Circle","more HP",280,3000],["Goto @locationTypes","Friendly Army Middle"],["Field # for # of ship in slot # at priority #",1,1,1,3]]},{"parts":[{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0},{"pos":[-30,-10],"type":"Wing1x1Notch","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["Field # at start",3],["Try to field # every # seconds",1,30],["@capTypes command points within #m","Spread to",10000]]},{"parts":[{"pos":[-20,20],"type":"Mount90","dir":0},{"pos":[20,20],"type":"Mount90","dir":0},{"pos":[0,-10],"type":"Battery2x1","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[-10,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[10,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[30,-10],"type":"Wing1x1Notch","dir":0},{"pos":[-20,20],"type":"LightBeamTurret","dir":0},{"pos":[20,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # for # of @needTypes at priority #",1,1,"fighter counter need",2],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","---","less brawling value",500],["Stay in #m range of slot # units",500,1],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","---","less brawling value",1500],["Field # for # of ship in slot # at priority #",1,2,1,1]]},{"parts":[],"name":"","aiRules":[]},"","","","",{"parts":[{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[-50,30],"type":"Wing1x1Round","dir":0},{"pos":[0,-20],"type":"Reactor2x2","dir":0},{"pos":[-30,-50],"type":"Engine02","dir":0},{"pos":[0,-50],"type":"HArmor2x1","dir":0},{"pos":[-40,0],"type":"EnergyTransfer","dir":0},{"pos":[-30,30],"type":"Battery1x1","dir":0},{"pos":[50,30],"type":"Wing1x1Round","dir":0},{"pos":[30,30],"type":"Battery1x1","dir":0},{"pos":[40,0],"type":"EnergyTransfer","dir":0},{"pos":[0,20],"type":"Battery2x2","dir":0}],"name":"","aiRules":[["Avoid everything"],["Field # for # of ship in slot # at priority #",1,2,1,2],["Find units that are out of energy"],["Goto @locationTypes","Friendly Army Middle"]]}];
ais.all.Parity = [{"parts":[{"pos":[0,40],"type":"Mount90","dir":0},{"pos":[30,20],"type":"Engine04","dir":0},{"pos":[0,10],"type":"Battery2x1","dir":0},{"pos":[-30,20],"type":"Engine04","dir":0},{"pos":[30,50],"type":"UArmor1x1Angle","dir":0},{"pos":[-30,50],"type":"UArmor1x1Angle","dir":0},{"pos":[0,70],"type":"UArmor2x1","dir":0},{"pos":[-10,-10],"type":"Wing1x1Round","dir":0},{"pos":[10,-10],"type":"Wing1x1Round","dir":0},{"pos":[0,40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",10],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Attack",300],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","---",1600],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","More Range",1500,1800],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",2],["Field # at priority #",1,2],["Field # at priority #",3,7]]},{"parts":[{"pos":[0,60],"type":"Reactor2x2","dir":0},{"pos":[50,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,40],"type":"Battery1x2","dir":0},{"pos":[30,40],"type":"Battery1x2","dir":0},{"pos":[-10,-100],"type":"Wing1x2","dir":0},{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[10,-100],"type":"Wing1x2","dir":0},{"pos":[-40,-40],"type":"ReloaderMod","dir":0},{"pos":[0,-60],"type":"TargetingMod","dir":0},{"pos":[40,-40],"type":"ReloaderMod","dir":0},{"pos":[-40,0],"type":"TargetingMod","dir":0},{"pos":[0,-20],"type":"Mount360","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[-50,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,-90],"type":"Engine02","dir":0},{"pos":[30,-90],"type":"Engine02","dir":0},{"pos":[-90,-30],"type":"Engine02","dir":0},{"pos":[90,-30],"type":"Engine02","dir":0},{"pos":[-70,10],"type":"Wing1x1Round","dir":0},{"pos":[70,10],"type":"Wing1x1Round","dir":0},{"pos":[-70,-20],"type":"HArmor1x2","dir":0},{"pos":[70,-20],"type":"HArmor1x2","dir":0},{"pos":[-50,-70],"type":"HArmor1x1","dir":0},{"pos":[50,-70],"type":"HArmor1x1","dir":0},{"pos":[-50,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[50,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,-20],"type":"HeavyBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",10],["Stay in #m range of slot # units",400,3],["Goto @locationTypes","Friendly Spawn"],["Field # at priority #",1,6]]},{"parts":[{"pos":[-40,50],"type":"ShieldGen2x1","dir":0},{"pos":[40,-20],"type":"BulletSpeedMod","dir":0},{"pos":[-40,-20],"type":"BulletSpeedMod","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[40,-50],"type":"Reactor2x1","dir":0},{"pos":[-40,-50],"type":"Reactor2x1","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[40,50],"type":"ShieldGen2x1","dir":0},{"pos":[-70,30],"type":"Wing1x1Round","dir":0},{"pos":[70,30],"type":"Wing1x1Round","dir":0},{"pos":[70,10],"type":"Wing1x1Round","dir":0},{"pos":[70,-30],"type":"Engine02","dir":0},{"pos":[-70,10],"type":"Wing1x1Round","dir":0},{"pos":[-70,-30],"type":"Engine02","dir":0},{"pos":[0,0],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When Shields down to #%, flee",30],["@attackTypes enemy within #m","Flee",1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Slower",120,1500],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,1]]},{"parts":[{"pos":[-50,30],"type":"HArmor1x1Angle","dir":0},{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[60,-20],"type":"ReloaderMod","dir":0},{"pos":[-60,-20],"type":"ReloaderMod","dir":0},{"pos":[30,0],"type":"Wing1x2","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[-30,0],"type":"Wing1x2","dir":0},{"pos":[20,-80],"type":"BulletSpeedMod","dir":0},{"pos":[-20,-80],"type":"BulletSpeedMod","dir":0},{"pos":[20,-40],"type":"ReloaderMod","dir":0},{"pos":[-60,-60],"type":"Mount360","dir":0},{"pos":[-20,-40],"type":"ReloaderMod","dir":0},{"pos":[60,-60],"type":"Mount360","dir":0},{"pos":[-50,10],"type":"HArmor1x1","dir":0},{"pos":[-70,10],"type":"HArmor1x1Angle","dir":0},{"pos":[70,10],"type":"HArmor1x1Angle","dir":0},{"pos":[50,10],"type":"HArmor1x1","dir":0},{"pos":[30,40],"type":"HArmor1x2","dir":0},{"pos":[-30,40],"type":"HArmor1x2","dir":0},{"pos":[50,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-60,-100],"type":"DamageMod","dir":0},{"pos":[60,-100],"type":"DamageMod","dir":0},{"pos":[-100,-80],"type":"TargetingMod","dir":0},{"pos":[100,-80],"type":"TargetingMod","dir":0},{"pos":[-100,-40],"type":"ReloaderMod","dir":0},{"pos":[100,-40],"type":"ReloaderMod","dir":0},{"pos":[-90,-10],"type":"Wing1x1Round","dir":0},{"pos":[90,-10],"type":"Wing1x1Round","dir":0},{"pos":[-30,-130],"type":"Engine02","dir":0},{"pos":[-10,-130],"type":"Engine02","dir":0},{"pos":[10,-130],"type":"Engine02","dir":0},{"pos":[30,-130],"type":"Engine02","dir":0},{"pos":[90,-110],"type":"HArmor1x1","dir":0},{"pos":[-90,-110],"type":"HArmor1x1","dir":0},{"pos":[0,40],"type":"PDTurret","dir":0},{"pos":[-60,-60],"type":"TorpTurret","dir":0},{"pos":[60,-60],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy within #m","Flee",700],["Stay in #m range of slot # units",300,3],["Goto @locationTypes","Friendly Spawn"],["Field # at start",1],["Field # at priority #",1,4],["Field # at priority #",3,11],["Field # at priority #",50,14]]},{"parts":[{"pos":[-70,30],"type":"Wing1x1Round","dir":0},{"pos":[0,0],"type":"BulletSpeedMod","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[20,80],"type":"BulletSpeedMod","dir":0},{"pos":[-20,80],"type":"BulletSpeedMod","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[-30,-50],"type":"Engine02","dir":0},{"pos":[70,-10],"type":"HArmor1x1","dir":0},{"pos":[-70,-10],"type":"HArmor1x1","dir":0},{"pos":[70,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[0,-40],"type":"EnergyTransfer","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[70,30],"type":"Wing1x1Round","dir":0},{"pos":[70,10],"type":"Wing1x1Round","dir":0},{"pos":[10,-70],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,10],"type":"Wing1x1Round","dir":0},{"pos":[-40,0],"type":"Reactor2x2","dir":0},{"pos":[40,0],"type":"Reactor2x2","dir":0},{"pos":[-70,50],"type":"Wing1x1Round","dir":0},{"pos":[70,50],"type":"Wing1x1Round","dir":0},{"pos":[-50,-50],"type":"Engine02","dir":0},{"pos":[50,-50],"type":"Engine02","dir":0},{"pos":[-10,-70],"type":"HArmor1x1Angle","dir":0},{"pos":[0,40],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy within #m","Flee",1000],["Stay in #m range of slot # units",400,3],["Goto @locationTypes","Friendly Spawn"],["Field # at priority #",1,5]]},{"parts":[{"pos":[-90,20],"type":"Wing1x2","dir":0},{"pos":[-80,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[80,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[80,-60],"type":"Reactor2x2","dir":0},{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[70,20],"type":"HArmor1x2","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[-70,20],"type":"HArmor1x2","dir":0},{"pos":[-40,60],"type":"HArmor2x2","dir":0},{"pos":[-70,60],"type":"Wing1x2","dir":0},{"pos":[70,60],"type":"Wing1x2","dir":0},{"pos":[40,60],"type":"HArmor2x2","dir":0},{"pos":[90,20],"type":"Wing1x2","dir":0},{"pos":[0,80],"type":"HArmor2x2Front1","dir":0},{"pos":[-80,-60],"type":"Reactor2x2","dir":0},{"pos":[-50,-70],"type":"Engine01","dir":0},{"pos":[50,-70],"type":"Engine01","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[10,-80],"type":"Wing1x2","dir":0},{"pos":[-10,-80],"type":"Wing1x2","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[0,40],"type":"DamageMod","dir":0},{"pos":[0,0],"type":"HeavyBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy within #m","Flee",500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Circle","---","Less Range",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","---","More Range",1500],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",1,9],["Field # at priority #",2,12]]},{"parts":[{"pos":[50,0],"type":"HArmor1x2","dir":0},{"pos":[70,60],"type":"Wing1x2","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[-40,80],"type":"ReloaderMod","dir":0},{"pos":[40,80],"type":"ReloaderMod","dir":0},{"pos":[30,-10],"type":"Engine01","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[0,60],"type":"Mount360","dir":0},{"pos":[-30,-10],"type":"Engine01","dir":0},{"pos":[-50,0],"type":"HArmor1x2","dir":0},{"pos":[-70,60],"type":"Wing1x2","dir":0},{"pos":[0,-20],"type":"Reactor2x2","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[-70,-10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[70,-10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-80,20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-90,50],"type":"HArmor1x1","dir":0},{"pos":[90,50],"type":"HArmor1x1","dir":0},{"pos":[70,90],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,90],"type":"HArmor1x1Angle","dir":0},{"pos":[0,100],"type":"ReloaderMod","dir":0},{"pos":[-30,110],"type":"Battery1x1","dir":0},{"pos":[30,110],"type":"Battery1x1","dir":0},{"pos":[0,60],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["Stay in #m range of slot # units",150,3],["Goto @locationTypes","Friendly Spawn"],["Field # at priority #",1,3]]},{"parts":[{"pos":[40,-80],"type":"ReloaderMod","dir":0},{"pos":[0,-80],"type":"Mount360","dir":0},{"pos":[30,0],"type":"Wing1x2","dir":0},{"pos":[-30,40],"type":"Reactor1x2","dir":0},{"pos":[30,40],"type":"Reactor1x2","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[-70,-110],"type":"Engine02","dir":0},{"pos":[-30,0],"type":"Wing1x2","dir":0},{"pos":[70,-110],"type":"Engine02","dir":0},{"pos":[-90,-70],"type":"Engine02","dir":0},{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[90,-70],"type":"Engine02","dir":0},{"pos":[-20,-120],"type":"BulletSpeedMod","dir":0},{"pos":[20,-120],"type":"BulletSpeedMod","dir":0},{"pos":[-50,-130],"type":"Engine02","dir":0},{"pos":[50,-130],"type":"Engine02","dir":0},{"pos":[-20,-40],"type":"DamageMod","dir":0},{"pos":[-40,-80],"type":"ReloaderMod","dir":0},{"pos":[20,-40],"type":"DamageMod","dir":0},{"pos":[-60,-40],"type":"HArmor2x2Angle","dir":0},{"pos":[60,-40],"type":"HArmor2x2Angle","dir":0},{"pos":[60,-10],"type":"Battery2x1","dir":0},{"pos":[-60,-10],"type":"Battery2x1","dir":0},{"pos":[-90,-20],"type":"Wing1x2","dir":0},{"pos":[90,-20],"type":"Wing1x2","dir":0},{"pos":[-50,20],"type":"HArmor1x2","dir":0},{"pos":[50,20],"type":"HArmor1x2","dir":0},{"pos":[-70,-70],"type":"HArmor1x1","dir":0},{"pos":[70,-70],"type":"HArmor1x1","dir":0},{"pos":[-70,10],"type":"Wing1x1Round","dir":0},{"pos":[70,10],"type":"Wing1x1Round","dir":0},{"pos":[0,-160],"type":"EnergyTransfer","dir":0},{"pos":[0,40],"type":"PDTurret","dir":0},{"pos":[0,-80],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy within #m","Flee",1000],["Stay in #m range of slot # units",300,3],["Goto @locationTypes","Friendly Spawn"],["Field # at priority #",2,10]]},{"parts":[{"pos":[-40,80],"type":"HArmor2x2Angle","dir":0},{"pos":[-20,-40],"type":"Battery2x2","dir":0},{"pos":[-40,40],"type":"Mount90","dir":0},{"pos":[-80,70],"type":"HArmor2x1","dir":0},{"pos":[80,70],"type":"HArmor2x1","dir":0},{"pos":[90,90],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,90],"type":"HArmor1x1Angle","dir":0},{"pos":[70,90],"type":"HArmor1x1Angle","dir":0},{"pos":[110,-40],"type":"Wing1x2","dir":0},{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[50,110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-40,0],"type":"Mount30","dir":0},{"pos":[40,0],"type":"Mount30","dir":0},{"pos":[0,40],"type":"Mount30","dir":0},{"pos":[90,-40],"type":"Battery1x2","dir":0},{"pos":[-90,-40],"type":"Battery1x2","dir":0},{"pos":[-70,-50],"type":"Engine01","dir":0},{"pos":[70,-50],"type":"Engine01","dir":0},{"pos":[-110,-40],"type":"Wing1x2","dir":0},{"pos":[-50,-50],"type":"Engine01","dir":0},{"pos":[50,-50],"type":"Engine01","dir":0},{"pos":[40,40],"type":"Mount90","dir":0},{"pos":[-20,120],"type":"HArmor2x2Angle","dir":0},{"pos":[-30,-90],"type":"Engine01","dir":0},{"pos":[30,-90],"type":"Engine01","dir":0},{"pos":[20,120],"type":"HArmor2x2Angle","dir":0},{"pos":[-50,110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,80],"type":"Battery2x2","dir":0},{"pos":[0,-80],"type":"HArmor2x2","dir":0},{"pos":[20,-40],"type":"Battery2x2","dir":0},{"pos":[40,80],"type":"HArmor2x2Angle","dir":0},{"pos":[110,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-130,-50],"type":"HArmor1x1Angle","dir":0},{"pos":[-100,-80],"type":"HArmor2x2AngleBack","dir":0},{"pos":[100,-80],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-110,40],"type":"Wing1x2","dir":0},{"pos":[-120,0],"type":"HArmor2x2AngleBack","dir":0},{"pos":[110,40],"type":"Wing1x2","dir":0},{"pos":[-90,90],"type":"HArmor1x1Angle","dir":0},{"pos":[130,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-130,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[120,0],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-130,30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[130,-50],"type":"HArmor1x1Angle","dir":0},{"pos":[130,30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-80,0],"type":"HArmor2x2","dir":0},{"pos":[-80,40],"type":"HArmor2x2","dir":0},{"pos":[80,40],"type":"HArmor2x2","dir":0},{"pos":[80,0],"type":"HArmor2x2","dir":0},{"pos":[-150,10],"type":"HArmor1x1Angle","dir":0},{"pos":[150,10],"type":"HArmor1x1Angle","dir":0},{"pos":[-10,-110],"type":"Wing1x1Round","dir":0},{"pos":[10,-110],"type":"Wing1x1Round","dir":0},{"pos":[0,40],"type":"LightBeamTurret","dir":0},{"pos":[-40,0],"type":"LightBeamTurret","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0},{"pos":[40,0],"type":"LightBeamTurret","dir":0},{"pos":[-40,40],"type":"LightBeamTurret","dir":0},{"pos":[40,40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","---","More expensive",10000],["Stay in #m range of slot # units",300,3],["Field # at priority #",2,13]]},{"parts":[{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[70,-20],"type":"Reactor1x2","dir":0},{"pos":[-70,-20],"type":"Reactor1x2","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[-10,-90],"type":"Wing1x1Round","dir":0},{"pos":[10,-90],"type":"Wing1x1Round","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-50,10],"type":"Wing1x1Round","dir":0},{"pos":[50,10],"type":"Wing1x1Round","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[-50,-60],"type":"Engine04","dir":0},{"pos":[50,-60],"type":"Engine04","dir":0},{"pos":[-30,20],"type":"Battery1x2","dir":0},{"pos":[30,20],"type":"Battery1x2","dir":0},{"pos":[0,-70],"type":"ShieldGen2x1","dir":0},{"pos":[0,0],"type":"PDTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",35],["@attackTypes enemy within #m","Flee",1000],["Stay in #m range of slot # units",200,3],["Goto @locationTypes","Friendly Spawn"],["Field # at priority #",1,8]]}];
ais.all.Podlings = [{"parts":[{"pos":[80,20],"type":"Battery2x2","dir":0},{"pos":[40,110],"type":"Wing2x1","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[40,80],"type":"ReloaderMod","dir":0},{"pos":[0,100],"type":"ReloaderMod","dir":0},{"pos":[90,50],"type":"Battery1x1","dir":0},{"pos":[0,60],"type":"Mount360","dir":0},{"pos":[70,60],"type":"Battery1x2","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[-70,60],"type":"Battery1x2","dir":0},{"pos":[-40,110],"type":"Wing2x1","dir":0},{"pos":[0,20],"type":"ReloaderMod","dir":0},{"pos":[-40,80],"type":"ReloaderMod","dir":0},{"pos":[80,-20],"type":"Battery2x2","dir":0},{"pos":[80,-60],"type":"Engine07","dir":0},{"pos":[120,10],"type":"Reactor2x1","dir":0},{"pos":[120,-10],"type":"Reactor2x1","dir":0},{"pos":[120,-40],"type":"Engine07","dir":0},{"pos":[90,70],"type":"Wing1x1Notch","dir":0},{"pos":[70,90],"type":"Wing1x1Notch","dir":0},{"pos":[-70,90],"type":"Wing1x1Notch","dir":0},{"pos":[120,30],"type":"HArmor1x2Front2","dir":0},{"pos":[0,60],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",15],["Avoid #dps danger areas",1],["When #% of energy, @chargeTypes",10,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","More HP",1200],["@capTypes Command Points within #m","Capture",250],["@capTypes Command Points within #m","Protect",3000],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",1,13]]},{"parts":[{"pos":[-10,-10],"type":"Reactor1x1","dir":0},{"pos":[-10,10],"type":"Wing1x1Notch","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[-40,-20],"type":"Mount30","dir":0},{"pos":[-40,-20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",1],["Avoid everything"],["Avoid #dps danger areas",1],["@capTypes Command Points within #m","Capture",250],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",2,3],["Field # at priority #",1,7],["Field # at priority #",1,10]]},{"parts":[{"pos":[70,30],"type":"Wing1x1Notch","dir":0},{"pos":[40,30],"type":"Reactor2x1","dir":0},{"pos":[0,40],"type":"Mount30","dir":0},{"pos":[-30,10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-110,30],"type":"ShieldGen1x1","dir":0},{"pos":[-80,70],"type":"HArmor1x2Font1","dir":0},{"pos":[-80,10],"type":"HArmor1x2Back1","dir":0},{"pos":[30,10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-80,40],"type":"Mount360Micro","dir":0},{"pos":[-80,-20],"type":"Engine07","dir":0},{"pos":[-110,-10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-110,60],"type":"VArmor1x1Hook","dir":0},{"pos":[50,50],"type":"Wing1x1Notch","dir":0},{"pos":[30,50],"type":"UArmor1x1","dir":0},{"pos":[0,0],"type":"Battery2x2","dir":0},{"pos":[-40,40],"type":"Mount180","dir":0},{"pos":[0,40],"type":"HeavyBeamTurret","dir":0},{"pos":[-80,40],"type":"PDTurret","dir":0},{"pos":[-40,40],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",1],["When #% of energy, @chargeTypes",10,"Find recharger"],["@attackTypes enemy within #m","Stay at range",400],["@attackTypes enemy @unitTypes within #m","Attack","Scout",500],["@attackTypes enemy @unitTypes within #m","Attack","Brick",500],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",500],["@attackTypes enemy @unitTypes within #m","Attack","Interceptor",600],["Stay in #m range of slot # units",500,6],["Stay in #m range of slot # units",500,7],["@capTypes Command Points within #m","Spread to",2000],["Field # for # of ship in slot # at priority #",2,1,6,7],["Field # at priority #",2,7],["Field # at priority #",3,10]]},{"parts":[{"pos":[-40,170],"type":"HArmor1x2Font1","dir":0},{"pos":[190,150],"type":"Wing1x1Notch","dir":0},{"pos":[20,50],"type":"Battery2x1","dir":0},{"pos":[20,80],"type":"Mount360","dir":0},{"pos":[90,70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[20,150],"type":"HArmor1x2Font1","dir":0},{"pos":[20,-10],"type":"HArmor1x2Back1","dir":0},{"pos":[20,10],"type":"Battery2x1","dir":0},{"pos":[10,30],"type":"Reactor1x1","dir":0},{"pos":[30,30],"type":"Battery1x1","dir":0},{"pos":[190,90],"type":"Wing1x1Notch","dir":0},{"pos":[190,70],"type":"UArmor1x1Angle","dir":0},{"pos":[190,50],"type":"Wing1x1Notch","dir":0},{"pos":[80,130],"type":"HArmor1x2Font1","dir":0},{"pos":[170,-10],"type":"Engine02","dir":0},{"pos":[160,170],"type":"HArmor1x2Font1","dir":0},{"pos":[160,30],"type":"HArmor1x2Back1","dir":0},{"pos":[120,90],"type":"Wing2x1","dir":0},{"pos":[80,100],"type":"Mount180","dir":0},{"pos":[150,-10],"type":"Engine01","dir":0},{"pos":[-40,140],"type":"Mount180","dir":0},{"pos":[-70,150],"type":"Wing1x1Notch","dir":0},{"pos":[-70,130],"type":"Wing1x1Notch","dir":0},{"pos":[-40,110],"type":"ShieldGen2x1","dir":0},{"pos":[-40,90],"type":"HArmor1x2Back1","dir":0},{"pos":[-10,130],"type":"Battery1x1","dir":0},{"pos":[160,80],"type":"Mount270","dir":0},{"pos":[160,140],"type":"Mount270","dir":0},{"pos":[20,120],"type":"ReloaderMod","dir":0},{"pos":[-10,110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[60,70],"type":"Reactor2x1","dir":0},{"pos":[160,110],"type":"HArmor2x1","dir":0},{"pos":[160,50],"type":"Battery2x1","dir":0},{"pos":[80,100],"type":"MissileTurret","dir":0},{"pos":[160,140],"type":"FlackTurret","dir":0},{"pos":[160,80],"type":"HeavyPDTurret","dir":0},{"pos":[20,80],"type":"PlasmaTurret","dir":0},{"pos":[-40,140],"type":"BombGun","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",10,"Rest"],["@capTypes Command Points within #m","Protect",800],["@capTypes Command Points within #m","Guard",5000],["Stay in #m range of slot # units",400,7],["Stay in #m range of slot # units",800,8],["Stay in #m range of slot # units",800,6],["Field # at priority #",1,5],["Field # at priority #",2,8],["Field # at priority #",3,9]]},{"parts":[{"pos":[40,60],"type":"ReloaderMod","dir":0},{"pos":[0,-90],"type":"HArmor1x2Back1","dir":0},{"pos":[0,80],"type":"Mount360","dir":0},{"pos":[0,120],"type":"ReloaderMod","dir":0},{"pos":[40,100],"type":"ReloaderMod","dir":0},{"pos":[-40,140],"type":"Mount360Micro","dir":0},{"pos":[0,10],"type":"ShieldGen2x1","dir":0},{"pos":[-40,170],"type":"HArmor1x2Font1","dir":0},{"pos":[140,140],"type":"Reactor2x2","dir":0},{"pos":[100,150],"type":"Wing2x1","dir":0},{"pos":[140,170],"type":"HArmor1x2Font1","dir":0},{"pos":[70,140],"type":"HArmor1x2","dir":0},{"pos":[150,70],"type":"Engine01","dir":0},{"pos":[130,70],"type":"Engine01","dir":0},{"pos":[140,110],"type":"HArmor1x2Back1","dir":0},{"pos":[0,150],"type":"Wing2x1","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[0,-60],"type":"Battery2x2","dir":0},{"pos":[0,-20],"type":"Reactor2x2","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[-40,100],"type":"ReloaderMod","dir":0},{"pos":[-80,80],"type":"ReloaderMod","dir":0},{"pos":[-160,60],"type":"Reactor2x2","dir":0},{"pos":[-160,90],"type":"HArmor1x2Font1","dir":0},{"pos":[-160,30],"type":"HArmor1x2Back1","dir":0},{"pos":[-170,-10],"type":"Engine01","dir":0},{"pos":[-150,-10],"type":"Engine01","dir":0},{"pos":[-110,60],"type":"HArmor1x2","dir":0},{"pos":[-130,70],"type":"Wing1x1Notch","dir":0},{"pos":[40,170],"type":"HArmor1x2Font1","dir":0},{"pos":[40,140],"type":"Mount90","dir":0},{"pos":[-40,60],"type":"Mount90","dir":0},{"pos":[-80,40],"type":"ReloaderMod","dir":0},{"pos":[40,140],"type":"HeavyBeamTurret","dir":0},{"pos":[-40,140],"type":"FlackTurret","dir":0},{"pos":[0,80],"type":"PlasmaTurret","dir":0},{"pos":[-40,60],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",10],["When #% of energy, @chargeTypes",10,"Find recharger"],["@capTypes Command Points within #m","Guard",10000],["Field # at priority #",1,7],["Field # at priority #",2,9],["Field # at priority #",3,13]]},{"parts":[{"pos":[-90,-90],"type":"HArmor1x1","dir":0},{"pos":[-10,10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[140,-110],"type":"HArmor1x2Back1","dir":0},{"pos":[140,-50],"type":"HArmor1x2Font1","dir":0},{"pos":[150,-150],"type":"Engine01","dir":0},{"pos":[140,-30],"type":"HArmor1x2Back1","dir":0},{"pos":[-180,-50],"type":"HArmor1x2Back1","dir":0},{"pos":[140,0],"type":"HArmor2x2","dir":0},{"pos":[110,-90],"type":"HArmor1x1","dir":0},{"pos":[-170,-90],"type":"Engine01","dir":0},{"pos":[-190,-90],"type":"Engine01","dir":0},{"pos":[0,-170],"type":"HArmor1x2Back1","dir":0},{"pos":[-110,-10],"type":"HArmor1x1","dir":0},{"pos":[-130,-10],"type":"HArmor1x1","dir":0},{"pos":[0,70],"type":"HArmor1x2Back1","dir":0},{"pos":[0,-30],"type":"Wing2x1","dir":0},{"pos":[0,-50],"type":"Reactor2x1","dir":0},{"pos":[0,-70],"type":"Wing2x1","dir":0},{"pos":[90,10],"type":"HArmor1x1","dir":0},{"pos":[110,10],"type":"HArmor1x1","dir":0},{"pos":[0,-100],"type":"HArmor2x2","dir":0},{"pos":[80,-140],"type":"HArmor2x2Angle","dir":0},{"pos":[80,-170],"type":"HArmor1x2Back1","dir":0},{"pos":[0,-140],"type":"Mount360Micro","dir":0},{"pos":[60,-20],"type":"HArmor2x2","dir":0},{"pos":[0,190],"type":"HArmor1x2Font1","dir":0},{"pos":[0,40],"type":"Reactor2x2","dir":0},{"pos":[140,-80],"type":"Battery2x2","dir":0},{"pos":[-150,-10],"type":"HArmor1x1","dir":0},{"pos":[0,90],"type":"HArmor2x1","dir":0},{"pos":[-70,10],"type":"Engine01","dir":0},{"pos":[-90,20],"type":"HArmor1x2","dir":0},{"pos":[-90,-20],"type":"HArmor1x2","dir":0},{"pos":[90,-90],"type":"HArmor1x1","dir":0},{"pos":[-90,-60],"type":"HArmor1x2","dir":0},{"pos":[-30,30],"type":"HArmor1x1","dir":0},{"pos":[-50,30],"type":"HArmor1x1","dir":0},{"pos":[170,-10],"type":"Wing1x1Notch","dir":0},{"pos":[30,150],"type":"OverKillAi","dir":0},{"pos":[10,10],"type":"HArmor1x1Angle","dir":0},{"pos":[90,-10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[60,180],"type":"HArmor2x2Front1","dir":0},{"pos":[-110,70],"type":"Wing1x1Notch","dir":0},{"pos":[170,-90],"type":"Wing1x1Notch","dir":0},{"pos":[30,-10],"type":"Wing1x1Notch","dir":0},{"pos":[-80,130],"type":"HArmor1x2Font1","dir":0},{"pos":[70,60],"type":"HArmor1x2","dir":0},{"pos":[50,60],"type":"HArmor1x2","dir":0},{"pos":[60,20],"type":"HArmor2x2","dir":0},{"pos":[70,-60],"type":"HArmor1x2","dir":0},{"pos":[-170,-20],"type":"HArmor1x2","dir":0},{"pos":[-190,-20],"type":"HArmor1x2","dir":0},{"pos":[-180,10],"type":"Battery2x1","dir":0},{"pos":[90,30],"type":"Wing1x1Round","dir":0},{"pos":[-100,-120],"type":"HArmor2x2Angle","dir":0},{"pos":[-100,-150],"type":"HArmor1x2Back1","dir":0},{"pos":[70,-100],"type":"HArmor1x2","dir":0},{"pos":[-40,-30],"type":"Wing2x1","dir":0},{"pos":[170,-70],"type":"Wing1x1Notch","dir":0},{"pos":[-110,10],"type":"HArmor1x1Angle","dir":0},{"pos":[-180,40],"type":"HArmor2x2","dir":0},{"pos":[-80,60],"type":"HArmor2x2","dir":0},{"pos":[0,120],"type":"HArmor2x2","dir":0},{"pos":[60,100],"type":"HArmor2x2","dir":0},{"pos":[0,160],"type":"Mount360","dir":0},{"pos":[140,40],"type":"HArmor2x2","dir":0},{"pos":[140,70],"type":"HArmor1x2Font1","dir":0},{"pos":[-180,70],"type":"HArmor1x2Font1","dir":0},{"pos":[60,140],"type":"Mount270","dir":0},{"pos":[-40,-50],"type":"Wing2x1","dir":0},{"pos":[-40,-110],"type":"Wing2x1","dir":0},{"pos":[-40,-130],"type":"Wing2x1","dir":0},{"pos":[130,-150],"type":"Engine01","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[-80,100],"type":"HArmor2x2","dir":0},{"pos":[0,-140],"type":"PDTurret","dir":0},{"pos":[0,160],"type":"MissileTurret","dir":0},{"pos":[60,140],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",70],["When #% of energy, @chargeTypes",5,"Find recharger"],["@attackTypes enemy @unitTypes within #m","Stay at range","Cruiser",800],["@capTypes Command Points within #m","Capture",300],["@capTypes Command Points within #m","Protect",400],["@capTypes Command Points within #m","Spread to",10000],["Stay in #m range of friendly units",400],["Stay in #m range of slot # units",900,7],["Field # at start",1],["Field # at priority #",1,7],["Field # at priority #",2,14],["Field # for # of ship in slot # at priority #",1,1,6,4]]},{"parts":[{"pos":[110,30],"type":"Battery1x1","dir":0},{"pos":[110,60],"type":"Battery1x2","dir":0},{"pos":[40,80],"type":"ReloaderMod","dir":0},{"pos":[-160,40],"type":"HArmor2x2","dir":0},{"pos":[-160,10],"type":"Battery2x1","dir":0},{"pos":[-150,-50],"type":"Engine01","dir":0},{"pos":[-160,-10],"type":"HArmor1x2Back1","dir":0},{"pos":[0,-50],"type":"Battery2x1","dir":0},{"pos":[40,150],"type":"HArmor1x2Font1","dir":0},{"pos":[0,-70],"type":"HArmor1x2Back1","dir":0},{"pos":[-40,150],"type":"HArmor1x2Font1","dir":0},{"pos":[-170,-50],"type":"Engine01","dir":0},{"pos":[10,-100],"type":"Engine04","dir":0},{"pos":[0,-20],"type":"Battery2x2","dir":0},{"pos":[0,60],"type":"Mount360","dir":0},{"pos":[-10,-110],"type":"Engine02","dir":0},{"pos":[-160,150],"type":"HArmor1x2Front2","dir":0},{"pos":[-80,60],"type":"Mount180","dir":0},{"pos":[180,130],"type":"HArmor1x2Font1","dir":0},{"pos":[180,110],"type":"UArmor2x1","dir":0},{"pos":[180,30],"type":"HArmor2x1","dir":0},{"pos":[180,90],"type":"Reactor2x1","dir":0},{"pos":[190,-50],"type":"Engine01","dir":0},{"pos":[180,60],"type":"Mount360Micro","dir":0},{"pos":[180,0],"type":"HArmor2x2Back1","dir":0},{"pos":[80,60],"type":"Mount180","dir":0},{"pos":[-120,50],"type":"Wing2x1","dir":0},{"pos":[140,50],"type":"Wing2x1","dir":0},{"pos":[170,-50],"type":"Engine01","dir":0},{"pos":[30,-90],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[70,30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,90],"type":"HArmor1x1Angle","dir":0},{"pos":[70,90],"type":"HArmor1x1Angle","dir":0},{"pos":[130,30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-110,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-40,40],"type":"TargetingMod","dir":0},{"pos":[-70,130],"type":"Wing1x1Notch","dir":0},{"pos":[-70,110],"type":"Wing1x1Notch","dir":0},{"pos":[130,70],"type":"HArmor1x1Angle","dir":0},{"pos":[40,120],"type":"Mount180","dir":0},{"pos":[-160,80],"type":"HArmor2x2","dir":0},{"pos":[-40,120],"type":"Mount360Micro","dir":0},{"pos":[-160,120],"type":"Reactor2x2","dir":0},{"pos":[-40,80],"type":"TargetingMod","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[0,100],"type":"TargetingMod","dir":0},{"pos":[0,20],"type":"ReloaderMod","dir":0},{"pos":[180,60],"type":"PDTurret","dir":0},{"pos":[-80,60],"type":"MissileTurret","dir":0},{"pos":[80,60],"type":"MissileTurret","dir":0},{"pos":[0,60],"type":"MissileTurret","dir":0},{"pos":[-40,120],"type":"FlackTurret","dir":0},{"pos":[40,120],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",50],["When #% of energy, @chargeTypes",5,"Find recharger"],["@attackTypes enemy @unitTypes within #m","Attack","Carrier",900],["@capTypes Command Points within #m","Capture",400],["@capTypes Command Points within #m","Protect",1800],["Stay in #m range of slot # units",800,6],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",1,5],["Field # at priority #",2,9],["Field # at priority #",3,14]]},{"parts":[{"pos":[-170,-10],"type":"Engine01","dir":0},{"pos":[40,10],"type":"Battery2x1","dir":0},{"pos":[40,80],"type":"TargetingMod","dir":0},{"pos":[-40,80],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[0,100],"type":"ReloaderMod","dir":0},{"pos":[0,130],"type":"Battery2x1","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[0,-130],"type":"HArmor1x2Back1","dir":0},{"pos":[0,190],"type":"HArmor1x2Font1","dir":0},{"pos":[10,-60],"type":"HArmor1x2","dir":0},{"pos":[-10,-60],"type":"HArmor1x2","dir":0},{"pos":[40,40],"type":"TargetingMod","dir":0},{"pos":[0,-20],"type":"Reactor2x2","dir":0},{"pos":[0,-100],"type":"HArmor2x2","dir":0},{"pos":[0,160],"type":"Mount360","dir":0},{"pos":[-40,10],"type":"Battery2x1","dir":0},{"pos":[-160,90],"type":"HArmor2x1","dir":0},{"pos":[-160,110],"type":"HArmor2x1","dir":0},{"pos":[-150,-10],"type":"Engine01","dir":0},{"pos":[-160,60],"type":"Reactor2x2","dir":0},{"pos":[-160,30],"type":"HArmor1x2Back1","dir":0},{"pos":[0,60],"type":"Mount360","dir":0},{"pos":[-120,60],"type":"Wing2x2","dir":0},{"pos":[150,-30],"type":"Engine01","dir":0},{"pos":[170,-30],"type":"Engine01","dir":0},{"pos":[160,10],"type":"HArmor1x2Back1","dir":0},{"pos":[160,30],"type":"HArmor2x1","dir":0},{"pos":[160,90],"type":"HArmor1x2Front2","dir":0},{"pos":[160,60],"type":"Mount180","dir":0},{"pos":[-80,60],"type":"Mount270","dir":0},{"pos":[-40,120],"type":"Mount180","dir":0},{"pos":[-160,130],"type":"HArmor1x2Font1","dir":0},{"pos":[80,60],"type":"Mount90","dir":0},{"pos":[80,20],"type":"Battery2x2","dir":0},{"pos":[120,40],"type":"Wing2x2","dir":0},{"pos":[0,160],"type":"PDTurret","dir":0},{"pos":[160,60],"type":"FlackTurret","dir":0},{"pos":[0,60],"type":"PlasmaTurret","dir":0},{"pos":[-80,60],"type":"PlasmaTurret","dir":0},{"pos":[-40,120],"type":"PlasmaTurret","dir":0},{"pos":[80,60],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",50],["@capTypes Command Points within #m","Capture",200],["When #% of energy, @chargeTypes",10,"Find recharger"],["Stay in #m range of slot # units",600,6],["Stay in #m range of slot # units",600,7],["@attackTypes enemy that is @absoluteTypes then # within #m","Stay at range","Slower",150,750],["@capTypes Command Points within #m","Protect",2000],["@capTypes Command Points within #m","Guard",10000],["Field # at start",1],["Field # for # of ship in slot # at priority #",1,1,6,5],["Field # at priority #",2,10],["Field # at priority #",3,14]]},{"parts":[{"pos":[-150,-10],"type":"Engine01","dir":0},{"pos":[-160,30],"type":"HArmor1x2Back1","dir":0},{"pos":[40,40],"type":"TargetingMod","dir":0},{"pos":[0,60],"type":"Mount360","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[40,80],"type":"TargetingMod","dir":0},{"pos":[-40,120],"type":"Mount30","dir":0},{"pos":[-40,80],"type":"ReloaderMod","dir":0},{"pos":[40,120],"type":"Mount30","dir":0},{"pos":[-80,60],"type":"Mount360","dir":0},{"pos":[0,100],"type":"ReloaderMod","dir":0},{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[-40,0],"type":"Mount30","dir":0},{"pos":[0,140],"type":"Mount30","dir":0},{"pos":[-80,100],"type":"Mount30","dir":0},{"pos":[-80,130],"type":"Battery2x1","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[120,100],"type":"Mount30","dir":0},{"pos":[110,-10],"type":"Engine01","dir":0},{"pos":[120,30],"type":"HArmor1x2Back1","dir":0},{"pos":[150,50],"type":"Wing1x1Notch","dir":0},{"pos":[130,-10],"type":"Engine01","dir":0},{"pos":[80,60],"type":"Wing2x2","dir":0},{"pos":[-130,50],"type":"Wing1x1Notch","dir":0},{"pos":[-110,50],"type":"HArmor1x1","dir":0},{"pos":[-160,60],"type":"HArmor2x2","dir":0},{"pos":[80,120],"type":"Wing2x2","dir":0},{"pos":[-170,-10],"type":"Engine01","dir":0},{"pos":[-110,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-80,150],"type":"HArmor2x1","dir":0},{"pos":[-80,20],"type":"Reactor2x2","dir":0},{"pos":[-80,-10],"type":"Battery2x1","dir":0},{"pos":[-80,-40],"type":"Reactor2x2","dir":0},{"pos":[-80,-70],"type":"HArmor1x2Back1","dir":0},{"pos":[-160,100],"type":"Mount360Micro","dir":0},{"pos":[-160,130],"type":"HArmor1x2Front2","dir":0},{"pos":[-110,30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,-100],"type":"HArmor2x2Back2","dir":0},{"pos":[120,170],"type":"HArmor1x2Font1","dir":0},{"pos":[0,170],"type":"HArmor1x2Font1","dir":0},{"pos":[-80,170],"type":"HArmor1x2Front2","dir":0},{"pos":[120,60],"type":"Battery2x2","dir":0},{"pos":[40,0],"type":"Mount360Micro","dir":0},{"pos":[120,140],"type":"Mount30","dir":0},{"pos":[0,-70],"type":"Battery2x1","dir":0},{"pos":[0,-50],"type":"HArmor2x1","dir":0},{"pos":[40,0],"type":"PDTurret","dir":0},{"pos":[40,120],"type":"TorpTurret","dir":0},{"pos":[120,140],"type":"TorpTurret","dir":0},{"pos":[120,100],"type":"TorpTurret","dir":0},{"pos":[0,140],"type":"TorpTurret","dir":0},{"pos":[-40,0],"type":"TorpTurret","dir":0},{"pos":[-80,100],"type":"TorpTurret","dir":0},{"pos":[-40,120],"type":"TorpTurret","dir":0},{"pos":[0,-20],"type":"TorpTurret","dir":0},{"pos":[0,60],"type":"MissileTurret","dir":0},{"pos":[-80,60],"type":"MissileTurret","dir":0},{"pos":[-160,100],"type":"FlackTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",50],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Weaker",400],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","More HP","---",1100],["Stay in #m range of slot # units",500,6],["Stay in #m range of slot # units",450,7],["@capTypes Command Points within #m","Capture",200],["@capTypes Command Points within #m","Protect",2000],["@capTypes Command Points within #m","Guard",10000],["Field # at priority #",1,8],["Field # at priority #",2,11],["Field # at priority #",2,15]]},{"parts":[{"pos":[-140,60],"type":"Mount360","dir":0},{"pos":[150,-50],"type":"Engine02","dir":0},{"pos":[40,40],"type":"Mount360","dir":0},{"pos":[0,40],"type":"EnergyTransfer","dir":0},{"pos":[10,100],"type":"Battery1x2","dir":0},{"pos":[20,70],"type":"ShieldGen2x1","dir":0},{"pos":[80,30],"type":"Wing2x1","dir":0},{"pos":[20,-60],"type":"Battery2x2","dir":0},{"pos":[110,30],"type":"Wing1x1Notch","dir":0},{"pos":[20,-140],"type":"Reactor2x2","dir":0},{"pos":[20,-100],"type":"Reactor2x2","dir":0},{"pos":[140,20],"type":"Battery2x2","dir":0},{"pos":[140,60],"type":"Mount360","dir":0},{"pos":[20,-180],"type":"Engine07","dir":0},{"pos":[140,-10],"type":"HArmor1x2Back1","dir":0},{"pos":[140,90],"type":"HArmor1x2Font1","dir":0},{"pos":[-140,20],"type":"Battery2x2","dir":0},{"pos":[-140,90],"type":"HArmor1x2Font1","dir":0},{"pos":[-10,10],"type":"Wing1x1Notch","dir":0},{"pos":[-140,-50],"type":"HArmor1x2Back1","dir":0},{"pos":[-140,-20],"type":"Reactor2x2","dir":0},{"pos":[-100,10],"type":"Wing2x1","dir":0},{"pos":[-60,10],"type":"HArmor2x1","dir":0},{"pos":[-30,10],"type":"Wing1x1Notch","dir":0},{"pos":[10,10],"type":"Wing1x1Notch","dir":0},{"pos":[10,-20],"type":"Battery1x2","dir":0},{"pos":[10,170],"type":"Wing1x1Notch","dir":0},{"pos":[10,140],"type":"Battery1x2","dir":0},{"pos":[30,-30],"type":"Wing1x1Notch","dir":0},{"pos":[-150,-90],"type":"Engine02","dir":0},{"pos":[40,40],"type":"HeavyBeamTurret","dir":0},{"pos":[140,60],"type":"FlackTurret","dir":0},{"pos":[-140,60],"type":"HeavyPDTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",1],["Avoid #dps danger areas",1],["When #% of energy, @chargeTypes",10,"Flee enemies"],["When #% of energy, @chargeTypes",10,"Rest"],["Find units that are out of energy"],["Stay in #m range of friendly units",900],["Field # at priority #",1,6],["Field # at priority #",2,9]]}];
ais.all.PointDefender = [{"parts":[{"pos":[70,-70],"type":"Wing1x1Round","dir":0},{"pos":[-50,-70],"type":"Battery1x1","dir":0},{"pos":[-40,-50],"type":"Reactor2x1","dir":0},{"pos":[40,-50],"type":"Reactor2x1","dir":0},{"pos":[0,20],"type":"Mount270","dir":0},{"pos":[-30,20],"type":"HArmor1x2","dir":0},{"pos":[30,70],"type":"Wing1x1Round","dir":0},{"pos":[-30,70],"type":"Wing1x1Round","dir":0},{"pos":[-30,50],"type":"Battery1x1","dir":0},{"pos":[30,50],"type":"Battery1x1","dir":0},{"pos":[30,20],"type":"HArmor1x2","dir":0},{"pos":[-50,10],"type":"HArmor1x1Angle","dir":0},{"pos":[50,10],"type":"HArmor1x1Angle","dir":0},{"pos":[0,-20],"type":"Mount90","dir":0},{"pos":[0,-60],"type":"Mount270","dir":0},{"pos":[-40,-20],"type":"Mount90","dir":0},{"pos":[40,-20],"type":"Mount90","dir":0},{"pos":[0,50],"type":"Reactor2x1","dir":0},{"pos":[50,-70],"type":"Battery1x1","dir":0},{"pos":[-70,-70],"type":"Wing1x1Round","dir":0},{"pos":[70,-30],"type":"Wing1x1Round","dir":0},{"pos":[-70,-30],"type":"Wing1x1Round","dir":0},{"pos":[-30,-90],"type":"Engine02","dir":0},{"pos":[30,-90],"type":"Engine02","dir":0},{"pos":[-10,-100],"type":"Engine04","dir":0},{"pos":[10,-100],"type":"Engine04","dir":0},{"pos":[50,-100],"type":"Engine04","dir":0},{"pos":[70,-100],"type":"Engine04","dir":0},{"pos":[-50,-100],"type":"Engine04","dir":0},{"pos":[-70,-100],"type":"Engine04","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[0,-60],"type":"PDTurret","dir":0},{"pos":[0,20],"type":"PDTurret","dir":0},{"pos":[40,-20],"type":"TorpTurret","dir":0},{"pos":[0,-20],"type":"TorpTurret","dir":0},{"pos":[-40,-20],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Flee",700],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Bomb",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","More HP",3000],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",2,1],["Field # at priority #",5,2]]},{"parts":[{"pos":[-20,90],"type":"HArmor2x1","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[-60,20],"type":"Mount90","dir":0},{"pos":[60,20],"type":"Mount90","dir":0},{"pos":[0,60],"type":"Mount270","dir":0},{"pos":[-110,-20],"type":"Engine04","dir":0},{"pos":[-40,60],"type":"Mount90","dir":0},{"pos":[0,-20],"type":"Mount90","dir":0},{"pos":[40,60],"type":"Mount90","dir":0},{"pos":[110,-20],"type":"Engine04","dir":0},{"pos":[90,-40],"type":"Engine04","dir":0},{"pos":[80,-10],"type":"Battery2x1","dir":0},{"pos":[-90,-40],"type":"Engine04","dir":0},{"pos":[30,20],"type":"Reactor1x2","dir":0},{"pos":[0,20],"type":"Mount270","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[-50,90],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,20],"type":"Reactor1x2","dir":0},{"pos":[100,10],"type":"HArmor2x1","dir":0},{"pos":[-80,-10],"type":"Battery2x1","dir":0},{"pos":[50,90],"type":"HArmor1x1Angle","dir":0},{"pos":[-100,10],"type":"HArmor2x1","dir":0},{"pos":[20,90],"type":"HArmor2x1","dir":0},{"pos":[130,10],"type":"HArmor1x1Angle","dir":0},{"pos":[110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[70,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,70],"type":"HArmor1x1Angle","dir":0},{"pos":[-130,10],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,110],"type":"HArmor1x1Angle","dir":0},{"pos":[30,110],"type":"HArmor1x1Angle","dir":0},{"pos":[40,-30],"type":"Wing2x1","dir":0},{"pos":[40,-10],"type":"Battery2x1","dir":0},{"pos":[-40,-30],"type":"Wing2x1","dir":0},{"pos":[-40,-10],"type":"Battery2x1","dir":0},{"pos":[0,110],"type":"Reactor2x1","dir":0},{"pos":[60,20],"type":"PDTurret","dir":0},{"pos":[-60,20],"type":"PDTurret","dir":0},{"pos":[0,60],"type":"PDTurret","dir":0},{"pos":[0,-20],"type":"TorpTurret","dir":0},{"pos":[-40,60],"type":"TorpTurret","dir":0},{"pos":[40,60],"type":"TorpTurret","dir":0},{"pos":[0,20],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",2,1],["@attackTypes enemy within #m","Attack",1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",300,2000],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,40]]},"","","","","","","",""];
ais.all.PushForce = [{"parts":[{"pos":[90,-120],"type":"HArmor1x2","dir":0},{"pos":[90,-150],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-80,0],"type":"Mount10Range","dir":0},{"pos":[80,0],"type":"Mount10Range","dir":0},{"pos":[0,0],"type":"Mount10Range","dir":0},{"pos":[40,80],"type":"Mount10Range","dir":0},{"pos":[-40,80],"type":"Mount10Range","dir":0},{"pos":[80,100],"type":"ReloaderMod","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[120,20],"type":"TargetingMod","dir":0},{"pos":[-120,-20],"type":"DamageMod","dir":0},{"pos":[120,-20],"type":"DamageMod","dir":0},{"pos":[-120,20],"type":"TargetingMod","dir":0},{"pos":[-60,140],"type":"Mount90","dir":0},{"pos":[60,140],"type":"Mount90","dir":0},{"pos":[0,160],"type":"Mount30","dir":0},{"pos":[0,-50],"type":"Battery2x1","dir":0},{"pos":[-40,-60],"type":"Reactor2x2","dir":0},{"pos":[0,-70],"type":"Battery2x1","dir":0},{"pos":[40,-60],"type":"Reactor2x2","dir":0},{"pos":[-20,130],"type":"HArmor2x1","dir":0},{"pos":[20,130],"type":"HArmor2x1","dir":0},{"pos":[-150,50],"type":"HArmor1x1Angle","dir":0},{"pos":[150,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-120,50],"type":"HArmor2x1","dir":0},{"pos":[-150,20],"type":"HArmor1x2","dir":0},{"pos":[-90,140],"type":"Wing1x2","dir":0},{"pos":[90,140],"type":"Wing1x2","dir":0},{"pos":[140,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-140,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-160,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[160,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[120,50],"type":"HArmor2x1","dir":0},{"pos":[-130,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[170,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-170,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-100,-80],"type":"HArmor2x2","dir":0},{"pos":[130,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-100,-50],"type":"HArmor2x1","dir":0},{"pos":[150,20],"type":"HArmor1x2","dir":0},{"pos":[100,-80],"type":"HArmor2x2","dir":0},{"pos":[-110,-110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-90,-120],"type":"HArmor1x2","dir":0},{"pos":[-90,-150],"type":"HArmor1x1AngleBack","dir":0},{"pos":[100,-50],"type":"HArmor2x1","dir":0},{"pos":[110,-110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-40,-100],"type":"HArmor2x2","dir":0},{"pos":[0,-100],"type":"HArmor2x2","dir":0},{"pos":[40,-100],"type":"HArmor2x2","dir":0},{"pos":[-20,-140],"type":"HArmor2x2","dir":0},{"pos":[20,-140],"type":"HArmor2x2","dir":0},{"pos":[-130,110],"type":"Wing1x1Notch","dir":0},{"pos":[130,110],"type":"Wing1x1Notch","dir":0},{"pos":[-110,130],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,110],"type":"HArmor1x1","dir":0},{"pos":[-120,80],"type":"HArmor2x2","dir":0},{"pos":[120,80],"type":"HArmor2x2","dir":0},{"pos":[110,130],"type":"HArmor1x1Angle","dir":0},{"pos":[110,110],"type":"HArmor1x1","dir":0},{"pos":[-70,-150],"type":"Engine02","dir":0},{"pos":[70,-150],"type":"Engine02","dir":0},{"pos":[50,-170],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,-170],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,-140],"type":"HArmor1x2","dir":0},{"pos":[50,-140],"type":"HArmor1x2","dir":0},{"pos":[70,-100],"type":"HArmor1x2","dir":0},{"pos":[70,-60],"type":"HArmor1x2","dir":0},{"pos":[-70,-60],"type":"HArmor1x2","dir":0},{"pos":[-70,-100],"type":"HArmor1x2","dir":0},{"pos":[0,-170],"type":"Battery2x1","dir":0},{"pos":[-30,-170],"type":"HArmor1x1","dir":0},{"pos":[30,-170],"type":"HArmor1x1","dir":0},{"pos":[-50,170],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,180],"type":"Wing1x2","dir":0},{"pos":[30,180],"type":"Wing1x2","dir":0},{"pos":[0,190],"type":"HArmor1x2Font1","dir":0},{"pos":[50,170],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,150],"type":"HArmor1x1","dir":0},{"pos":[30,150],"type":"HArmor1x1","dir":0},{"pos":[0,-190],"type":"HArmor1x2Back1","dir":0},{"pos":[0,60],"type":"ReloaderMod","dir":0},{"pos":[-80,100],"type":"ReloaderMod","dir":0},{"pos":[80,60],"type":"DamageMod","dir":0},{"pos":[-80,60],"type":"BulletSpeedMod","dir":0},{"pos":[0,100],"type":"DampenerMod","dir":0},{"pos":[-40,80],"type":"WavePushTurret","dir":0},{"pos":[40,80],"type":"WavePushTurret","dir":0},{"pos":[-60,140],"type":"PDTurret","dir":0},{"pos":[60,140],"type":"PDTurret","dir":0},{"pos":[0,0],"type":"HeavyBeamTurret","dir":0},{"pos":[0,160],"type":"HeavyPDTurret","dir":0},{"pos":[80,0],"type":"PlasmaTurret","dir":0},{"pos":[-80,0],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Field # at start",1],["Field # when money over # at priority #",1,2000,999],["Field # at priority #",2,5],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","more expensive",300,2000],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","more expensive",100,2000],["@attackTypes enemy within #m","Attack",2000],["Stay in #m range of slot # units",500,1],["@capTypes Command Points within #m","Capture",10000]]},{"parts":[{"pos":[-40,0],"type":"EnergyTransfer","dir":0},{"pos":[40,0],"type":"Reactor2x2","dir":0},{"pos":[-40,40],"type":"CloakGenerator","dir":0},{"pos":[40,40],"type":"CloakGenerator","dir":0},{"pos":[-10,20],"type":"Reactor1x2","dir":0},{"pos":[10,10],"type":"Engine02","dir":0},{"pos":[0,50],"type":"Wing2x1","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",150],["Stay in #m range of slot # units",175,1],["Field # for # of ship in slot # at priority #",1,2,1,6],["Avoid #dps danger areas",10],["Goto @locationTypes","friendly spawn"],["Field # for # of ship in slot # at priority #",2,2,1,9],["Field # for # of ship in slot # at priority #",1,3,6,5]]},{"parts":[{"pos":[60,50],"type":"HArmor2x1","dir":0},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[0,60],"type":"Mount90","dir":0},{"pos":[0,0],"type":"Mount10Range","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[-80,20],"type":"Reactor2x2","dir":0},{"pos":[-30,50],"type":"Battery1x1","dir":0},{"pos":[80,20],"type":"Reactor2x2","dir":0},{"pos":[-90,50],"type":"HArmor1x1Angle","dir":0},{"pos":[90,50],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,70],"type":"Wing1x1Round","dir":0},{"pos":[-60,50],"type":"HArmor2x1","dir":0},{"pos":[0,-60],"type":"EnergyTransfer","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[-60,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[60,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[90,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[90,-10],"type":"HArmor1x1","dir":0},{"pos":[70,-20],"type":"HArmor1x2","dir":0},{"pos":[-70,-20],"type":"HArmor1x2","dir":0},{"pos":[-90,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-90,-10],"type":"HArmor1x1","dir":0},{"pos":[0,0],"type":"HeavyBeamTurret","dir":0},{"pos":[0,60],"type":"HeavyPDTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",50],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","more expensive",100,2000],["@attackTypes enemy within #m","Attack",2000],["Stay in #m range of slot # units",600,1],["Field # for # of ship in slot # at priority #",1,2,1,6]]},{"parts":[{"pos":[60,40],"type":"VArmor2x2","dir":0},{"pos":[-60,70],"type":"Wing2x1","dir":0},{"pos":[-20,-40],"type":"ReloaderMod","dir":0},{"pos":[-40,0],"type":"TargetingMod","dir":0},{"pos":[0,-80],"type":"Mount360Micro","dir":0},{"pos":[40,-80],"type":"Reactor2x2","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[20,70],"type":"HArmor2x1","dir":0},{"pos":[-40,-80],"type":"Mount360Micro","dir":0},{"pos":[-20,70],"type":"Reactor2x1","dir":0},{"pos":[-20,40],"type":"ReloaderMod","dir":0},{"pos":[60,70],"type":"Wing2x1","dir":0},{"pos":[20,40],"type":"BulletSpeedMod","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[-50,-40],"type":"HArmor1x2","dir":0},{"pos":[50,-40],"type":"HArmor1x2","dir":0},{"pos":[70,0],"type":"HArmor1x2","dir":0},{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[70,-90],"type":"Engine02","dir":0},{"pos":[-70,-90],"type":"Engine02","dir":0},{"pos":[70,-40],"type":"HArmor1x2","dir":0},{"pos":[-70,-40],"type":"HArmor1x2","dir":0},{"pos":[-60,40],"type":"HArmor2x2","dir":0},{"pos":[20,-40],"type":"ReloaderMod","dir":0},{"pos":[0,-80],"type":"PDTurret","dir":0},{"pos":[0,0],"type":"ArtilleryTurret","dir":0},{"pos":[-40,-80],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,2,1,7],["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","more arc",1,2300],["@attackTypes enemy that is @absoluteTypes then # within #m","Stay at range","more arc",1,2000],["Stayaway in #m range from slot # units",1900,1],["@capTypes Command Points within #m","Capture",1000],["@attackTypes enemy that is @absoluteTypes then # within #m","Circle","more expensive",100,10000],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",2,2,1,10],["Field # for # of ship in slot # at priority #",3,2,1,13]]},{"parts":[{"pos":[0,60],"type":"HArmor2x2","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[80,-20],"type":"BulletSpeedMod","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[0,-20],"type":"TargetingMod","dir":0},{"pos":[40,0],"type":"Mount10Range","dir":0},{"pos":[80,20],"type":"TargetingMod","dir":0},{"pos":[-40,0],"type":"Mount10Range","dir":0},{"pos":[-80,20],"type":"TargetingMod","dir":0},{"pos":[40,70],"type":"Wing2x1","dir":0},{"pos":[-40,70],"type":"Wing2x1","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[-40,50],"type":"HArmor2x1","dir":0},{"pos":[-90,50],"type":"HArmor1x1Angle","dir":0},{"pos":[90,50],"type":"HArmor1x1Angle","dir":0},{"pos":[40,50],"type":"HArmor2x1","dir":0},{"pos":[-70,50],"type":"HArmor1x1","dir":0},{"pos":[70,50],"type":"HArmor1x1","dir":0},{"pos":[-80,-20],"type":"TargetingMod","dir":0},{"pos":[0,-50],"type":"Reactor2x1","dir":0},{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[40,0],"type":"PlasmaTurret","dir":0},{"pos":[-40,0],"type":"BombGun","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,2,1,8],["Field # for # of ship in slot # at priority #",2,2,1,12],["Field # for # of ship in slot # at priority #",3,2,1,15],["Avoid over #damage shots",50],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","more expensive",500,2000],["@attackTypes enemy within #m","Attack",2000],["Stay in #m range of slot # units",600,1]]},{"parts":[{"pos":[30,30],"type":"Battery1x1","dir":0},{"pos":[-40,0],"type":"Mount30","dir":0},{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[0,-20],"type":"CloakGenerator","dir":0},{"pos":[-40,30],"type":"Battery2x1","dir":0},{"pos":[40,0],"type":"Mount30","dir":0},{"pos":[-30,-40],"type":"Engine03","dir":0},{"pos":[30,-30],"type":"Wing1x1Notch","dir":0},{"pos":[50,30],"type":"Wing1x1Round","dir":0},{"pos":[-40,0],"type":"EMPGun","dir":0},{"pos":[0,20],"type":"EMPGun","dir":0},{"pos":[40,0],"type":"EMPGun","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",33,"Find recharger"],["Stay in #m range of slot # units",1750,1],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","cloaked","---",1500],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","more expensive",100,1000],["@attackTypes enemy within #m","Kite",1000],["Stay in #m range of slot # units",1250,1],["When #% of energy, @chargeTypes",60,"Find recharger"],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",2,2,1,11],["Field # for # of ship in slot # at priority #",4,2,1,14],["Field # for # of @needTypes at priority #",1,3,"cloak counter need",6]]},{"parts":[{"pos":[-20,-40],"type":"CloakGenerator","dir":0},{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[-30,0],"type":"Reactor1x2","dir":0},{"pos":[10,-60],"type":"Engine03","dir":0},{"pos":[10,-30],"type":"Wing1x1Round","dir":0},{"pos":[0,0],"type":"RingTurret","dir":0}],"name":"","aiRules":[]},{"parts":[{"pos":[-80,-20],"type":"CloakGenerator","dir":0},{"pos":[0,-60],"type":"Engine07","dir":0},{"pos":[-80,20],"type":"Battery2x2","dir":0},{"pos":[80,20],"type":"Wing2x2","dir":0},{"pos":[80,-20],"type":"CloakGenerator","dir":0},{"pos":[0,-20],"type":"AOEWarhead","dir":0},{"pos":[-40,40],"type":"AOEWarhead","dir":0},{"pos":[0,20],"type":"AOEWarhead","dir":0},{"pos":[40,40],"type":"AOEWarhead","dir":0},{"pos":[-40,0],"type":"AOEWarhead","dir":0},{"pos":[-40,-40],"type":"AOEWarhead","dir":0},{"pos":[40,-40],"type":"AOEWarhead","dir":0},{"pos":[40,0],"type":"AOEWarhead","dir":0},{"pos":[0,60],"type":"ShapedWarhead","dir":0}],"name":"","aiRules":[]},{"parts":[{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[-40,0],"type":"Mount30","dir":0},{"pos":[40,0],"type":"Mount30","dir":0},{"pos":[-40,-30],"type":"Reactor2x1","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[0,-20],"type":"CloakGenerator","dir":0},{"pos":[-40,0],"type":"AutoTurret","dir":0},{"pos":[0,20],"type":"AutoTurret","dir":0},{"pos":[40,0],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,2,1,8],["Field # at start",1],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Guard",10000]]},{"parts":[{"pos":[0,-20],"type":"CloakGenerator","dir":0},{"pos":[0,20],"type":"Mount360Micro","dir":0},{"pos":[30,30],"type":"Wing1x1Notch","dir":0},{"pos":[-30,30],"type":"Wing1x1Notch","dir":0},{"pos":[-30,10],"type":"Reactor1x1","dir":0},{"pos":[30,10],"type":"Reactor1x1","dir":0},{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[0,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","more arc",1,600],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","---","---",600],["@attackTypes enemy within #m","Attack",600],["@capTypes Command Points within #m","Capture",1000],["@attackTypes enemy within #m","Circle",1100],["@capTypes Command Points within #m","Capture",10000],["Field # at start",1],["Try to field # every # seconds",1,100]]}];
ais.all.Razorback = [{"parts":[{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[-10,-10],"type":"Battery1x1","dir":0},{"pos":[30,-10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,-10],"type":"HArmor1x1Angle","dir":0}],"name":"","aiRules":[["Avoid everything"],["Avoid over #damage shots",20],["Field # at start",1],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",1,5]]},{"parts":[{"pos":[-10,-40],"type":"Engine03","dir":0},{"pos":[10,0],"type":"Battery1x2","dir":0},{"pos":[10,30],"type":"Wing1x1Round","dir":0},{"pos":[-20,0],"type":"Mount90","dir":0},{"pos":[30,-10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-50,-10],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-30,30],"type":"UArmor1x1Angle","dir":0},{"pos":[-20,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Attack",350],["@attackTypes enemy @unitTypes within #m","Attack","Scout",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Weaker",1000],["Field # at priority #",1,5],["Field # for # of enemy @unitTypes at priority #",1,1,"Fighter",2],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",1000],["When #% of energy, @chargeTypes",70,"Find recharger"],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of enemy @unitTypes at priority #",1,1,"Scout",3],["Try to field # every # seconds",1,30],["Field # at start",1]]},{"parts":[{"pos":[0,-60],"type":"Mount180","dir":0},{"pos":[90,90],"type":"HArmor1x1Angle","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[-30,-50],"type":"Engine02","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"BulletSpeedMod","dir":0},{"pos":[40,100],"type":"Reactor2x2","dir":0},{"pos":[-40,100],"type":"EnergyTransfer","dir":0},{"pos":[40,60],"type":"TargetingMod","dir":0},{"pos":[-40,60],"type":"TargetingMod","dir":0},{"pos":[80,60],"type":"HArmor2x2","dir":0},{"pos":[-90,90],"type":"HArmor1x1Angle","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[0,80],"type":"BulletSpeedMod","dir":0},{"pos":[80,20],"type":"HArmor2x2","dir":0},{"pos":[-80,60],"type":"HArmor2x2","dir":0},{"pos":[-80,20],"type":"HArmor2x2","dir":0},{"pos":[-50,130],"type":"Wing1x1Round","dir":0},{"pos":[50,130],"type":"Wing1x1Round","dir":0},{"pos":[-110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[110,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-90,-10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[90,-10],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,-30],"type":"HArmor2x1","dir":0},{"pos":[0,110],"type":"Battery2x1","dir":0},{"pos":[0,-60],"type":"PDTurret","dir":0},{"pos":[0,40],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,3,2,1],["Avoid over #damage shots",180],["Stay in #m range of slot # units",400,5],["@attackTypes enemy within #m","Kite",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Less HP",2500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Less Range",2500],["Find units that are out of energy"],["@capTypes Command Points within #m","Capture",1000],["Field # for # of ship in slot # at priority #",1,2,5,3],["Field # at priority #",1,5]]},{"parts":[{"pos":[30,-30],"type":"UArmor1x1AngleBack","dir":0},{"pos":[50,10],"type":"UArmor1x1Angle","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[10,-20],"type":"Engine03","dir":0},{"pos":[-10,-20],"type":"Engine03","dir":0},{"pos":[0,20],"type":"Mount270","dir":0},{"pos":[-30,10],"type":"OverKillAi","dir":0},{"pos":[-50,10],"type":"UArmor1x1Angle","dir":0},{"pos":[-30,-30],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[30,30],"type":"Wing1x1Notch","dir":0},{"pos":[-30,30],"type":"Wing1x1Notch","dir":0},{"pos":[0,20],"type":"BombGun","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid over #damage shots",20],["@attackTypes enemy @unitTypes within #m","Bomb","Battleship",800],["When #% of energy, @chargeTypes",80,"Find recharger"],["@attackTypes enemy @unitTypes within #m","Bomb","Battleship",10000],["@attackTypes enemy @unitTypes within #m","Bomb","Cruiser",10000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","More HP","Slower",1000],["Field # for # of enemy @unitTypes at priority #",1,1,"Battleship",1],["@capTypes Command Points within #m","Capture",10000],["Field # for # of enemy @unitTypes at priority #",1,1,"Cruiser",1],["Stay in #m range of slot # units",500,3],["Field # at priority #",1,3]]},{"parts":[{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[40,60],"type":"Reactor2x2","dir":0},{"pos":[-90,-50],"type":"Engine02","dir":0},{"pos":[-70,140],"type":"Wing1x2","dir":0},{"pos":[80,60],"type":"Mount30","dir":0},{"pos":[0,-40],"type":"Mount360","dir":0},{"pos":[70,140],"type":"Wing1x2","dir":0},{"pos":[0,0],"type":"ReloaderMod","dir":0},{"pos":[40,-60],"type":"TargetingMod","dir":0},{"pos":[-40,-60],"type":"TargetingMod","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[-80,60],"type":"Mount90","dir":0},{"pos":[100,-40],"type":"HArmor2x2","dir":0},{"pos":[-90,130],"type":"HArmor1x1Angle","dir":0},{"pos":[0,-80],"type":"TargetingMod","dir":0},{"pos":[90,130],"type":"HArmor1x1Angle","dir":0},{"pos":[110,110],"type":"HArmor1x1Angle","dir":0},{"pos":[-110,110],"type":"HArmor1x1Angle","dir":0},{"pos":[110,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-110,-40],"type":"HArmor1x2","dir":0},{"pos":[-110,-70],"type":"HArmor1x1AngleBack","dir":0},{"pos":[80,100],"type":"Reactor2x2","dir":0},{"pos":[0,120],"type":"Mount360","dir":0},{"pos":[-80,100],"type":"Reactor2x2","dir":0},{"pos":[-40,100],"type":"TargetingMod","dir":0},{"pos":[-40,140],"type":"ReloaderMod","dir":0},{"pos":[0,80],"type":"ReloaderMod","dir":0},{"pos":[40,140],"type":"TargetingMod","dir":0},{"pos":[40,100],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[100,0],"type":"HArmor2x2","dir":0},{"pos":[-100,0],"type":"HArmor2x2","dir":0},{"pos":[50,170],"type":"Wing1x1Round","dir":0},{"pos":[-50,170],"type":"Wing1x1Round","dir":0},{"pos":[50,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-130,-50],"type":"HArmor1x1Angle","dir":0},{"pos":[130,-50],"type":"HArmor1x1Angle","dir":0},{"pos":[-100,30],"type":"HArmor2x1","dir":0},{"pos":[100,30],"type":"HArmor2x1","dir":0},{"pos":[130,30],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,30],"type":"Battery1x1","dir":0},{"pos":[70,30],"type":"Battery1x1","dir":0},{"pos":[40,20],"type":"HArmor2x2","dir":0},{"pos":[-40,60],"type":"Battery2x2","dir":0},{"pos":[130,-10],"type":"HArmor1x1Angle","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[-70,-50],"type":"Engine02","dir":0},{"pos":[70,0],"type":"HArmor1x2","dir":0},{"pos":[70,-50],"type":"Engine02","dir":0},{"pos":[0,160],"type":"DamageMod","dir":0},{"pos":[-130,-10],"type":"HArmor1x1Angle","dir":0},{"pos":[-130,30],"type":"HArmor1x1Angle","dir":0},{"pos":[0,120],"type":"MissileTurret","dir":0},{"pos":[-80,60],"type":"FlackTurret","dir":0},{"pos":[0,40],"type":"HeavyPDTurret","dir":0},{"pos":[0,-40],"type":"PlasmaTurret","dir":0},{"pos":[80,60],"type":"BombGun","dir":0}],"name":"","aiRules":[["Field # at start",1],["Avoid over #damage shots",180],["Field # at priority #",2,2],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Weaker",1000],["When #% of energy, @chargeTypes",5,"Find recharger"],["@attackTypes enemy within #m","Attack",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","Less Range",1200],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Less Range","Stronger",1200],["@attackTypes enemy within #m","Ram",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Less DPS",10000],["@attackTypes enemy within #m","Attack",1500],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,60]]},"","","","",""];
ais.all.Rearguard = [{"parts":[{"pos":[-30,-10],"type":"Battery1x1","dir":0},{"pos":[10,-10],"type":"Reactor1x1","dir":0},{"pos":[-50,-20],"type":"Engine03","dir":0},{"pos":[50,-20],"type":"Engine03","dir":0},{"pos":[-10,-10],"type":"Reactor1x1","dir":0},{"pos":[20,-40],"type":"Mount360Micro","dir":0},{"pos":[-20,-40],"type":"Mount360Micro","dir":0},{"pos":[0,20],"type":"Mount90","dir":0},{"pos":[30,-10],"type":"UArmor1x1","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0},{"pos":[30,10],"type":"Wing1x1Round","dir":0},{"pos":[0,20],"type":"LightBeamTurret","dir":0},{"pos":[-20,-40],"type":"TorpTurret","dir":0},{"pos":[20,-40],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",5,"Rest"],["When #% of energy, @chargeTypes",10,"Find recharger"],["@attackTypes enemy within #m","Kite",510],["When #% of energy, @chargeTypes",20,"Rest"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","Less Brawling Value",1000],["@capTypes Command Points within #m","Capture",10000],["Field # at start",2],["Field # at priority #",1,2],["Try to field # every # seconds",2,30]]},{"parts":[{"pos":[40,-60],"type":"Mount360Micro","dir":0},{"pos":[0,-50],"type":"Battery2x1","dir":0},{"pos":[0,20],"type":"Mount90","dir":0},{"pos":[0,80],"type":"Mount30","dir":0},{"pos":[0,-20],"type":"TargetingMod","dir":0},{"pos":[-40,-60],"type":"Mount360Micro","dir":0},{"pos":[-70,10],"type":"Engine02","dir":0},{"pos":[90,10],"type":"Engine02","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[0,50],"type":"Reactor2x1","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"TargetingMod","dir":0},{"pos":[40,40],"type":"TargetingMod","dir":0},{"pos":[70,10],"type":"Engine02","dir":0},{"pos":[40,70],"type":"Reactor2x1","dir":0},{"pos":[-40,70],"type":"Reactor2x1","dir":0},{"pos":[-90,10],"type":"Engine02","dir":0},{"pos":[-70,60],"type":"Wing1x2","dir":0},{"pos":[70,60],"type":"Wing1x2","dir":0},{"pos":[-40,100],"type":"Mount90","dir":0},{"pos":[40,100],"type":"Mount90","dir":0},{"pos":[-40,100],"type":"PDTurret","dir":0},{"pos":[40,100],"type":"PDTurret","dir":0},{"pos":[0,80],"type":"TorpTurret","dir":0},{"pos":[-40,-60],"type":"FlackTurret","dir":0},{"pos":[40,-60],"type":"FlackTurret","dir":0},{"pos":[0,20],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Faster","Less Brawling Value",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","Less Range",2000],["@attackTypes enemy within #m","Attack",1500],["@capTypes Command Points within #m","Capture",10000],["Field # at start",1],["Try to field # every # seconds",1,25]]},{"parts":[{"pos":[-10,-90],"type":"Engine02","dir":0},{"pos":[-80,0],"type":"Mount360Micro","dir":0},{"pos":[-20,40],"type":"HArmor2x2","dir":0},{"pos":[20,40],"type":"HArmor2x2","dir":0},{"pos":[-20,-40],"type":"HArmor2x2","dir":0},{"pos":[40,0],"type":"HArmor2x2","dir":0},{"pos":[20,-40],"type":"HArmor2x2","dir":0},{"pos":[-40,0],"type":"HArmor2x2","dir":0},{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[-40,-80],"type":"Mount360Micro","dir":0},{"pos":[40,-80],"type":"Mount360Micro","dir":0},{"pos":[40,80],"type":"Mount360Micro","dir":0},{"pos":[-40,80],"type":"Mount360Micro","dir":0},{"pos":[80,0],"type":"Mount360Micro","dir":0},{"pos":[10,-90],"type":"Engine02","dir":0},{"pos":[-60,40],"type":"Reactor2x2","dir":0},{"pos":[60,40],"type":"Reactor2x2","dir":0},{"pos":[0,80],"type":"EnergyTransfer","dir":0},{"pos":[-50,-40],"type":"Wing1x2","dir":0},{"pos":[50,-40],"type":"Wing1x2","dir":0},{"pos":[-40,-80],"type":"AutoTurret","dir":0},{"pos":[40,-80],"type":"AutoTurret","dir":0},{"pos":[80,0],"type":"AutoTurret","dir":0},{"pos":[40,80],"type":"AutoTurret","dir":0},{"pos":[-40,80],"type":"AutoTurret","dir":0},{"pos":[-80,0],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","Slower",2000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Stronger","---",1000],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",1,6,1,1]]},{"parts":[{"pos":[0,0],"type":"Mount360Micro","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"PDTurret","dir":0}],"name":"","aiRules":[["Stayaway in #m range from slot # units",200,4],["Stay in #m range of slot # units",500,3],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More Range",899,2000],["Field # for # of ship in slot # at priority #",2,1,3,1],["Try to field # every # seconds",1,33],["@capTypes Command Points within #m","Capture",10000]]},"","","","","",""];
ais.all.RocketMan = [{"parts":[{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[80,-90],"type":"Reactor2x1","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[-30,-50],"type":"Battery1x1","dir":0},{"pos":[-50,-100],"type":"Engine04","dir":0},{"pos":[30,-80],"type":"Engine04","dir":0},{"pos":[50,-100],"type":"Engine04","dir":0},{"pos":[-30,-80],"type":"Engine04","dir":0},{"pos":[30,-50],"type":"Battery1x1","dir":0},{"pos":[-90,-70],"type":"Battery1x1","dir":0},{"pos":[-60,-60],"type":"Mount90","dir":0},{"pos":[90,-70],"type":"Battery1x1","dir":0},{"pos":[60,-60],"type":"Mount90","dir":0},{"pos":[-80,-90],"type":"Reactor2x1","dir":0},{"pos":[-90,-50],"type":"Wing1x1Round","dir":0},{"pos":[90,-50],"type":"Wing1x1Round","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[40,-20],"type":"Mount90","dir":0},{"pos":[-40,-20],"type":"Mount90","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[0,30],"type":"Reactor2x1","dir":0},{"pos":[-30,30],"type":"Wing1x1Round","dir":0},{"pos":[30,30],"type":"Wing1x1Round","dir":0},{"pos":[-50,10],"type":"Wing1x1Round","dir":0},{"pos":[50,10],"type":"Wing1x1Round","dir":0},{"pos":[10,-30],"type":"Battery1x1","dir":0},{"pos":[-10,-30],"type":"Battery1x1","dir":0},{"pos":[-60,-60],"type":"TorpTurret","dir":0},{"pos":[60,-60],"type":"TorpTurret","dir":0},{"pos":[40,-20],"type":"TorpTurret","dir":0},{"pos":[-40,-20],"type":"TorpTurret","dir":0},{"pos":[0,0],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",100,1],["@attackTypes enemy that is @absoluteTypes then # within #m","Stay at range","Slower",250,800],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",250,1200],["@capTypes Command Points within #m","Spread to",10000]]},"","","","","","","","",""];
ais.all.RushDown = [{"parts":[{"pos":[40,-30],"type":"Battery2x1","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[50,-60],"type":"Engine04","dir":0},{"pos":[-50,-60],"type":"Engine04","dir":0},{"pos":[-30,-60],"type":"Engine04","dir":0},{"pos":[0,-20],"type":"ReloaderMod","dir":0},{"pos":[30,-60],"type":"Engine04","dir":0},{"pos":[0,20],"type":"Mount270","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[0,60],"type":"DamageMod","dir":0},{"pos":[-40,-30],"type":"Battery2x1","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[-40,70],"type":"Battery2x1","dir":0},{"pos":[40,70],"type":"Battery2x1","dir":0},{"pos":[-70,60],"type":"VArmor1x2Corner4","dir":0},{"pos":[70,60],"type":"VArmor1x2Corner4","dir":0},{"pos":[-20,90],"type":"Wing2x1","dir":0},{"pos":[20,90],"type":"Wing2x1","dir":0},{"pos":[70,-60],"type":"Engine04","dir":0},{"pos":[-70,-60],"type":"Engine04","dir":0},{"pos":[70,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-70,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-70,20],"type":"VArmor1x2IBeam","dir":0},{"pos":[70,20],"type":"VArmor1x2IBeam","dir":0},{"pos":[0,20],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Field # at start",2],["Try to field # every # seconds",1,32],["Try to field # every # seconds",2,64],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","More expensive",500],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Capture",600],["Stay in #m range of slot # units",1500,2],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","More expensive",2000],["@attackTypes enemy within #m","Run-by",1000],["Stay in #m range of slot # units",500,2]]},{"parts":[{"pos":[-90,-30],"type":"Engine02","dir":0},{"pos":[-70,-30],"type":"Engine02","dir":0},{"pos":[0,-20],"type":"EnergyTransfer","dir":0},{"pos":[-40,-40],"type":"Reactor2x2","dir":0},{"pos":[-40,0],"type":"Reactor2x2","dir":0},{"pos":[40,0],"type":"Reactor2x2","dir":0},{"pos":[0,20],"type":"DamageMod","dir":0},{"pos":[-40,40],"type":"DamageMod","dir":0},{"pos":[0,60],"type":"Mount90","dir":0},{"pos":[40,40],"type":"DamageMod","dir":0},{"pos":[40,80],"type":"DamageMod","dir":0},{"pos":[-80,60],"type":"Mount90","dir":0},{"pos":[-40,80],"type":"DamageMod","dir":0},{"pos":[80,60],"type":"Mount90","dir":0},{"pos":[-80,20],"type":"DamageMod","dir":0},{"pos":[80,100],"type":"DamageMod","dir":0},{"pos":[-80,100],"type":"DamageMod","dir":0},{"pos":[70,-30],"type":"Engine02","dir":0},{"pos":[0,100],"type":"TargetingMod","dir":0},{"pos":[80,20],"type":"DamageMod","dir":0},{"pos":[90,-30],"type":"Engine02","dir":0},{"pos":[-120,60],"type":"Mount30","dir":0},{"pos":[120,60],"type":"Mount30","dir":0},{"pos":[110,10],"type":"Engine02","dir":0},{"pos":[-110,10],"type":"Engine02","dir":0},{"pos":[-40,120],"type":"Wing2x2","dir":0},{"pos":[40,120],"type":"Wing2x2","dir":0},{"pos":[0,130],"type":"HArmor2x1","dir":0},{"pos":[130,10],"type":"Engine02","dir":0},{"pos":[-130,10],"type":"Engine02","dir":0},{"pos":[0,-60],"type":"HArmor2x2","dir":0},{"pos":[-40,-80],"type":"HArmor2x2AngleBack","dir":0},{"pos":[0,-100],"type":"HArmor2x2Back1","dir":0},{"pos":[40,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-120,60],"type":"LightBeamTurret","dir":0},{"pos":[120,60],"type":"LightBeamTurret","dir":0},{"pos":[0,60],"type":"AutoTurret","dir":0},{"pos":[-80,60],"type":"AutoTurret","dir":0},{"pos":[80,60],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Field # at start",1],["Field # for # of ship in slot # at priority #",1,2,1,1],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Less Brawling Value","Slower",1500],["@attackTypes enemy within #m","Attack",400],["@capTypes Command Points within #m","Capture",1000],["Goto @locationTypes","Enemy Army Middle"],["Field # for # of ship in slot # at priority #",1,3,4,2]]},{"parts":[{"pos":[-10,-10],"type":"Reactor1x1","dir":0},{"pos":[-10,-40],"type":"Engine03","dir":0},{"pos":[-30,-10],"type":"Wing1x1Notch","dir":0},{"pos":[10,-10],"type":"Wing1x1Notch","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",1,20],["Field # at start",4],["@attackTypes enemy within #m","Flee",1000],["Avoid #dps danger areas",5],["Avoid over #damage shots",10],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,1,2,5],["Field # for # of ship in slot # at priority #",1,2,1,5]]},{"parts":[{"pos":[-10,10],"type":"Reactor1x1","dir":0},{"pos":[10,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[20,0],"type":"Mount90","dir":0},{"pos":[50,-10],"type":"Engine01","dir":0},{"pos":[20,40],"type":"Mount90","dir":0},{"pos":[-10,-10],"type":"Reactor1x1","dir":0},{"pos":[50,30],"type":"Wing1x1Round","dir":0},{"pos":[-10,-30],"type":"Battery1x1","dir":0},{"pos":[30,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[70,10],"type":"Wing1x1Round","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0},{"pos":[20,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,3,3,1],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Less DPS",30,600],["Stay in #m range of slot # units",500,3],["Avoid over #damage shots",20],["Avoid #dps danger areas",5],["@capTypes Command Points within #m","Capture",10000]]},"","","","","",""];
ais.all.ShieldMan = ["","","",{"parts":[{"pos":[-180,-20],"type":"ShieldGen2x2","dir":0},{"pos":[180,-20],"type":"ShieldGen2x2","dir":0},{"pos":[-170,-70],"type":"Engine02","dir":0},{"pos":[-110,10],"type":"Wing1x1Notch","dir":0},{"pos":[-130,10],"type":"Wing1x1Notch","dir":0},{"pos":[-90,10],"type":"Wing1x1Notch","dir":0},{"pos":[-70,10],"type":"Wing1x1Notch","dir":0},{"pos":[70,10],"type":"Wing1x1Notch","dir":0},{"pos":[90,10],"type":"Wing1x1Notch","dir":0},{"pos":[110,10],"type":"Wing1x1Notch","dir":0},{"pos":[130,10],"type":"Wing1x1Notch","dir":0},{"pos":[-150,10],"type":"Wing1x1Notch","dir":0},{"pos":[150,10],"type":"Wing1x1Notch","dir":0},{"pos":[0,10],"type":"Reactor2x1","dir":0},{"pos":[-180,60],"type":"ShieldGen2x2","dir":0},{"pos":[-180,20],"type":"ShieldGen2x2","dir":0},{"pos":[180,60],"type":"ShieldGen2x2","dir":0},{"pos":[180,20],"type":"ShieldGen2x2","dir":0},{"pos":[10,-30],"type":"Engine02","dir":0},{"pos":[-30,-30],"type":"Engine02","dir":0},{"pos":[30,-30],"type":"Engine02","dir":0},{"pos":[-10,-30],"type":"Engine02","dir":0},{"pos":[50,-10],"type":"HArmor1x1","dir":0},{"pos":[50,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[170,-70],"type":"Engine02","dir":0},{"pos":[-190,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[190,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[190,140],"type":"Wing1x2","dir":0},{"pos":[190,100],"type":"HArmor1x2","dir":0},{"pos":[-190,140],"type":"Wing1x2","dir":0},{"pos":[-190,100],"type":"HArmor1x2","dir":0},{"pos":[-20,30],"type":"HArmor2x1","dir":0},{"pos":[20,30],"type":"HArmor2x1","dir":0},{"pos":[-50,20],"type":"Wing1x2","dir":0},{"pos":[50,20],"type":"Wing1x2","dir":0},{"pos":[-30,10],"type":"HArmor1x1","dir":0},{"pos":[30,10],"type":"HArmor1x1","dir":0},{"pos":[-190,-60],"type":"HArmor1x2","dir":0},{"pos":[190,-60],"type":"HArmor1x2","dir":0},{"pos":[-50,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-50,-10],"type":"HArmor1x1","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",1,30],["Field # at start",2],["@capTypes Command Points within #m","Spread to",10000]]},"","","","","",""];
ais.all.Sidewinder = [{"parts":[{"pos":[30,120],"type":"Wing1x2","dir":0},{"pos":[-30,120],"type":"Wing1x2","dir":0},{"pos":[-60,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[60,-20],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-60,40],"type":"HArmor2x2","dir":0},{"pos":[60,80],"type":"HArmor2x2Angle","dir":0},{"pos":[-20,60],"type":"BulletSpeedMod","dir":0},{"pos":[60,40],"type":"HArmor2x2","dir":0},{"pos":[20,60],"type":"BulletSpeedMod","dir":0},{"pos":[-60,80],"type":"HArmor2x2Angle","dir":0},{"pos":[-60,10],"type":"Reactor2x1","dir":0},{"pos":[60,10],"type":"Reactor2x1","dir":0},{"pos":[30,30],"type":"Battery1x1","dir":0},{"pos":[0,130],"type":"ShieldGen2x1","dir":0},{"pos":[-30,30],"type":"Battery1x1","dir":0},{"pos":[-10,-30],"type":"Engine02","dir":0},{"pos":[10,-30],"type":"Engine02","dir":0},{"pos":[30,90],"type":"Battery1x1","dir":0},{"pos":[-30,90],"type":"Battery1x1","dir":0},{"pos":[-30,-10],"type":"Engine02","dir":0},{"pos":[30,-10],"type":"Engine02","dir":0},{"pos":[-90,60],"type":"Wing1x2","dir":0},{"pos":[-90,10],"type":"Engine02","dir":0},{"pos":[90,60],"type":"Wing1x2","dir":0},{"pos":[90,10],"type":"Engine02","dir":0},{"pos":[0,20],"type":"Mount270","dir":0},{"pos":[0,100],"type":"Mount360","dir":0},{"pos":[0,20],"type":"MissileTurret","dir":0},{"pos":[0,100],"type":"SidewinderTurret","dir":0}],"name":"","aiRules":[["Field # at start",1],["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Stay at range","Slower",300,800],["@attackTypes enemy within #m","Circle",900],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",300,1100],["Field # at priority #",5,2],["@capTypes command points within #m","Spread to",10000]]},{"parts":[{"pos":[40,60],"type":"Mount30","dir":0},{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[60,20],"type":"HArmor2x2Angle","dir":0},{"pos":[-30,140],"type":"Wing1x2","dir":0},{"pos":[30,30],"type":"Battery1x1","dir":0},{"pos":[-30,10],"type":"Battery1x1","dir":0},{"pos":[-60,20],"type":"HArmor2x2Angle","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[-40,-30],"type":"Reactor2x1","dir":0},{"pos":[70,-20],"type":"HArmor1x2","dir":0},{"pos":[-70,-20],"type":"HArmor1x2","dir":0},{"pos":[0,80],"type":"Mount90","dir":0},{"pos":[0,-40],"type":"Mount270","dir":0},{"pos":[-30,30],"type":"Battery1x1","dir":0},{"pos":[-40,100],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,-10],"type":"Reactor2x1","dir":0},{"pos":[30,140],"type":"Wing1x2","dir":0},{"pos":[40,-10],"type":"Reactor2x1","dir":0},{"pos":[40,100],"type":"HArmor2x2Angle","dir":0},{"pos":[40,-30],"type":"Reactor2x1","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[-40,60],"type":"Mount30","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[0,150],"type":"ShieldGen2x1","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[0,40],"type":"Mount180","dir":0},{"pos":[0,120],"type":"EnergyTransfer","dir":0},{"pos":[-60,-60],"type":"Mount90","dir":0},{"pos":[-60,-100],"type":"Mount90","dir":0},{"pos":[60,-60],"type":"Mount90","dir":0},{"pos":[60,-100],"type":"Mount90","dir":0},{"pos":[-100,-80],"type":"BulletSpeedMod","dir":0},{"pos":[100,-80],"type":"BulletSpeedMod","dir":0},{"pos":[-100,-40],"type":"HArmor2x2Angle","dir":0},{"pos":[100,-40],"type":"HArmor2x2Angle","dir":0},{"pos":[0,0],"type":"PDTurret","dir":0},{"pos":[0,80],"type":"TorpTurret","dir":0},{"pos":[0,40],"type":"TorpTurret","dir":0},{"pos":[40,60],"type":"TorpTurret","dir":0},{"pos":[-40,60],"type":"TorpTurret","dir":0},{"pos":[0,-40],"type":"MissileTurret","dir":0},{"pos":[-60,-100],"type":"SidewinderTurret","dir":0},{"pos":[-60,-60],"type":"SidewinderTurret","dir":0},{"pos":[60,-60],"type":"SidewinderTurret","dir":0},{"pos":[60,-100],"type":"SidewinderTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",1,1],["@attackTypes enemy within #m","Attack",1200],["Field # for # of ship in slot # at priority #",1,2,1,1],["@capTypes command points within #m","Capture",10000]]},"","","","","","","",""];
ais.all.SiegeCore = [{"parts":[{"pos":[40,20],"type":"HArmor2x2Angle","dir":0},{"pos":[40,-20],"type":"Mount90","dir":0},{"pos":[10,-30],"type":"Engine02","dir":0},{"pos":[0,20],"type":"Mount360Micro","dir":0},{"pos":[30,-50],"type":"Wing1x1Round","dir":0},{"pos":[-10,-20],"type":"Reactor1x2","dir":0},{"pos":[-10,-50],"type":"ShieldGen1x1","dir":0},{"pos":[0,20],"type":"HeavyPDTurret","dir":0},{"pos":[40,-20],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",500,3],["Stayaway in #m range from slot # units",200,2],["@attackTypes enemy within #m","Attack",2000],["@capTypes Command Points within #m","Capture",10000],["Field # at start",2],["Try to field # every # seconds",1,30],["Field # for # of ship in slot # at priority #",1,1,2,3]]},{"parts":[{"pos":[-20,-10],"type":"Battery2x1","dir":0},{"pos":[40,20],"type":"HArmor2x2Angle","dir":0},{"pos":[40,-20],"type":"Mount90","dir":0},{"pos":[10,-30],"type":"Engine02","dir":0},{"pos":[-40,20],"type":"Mount90","dir":0},{"pos":[0,20],"type":"Mount360Micro","dir":0},{"pos":[-50,-10],"type":"Wing1x1Round","dir":0},{"pos":[-20,-30],"type":"HArmor2x1","dir":0},{"pos":[0,20],"type":"PDTurret","dir":0},{"pos":[-40,20],"type":"AutoTurret","dir":0},{"pos":[40,-20],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",1000],["Stayaway in #m range from slot # units",300,1],["Stay in #m range of slot # units",700,2],["@attackTypes enemy within #m","Attack",1500],["@capTypes Command Points within #m","Capture",10000],["Field # at start",2],["Field # for # of ship in slot # at priority #",2,1,3,2],["Try to field # every # seconds",1,40]]},{"parts":[{"pos":[-60,80],"type":"Mount360Micro","dir":0},{"pos":[100,0],"type":"Mount360Micro","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[-20,-40],"type":"ReloaderMod","dir":0},{"pos":[-20,40],"type":"TargetingMod","dir":0},{"pos":[20,-40],"type":"ReloaderMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[-70,-10],"type":"Engine02","dir":0},{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[-60,40],"type":"HArmor2x2Angle","dir":0},{"pos":[20,40],"type":"TargetingMod","dir":0},{"pos":[-20,70],"type":"HArmor2x1","dir":0},{"pos":[20,70],"type":"HArmor2x1","dir":0},{"pos":[60,40],"type":"HArmor2x2Angle","dir":0},{"pos":[0,100],"type":"Mount270","dir":0},{"pos":[60,80],"type":"Mount360Micro","dir":0},{"pos":[-100,0],"type":"Mount360Micro","dir":0},{"pos":[-30,100],"type":"Reactor1x2","dir":0},{"pos":[30,100],"type":"Reactor1x2","dir":0},{"pos":[90,-50],"type":"Engine02","dir":0},{"pos":[-90,-50],"type":"Engine02","dir":0},{"pos":[-40,-80],"type":"Reactor2x2","dir":0},{"pos":[40,-80],"type":"Reactor2x2","dir":0},{"pos":[0,-80],"type":"EnergyTransfer","dir":0},{"pos":[-50,-40],"type":"Wing1x2","dir":0},{"pos":[50,-40],"type":"Wing1x2","dir":0},{"pos":[0,100],"type":"PDTurret","dir":0},{"pos":[-100,0],"type":"AutoTurret","dir":0},{"pos":[-60,80],"type":"AutoTurret","dir":0},{"pos":[60,80],"type":"AutoTurret","dir":0},{"pos":[100,0],"type":"AutoTurret","dir":0},{"pos":[0,0],"type":"ArtilleryTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Flee",1000],["Avoid #dps danger areas",5],["Stay in #m range of slot # units",700,4],["Stayaway in #m range from slot # units",700,5],["Find units that are out of energy"],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",100,3000],["@attackTypes enemy within #m","Attack",3000],["@capTypes Command Points within #m","Capture",10000],["Field # at start",1],["Field # at priority #",1,2],["Try to field # every # seconds",1,60],["Field # for # of ship in slot # at priority #",1,4,2,1]]},{"parts":[{"pos":[10,0],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-30,10],"type":"Reactor1x1","dir":0},{"pos":[-10,-30],"type":"Engine01","dir":0},{"pos":[-10,20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-30,40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-30,-10],"type":"Reactor1x1","dir":0},{"pos":[10,40],"type":"VArmor1x2Corner4","dir":0},{"pos":[-10,60],"type":"VArmor1x2Corner4","dir":0},{"pos":[-30,80],"type":"VArmor1x2Corner4","dir":0},{"pos":[-50,10],"type":"Wing1x1Round","dir":0},{"pos":[-50,30],"type":"Wing1x1Round","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Flee",500],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","Faster",250,1000],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",1,2],["Try to field # every # seconds",1,30]]},{"parts":[{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[-30,-10],"type":"Engine02","dir":0},{"pos":[0,40],"type":"EnergyTransfer","dir":0},{"pos":[-30,30],"type":"Battery1x1","dir":0},{"pos":[-30,50],"type":"Wing1x1Round","dir":0},{"pos":[30,0],"type":"VArmor1x1CornerBack","dir":0},{"pos":[30,40],"type":"VArmor1x2Corner4","dir":0},{"pos":[-10,-40],"type":"VArmor1x2End","dir":0},{"pos":[10,-40],"type":"VArmor1x2End","dir":0}],"name":"","aiRules":[["Avoid everything"],["@capTypes Command Points within #m","Capture",600],["Find units that are out of energy"],["Stay in #m range of slot # units",650,3],["Try to field # every # seconds",1,35]]},"","","","",""];
ais.all.Slowpoke = ["","","","","","",{"parts":[{"pos":[-20,-90],"type":"Reactor2x1","dir":0},{"pos":[110,10],"type":"Battery1x1","dir":0},{"pos":[60,60],"type":"HArmor2x2Angle","dir":0},{"pos":[70,30],"type":"Battery1x1","dir":0},{"pos":[-70,30],"type":"Battery1x1","dir":0},{"pos":[40,20],"type":"Mount90","dir":0},{"pos":[-40,20],"type":"Mount90","dir":0},{"pos":[0,20],"type":"Mount90","dir":0},{"pos":[20,60],"type":"Mount90","dir":0},{"pos":[-20,60],"type":"Mount90","dir":0},{"pos":[-60,60],"type":"HArmor2x2Angle","dir":0},{"pos":[40,100],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,100],"type":"HArmor2x2Angle","dir":0},{"pos":[40,-60],"type":"HArmor2x2Angle","dir":0},{"pos":[0,-40],"type":"Mount90","dir":0},{"pos":[-40,-60],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,-20],"type":"Mount90","dir":0},{"pos":[40,-20],"type":"Mount90","dir":0},{"pos":[80,0],"type":"Mount90","dir":0},{"pos":[20,-160],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-20,-160],"type":"HArmor2x2AngleBack","dir":0},{"pos":[20,-90],"type":"Reactor2x1","dir":0},{"pos":[160,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[-120,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[120,-40],"type":"HArmor2x2AngleBack","dir":0},{"pos":[140,20],"type":"HArmor2x2Angle","dir":0},{"pos":[120,-10],"type":"Reactor2x1","dir":0},{"pos":[0,110],"type":"Reactor2x1","dir":0},{"pos":[100,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,-120],"type":"HArmor2x2Angle","dir":0},{"pos":[40,-120],"type":"HArmor2x2Angle","dir":0},{"pos":[10,90],"type":"Battery1x1","dir":0},{"pos":[-10,90],"type":"Battery1x1","dir":0},{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[0,-10],"type":"Reactor2x1","dir":0},{"pos":[-100,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,0],"type":"Mount90","dir":0},{"pos":[-110,10],"type":"Battery1x1","dir":0},{"pos":[-120,-10],"type":"Reactor2x1","dir":0},{"pos":[0,-110],"type":"Reactor2x1","dir":0},{"pos":[0,-130],"type":"Reactor2x1","dir":0},{"pos":[-160,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[-140,20],"type":"HArmor2x2Angle","dir":0},{"pos":[-90,-50],"type":"Engine02","dir":0},{"pos":[-70,-50],"type":"Engine02","dir":0},{"pos":[70,-50],"type":"Engine02","dir":0},{"pos":[90,-50],"type":"Engine02","dir":0},{"pos":[-50,-150],"type":"Wing1x1Notch","dir":0},{"pos":[50,-150],"type":"Wing1x1Notch","dir":0},{"pos":[-40,20],"type":"LightBeamTurret","dir":0},{"pos":[40,-20],"type":"LightBeamTurret","dir":0},{"pos":[20,60],"type":"LightBeamTurret","dir":0},{"pos":[-40,-20],"type":"LightBeamTurret","dir":0},{"pos":[0,20],"type":"LightBeamTurret","dir":0},{"pos":[0,-40],"type":"LightBeamTurret","dir":0},{"pos":[40,20],"type":"LightBeamTurret","dir":0},{"pos":[-20,60],"type":"LightBeamTurret","dir":0},{"pos":[80,0],"type":"LightBeamTurret","dir":0},{"pos":[-80,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",10,1],["@attackTypes enemy within #m","Attack",1000],["@capTypes Command Points within #m","Spread to",10000]]},{"parts":[{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0}],"name":"","aiRules":[["Try to field # every # seconds",1,30],["Field # at start",2],["@capTypes Command Points within #m","Spread to",10000]]},"",""];
ais.all.SparkShower = [{"parts":[{"pos":[-40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[-50,-50],"type":"Wing1x1Round","dir":0},{"pos":[50,-50],"type":"Wing1x1Round","dir":0},{"pos":[-10,-70],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"TeslaTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",1200,2],["@attackTypes enemy within #m","Kite",2000],["Avoid everything"],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,1],["Try to field # every # seconds",1,30]]},{"parts":[{"pos":[-70,-10],"type":"Engine02","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[-40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[70,-10],"type":"Engine02","dir":0},{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"ReloaderMod","dir":0},{"pos":[-50,-60],"type":"Battery1x2","dir":0},{"pos":[50,-60],"type":"Battery1x2","dir":0},{"pos":[-70,40],"type":"Wing1x2","dir":0},{"pos":[70,40],"type":"Wing1x2","dir":0},{"pos":[0,0],"type":"TeslaTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of friendly units",500],["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Kite",1500],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,35],["Field # when money over # at priority #",1,1000,1],["Field # at start",1]]},{"parts":[{"pos":[30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[10,-30],"type":"Battery1x1","dir":0},{"pos":[-30,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[30,-10],"type":"Wing1x1Notch","dir":0},{"pos":[0,0],"type":"Mount360Micro","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[-20,40],"type":"Mount30","dir":0},{"pos":[20,40],"type":"Mount360Micro","dir":0},{"pos":[0,0],"type":"TorpTurret","dir":0},{"pos":[20,40],"type":"TorpTurret","dir":0},{"pos":[-20,40],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",800,4],["Avoid over #damage shots",20],["@attackTypes enemy within #m","Attack",1500],["Stay in #m range of slot # units",400,4],["Avoid everything"],["Goto @locationTypes","Friendly Army Middle"],["Field # for # of ship in slot # at priority #",2,1,4,1],["Try to field # every # seconds",1,25]]},{"parts":[{"pos":[50,-50],"type":"Wing1x1Round","dir":0},{"pos":[40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[0,-40],"type":"TargetingMod","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"TargetingMod","dir":0},{"pos":[40,20],"type":"TargetingMod","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[-40,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[0,40],"type":"ReloaderMod","dir":0},{"pos":[-50,-50],"type":"Wing1x1Round","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[0,70],"type":"Reactor2x1","dir":0},{"pos":[-80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,10],"type":"Reactor2x1","dir":0},{"pos":[80,10],"type":"Reactor2x1","dir":0},{"pos":[0,-80],"type":"EnergyTransfer","dir":0},{"pos":[0,100],"type":"Mount360","dir":0},{"pos":[80,-10],"type":"Reactor2x1","dir":0},{"pos":[-80,-10],"type":"Reactor2x1","dir":0},{"pos":[0,100],"type":"PDTurret","dir":0},{"pos":[0,0],"type":"TeslaTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",800,1],["Avoid everything"],["Stay in #m range of slot # units",1200,2],["Field # at priority #",1,2],["Try to field # every # seconds",1,40]]},{"parts":[{"pos":[0,40],"type":"Mount360Micro","dir":0},{"pos":[10,-40],"type":"Engine04","dir":0},{"pos":[-30,-20],"type":"VArmor1x1CornerBack","dir":0},{"pos":[0,10],"type":"Battery2x1","dir":0},{"pos":[50,-10],"type":"Wing1x1Round","dir":0},{"pos":[-50,-10],"type":"Wing1x1Round","dir":0},{"pos":[50,-40],"type":"Engine04","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[0,-10],"type":"Battery2x1","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[30,-10],"type":"UArmor1x1","dir":0},{"pos":[-40,20],"type":"Mount90","dir":0},{"pos":[40,20],"type":"Mount90","dir":0},{"pos":[-50,-40],"type":"Engine04","dir":0},{"pos":[-40,20],"type":"LightBeamTurret","dir":0},{"pos":[0,40],"type":"LightBeamTurret","dir":0},{"pos":[40,20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",26,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Stronger","More Brawling Value",1400],["@attackTypes enemy within #m","Attack",550],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","Slower",1000],["Avoid #dps danger areas",5],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",1,1],["Try to field # every # seconds",1,30]]},"","","","",""];
ais.all.StaticAI = ["","","","","","","","","",""];
ais.all.SuperBelfry = [{"parts":[{"pos":[-80,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,-20],"type":"HArmor2x2","dir":0},{"pos":[-40,-60],"type":"Reactor2x2","dir":0},{"pos":[-50,-110],"type":"Engine02","dir":0},{"pos":[-30,-110],"type":"Engine02","dir":0},{"pos":[50,-110],"type":"Engine02","dir":0},{"pos":[30,-110],"type":"Engine02","dir":0},{"pos":[40,-60],"type":"Reactor2x2","dir":0},{"pos":[-40,20],"type":"DamageMod","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[0,0],"type":"Mount270","dir":0},{"pos":[40,20],"type":"DamageMod","dir":0},{"pos":[-80,60],"type":"Wing2x2","dir":0},{"pos":[0,40],"type":"DamageMod","dir":0},{"pos":[80,-100],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,60],"type":"Wing2x2","dir":0},{"pos":[-80,-20],"type":"HArmor2x2","dir":0},{"pos":[-80,20],"type":"HArmor2x2","dir":0},{"pos":[80,20],"type":"HArmor2x2","dir":0},{"pos":[-80,-60],"type":"ShieldGen2x2","dir":0},{"pos":[80,-60],"type":"ShieldGen2x2","dir":0},{"pos":[0,-80],"type":"HArmor2x2","dir":0},{"pos":[0,-40],"type":"DamageMod","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[0,70],"type":"Battery2x1","dir":0},{"pos":[0,-110],"type":"Battery2x1","dir":0},{"pos":[-40,70],"type":"Reactor2x1","dir":0},{"pos":[40,70],"type":"Reactor2x1","dir":0},{"pos":[-50,50],"type":"ShieldGen1x1","dir":0},{"pos":[-30,50],"type":"ShieldGen1x1","dir":0},{"pos":[30,50],"type":"ShieldGen1x1","dir":0},{"pos":[50,50],"type":"ShieldGen1x1","dir":0},{"pos":[0,0],"type":"RingTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",150],["@attackTypes enemy within #m","Ram",1000],["@capTypes Command Points within #m","Capture",10000],["Field # at priority #",100,1],["Field # at start",2]]},{"parts":[{"pos":[10,10],"type":"Wing1x1Round","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0},{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",1,30],["Field # at start",2]]},"","","","","","","",""];
ais.all.SwarmLord = [{"parts":[{"pos":[40,-80],"type":"Reactor2x2","dir":0},{"pos":[-120,-20],"type":"ReloaderMod","dir":0},{"pos":[0,40],"type":"Reactor2x2","dir":0},{"pos":[0,-40],"type":"Reactor2x2","dir":0},{"pos":[40,0],"type":"Reactor2x2","dir":0},{"pos":[-40,0],"type":"Reactor2x2","dir":0},{"pos":[-80,0],"type":"Reactor2x2","dir":0},{"pos":[0,0],"type":"Reactor2x2","dir":0},{"pos":[80,0],"type":"Reactor2x2","dir":0},{"pos":[40,40],"type":"EnergyTransfer","dir":0},{"pos":[-40,40],"type":"EnergyTransfer","dir":0},{"pos":[-80,40],"type":"TargetingMod","dir":0},{"pos":[40,-40],"type":"EnergyTransfer","dir":0},{"pos":[-40,-40],"type":"EnergyTransfer","dir":0},{"pos":[-120,40],"type":"TargetingMod","dir":0},{"pos":[-120,120],"type":"TargetingMod","dir":0},{"pos":[-80,120],"type":"TargetingMod","dir":0},{"pos":[-60,80],"type":"ReloaderMod","dir":0},{"pos":[-140,80],"type":"ReloaderMod","dir":0},{"pos":[60,80],"type":"ReloaderMod","dir":0},{"pos":[80,120],"type":"TargetingMod","dir":0},{"pos":[120,120],"type":"TargetingMod","dir":0},{"pos":[80,40],"type":"TargetingMod","dir":0},{"pos":[120,40],"type":"TargetingMod","dir":0},{"pos":[140,80],"type":"ReloaderMod","dir":0},{"pos":[20,80],"type":"TargetingMod","dir":0},{"pos":[-20,80],"type":"TargetingMod","dir":0},{"pos":[40,120],"type":"ReloaderMod","dir":0},{"pos":[-40,120],"type":"ReloaderMod","dir":0},{"pos":[-20,160],"type":"TargetingMod","dir":0},{"pos":[20,160],"type":"TargetingMod","dir":0},{"pos":[-80,-80],"type":"TargetingMod","dir":0},{"pos":[100,80],"type":"Mount360","dir":0},{"pos":[-80,-40],"type":"TargetingMod","dir":0},{"pos":[-100,80],"type":"Mount360","dir":0},{"pos":[0,120],"type":"Mount360","dir":0},{"pos":[80,-40],"type":"TargetingMod","dir":0},{"pos":[80,-80],"type":"TargetingMod","dir":0},{"pos":[-120,-60],"type":"Mount360","dir":0},{"pos":[120,-60],"type":"Mount360","dir":0},{"pos":[160,-80],"type":"TargetingMod","dir":0},{"pos":[160,-40],"type":"TargetingMod","dir":0},{"pos":[120,-100],"type":"ReloaderMod","dir":0},{"pos":[-120,-100],"type":"ReloaderMod","dir":0},{"pos":[-160,-40],"type":"TargetingMod","dir":0},{"pos":[-160,-80],"type":"TargetingMod","dir":0},{"pos":[120,-20],"type":"ReloaderMod","dir":0},{"pos":[-40,-80],"type":"Reactor2x2","dir":0},{"pos":[0,-80],"type":"Reactor2x2","dir":0},{"pos":[-120,10],"type":"Reactor2x1","dir":0},{"pos":[120,10],"type":"Reactor2x1","dir":0},{"pos":[0,-120],"type":"EnergyTransfer","dir":0},{"pos":[150,-110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-150,-110],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-150,-10],"type":"HArmor1x1Angle","dir":0},{"pos":[150,-10],"type":"HArmor1x1Angle","dir":0},{"pos":[-150,50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[150,50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[50,150],"type":"HArmor1x1Angle","dir":0},{"pos":[-50,150],"type":"HArmor1x1Angle","dir":0},{"pos":[-150,110],"type":"HArmor1x1Angle","dir":0},{"pos":[150,110],"type":"HArmor1x1Angle","dir":0},{"pos":[-90,-130],"type":"Engine02","dir":0},{"pos":[-70,-130],"type":"Engine02","dir":0},{"pos":[-50,-130],"type":"Engine02","dir":0},{"pos":[50,-130],"type":"Engine02","dir":0},{"pos":[70,-130],"type":"Engine02","dir":0},{"pos":[90,-130],"type":"Engine02","dir":0},{"pos":[110,-130],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-110,-130],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-150],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-30,-150],"type":"HArmor1x1AngleBack","dir":0},{"pos":[190,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[190,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[-190,-90],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-190,-30],"type":"HArmor1x1Angle","dir":0},{"pos":[30,190],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,190],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,-130],"type":"ShieldGen1x1","dir":0},{"pos":[-30,-110],"type":"ShieldGen1x1","dir":0},{"pos":[30,-110],"type":"ShieldGen1x1","dir":0},{"pos":[30,-130],"type":"ShieldGen1x1","dir":0},{"pos":[-190,-70],"type":"ShieldGen1x1","dir":0},{"pos":[-190,-50],"type":"ShieldGen1x1","dir":0},{"pos":[190,-70],"type":"ShieldGen1x1","dir":0},{"pos":[190,-50],"type":"ShieldGen1x1","dir":0},{"pos":[10,190],"type":"ShieldGen1x1","dir":0},{"pos":[-10,190],"type":"ShieldGen1x1","dir":0},{"pos":[0,-160],"type":"ShieldGen2x2","dir":0},{"pos":[-100,80],"type":"PDTurret","dir":0},{"pos":[0,120],"type":"PDTurret","dir":0},{"pos":[100,80],"type":"PDTurret","dir":0},{"pos":[-120,-60],"type":"PDTurret","dir":0},{"pos":[120,-60],"type":"PDTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",100],["Goto @locationTypes","Friendly Army Middle"]]},{"parts":[{"pos":[40,40],"type":"Mount30","dir":0},{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[10,-40],"type":"Engine04","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[0,-10],"type":"Battery2x1","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[-40,0],"type":"Mount30","dir":0},{"pos":[40,0],"type":"Mount30","dir":0},{"pos":[-40,40],"type":"Mount30","dir":0},{"pos":[-50,-30],"type":"Wing1x1Round","dir":0},{"pos":[50,-30],"type":"Wing1x1Round","dir":0},{"pos":[-40,0],"type":"TorpTurret","dir":0},{"pos":[-40,40],"type":"TorpTurret","dir":0},{"pos":[0,20],"type":"TorpTurret","dir":0},{"pos":[40,40],"type":"TorpTurret","dir":0},{"pos":[40,0],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",700,1],["@attackTypes enemy within #m","Attack",1000],["Stayaway in #m range from slot # units",400,2],["Try to field # every # seconds",1,35],["Field # at start",2]]},{"parts":[{"pos":[90,0],"type":"Engine04","dir":0},{"pos":[0,100],"type":"ReloaderMod","dir":0},{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[-50,-20],"type":"Engine04","dir":0},{"pos":[10,-40],"type":"Engine04","dir":0},{"pos":[20,-10],"type":"Reactor2x1","dir":0},{"pos":[-20,-10],"type":"Reactor2x1","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[40,10],"type":"Reactor2x1","dir":0},{"pos":[-40,10],"type":"Reactor2x1","dir":0},{"pos":[50,-20],"type":"Engine04","dir":0},{"pos":[70,0],"type":"Engine04","dir":0},{"pos":[-70,0],"type":"Engine04","dir":0},{"pos":[0,20],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[0,60],"type":"Mount270","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[-40,80],"type":"TargetingMod","dir":0},{"pos":[40,80],"type":"TargetingMod","dir":0},{"pos":[-90,0],"type":"Engine04","dir":0},{"pos":[110,0],"type":"Engine04","dir":0},{"pos":[-110,0],"type":"Engine04","dir":0},{"pos":[-70,30],"type":"Reactor1x1","dir":0},{"pos":[-70,60],"type":"Battery1x2","dir":0},{"pos":[70,60],"type":"Battery1x2","dir":0},{"pos":[-100,40],"type":"ShieldGen2x2","dir":0},{"pos":[100,40],"type":"ShieldGen2x2","dir":0},{"pos":[-30,110],"type":"ShieldGen1x1","dir":0},{"pos":[30,110],"type":"ShieldGen1x1","dir":0},{"pos":[-60,110],"type":"Wing2x1","dir":0},{"pos":[60,110],"type":"Wing2x1","dir":0},{"pos":[-90,80],"type":"Wing1x2","dir":0},{"pos":[90,80],"type":"Wing1x2","dir":0},{"pos":[70,30],"type":"Battery1x1","dir":0},{"pos":[-70,90],"type":"Battery1x1","dir":0},{"pos":[70,90],"type":"Battery1x1","dir":0},{"pos":[0,60],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",30],["When #% of energy, @chargeTypes",55,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Wiggle","More Range",700,2000],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","Slower",140,3000],["Stay in #m range of slot # units",800,1],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,15],["Field # at start",1]]},{"parts":[{"pos":[30,-20],"type":"Battery1x2","dir":0},{"pos":[40,60],"type":"DamageMod","dir":0},{"pos":[0,40],"type":"Mount90","dir":0},{"pos":[0,0],"type":"DamageMod","dir":0},{"pos":[0,-40],"type":"Engine07","dir":0},{"pos":[-40,20],"type":"DamageMod","dir":0},{"pos":[0,80],"type":"DamageMod","dir":0},{"pos":[-40,60],"type":"DamageMod","dir":0},{"pos":[40,20],"type":"DamageMod","dir":0},{"pos":[-30,-20],"type":"Battery1x2","dir":0},{"pos":[-60,-10],"type":"Battery2x1","dir":0},{"pos":[60,-10],"type":"Battery2x1","dir":0},{"pos":[-70,60],"type":"Wing1x2","dir":0},{"pos":[-70,20],"type":"Wing1x2","dir":0},{"pos":[70,60],"type":"Wing1x2","dir":0},{"pos":[70,20],"type":"Wing1x2","dir":0},{"pos":[0,40],"type":"RingTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",45,"Find recharger"],["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Bomb","More HP",250,2000],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,20],["Field # at start",2]]},{"parts":[{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0},{"pos":[-30,-10],"type":"Wing1x1Notch","dir":0},{"pos":[20,0],"type":"Mount30","dir":0},{"pos":[20,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",400,7],["Stay in #m range of slot # units",500,6],["@attackTypes enemy within #m","Attack",520],["When #% of energy, @chargeTypes",30,"Find recharger"],["Avoid over #damage shots",5],["Avoid #dps danger areas",5],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",1,2],["Field # at start",3],["Try to field # every # seconds",20,70]]},{"parts":[{"pos":[40,-20],"type":"HArmor2x2","dir":0},{"pos":[-70,20],"type":"Battery1x2","dir":0},{"pos":[-50,-20],"type":"Battery1x2","dir":0},{"pos":[-40,20],"type":"Mount30","dir":0},{"pos":[-30,-30],"type":"Engine02","dir":0},{"pos":[40,20],"type":"Mount30","dir":0},{"pos":[0,60],"type":"Mount30","dir":0},{"pos":[0,-20],"type":"Battery2x2","dir":0},{"pos":[-40,60],"type":"HArmor2x2","dir":0},{"pos":[0,20],"type":"Mount30","dir":0},{"pos":[40,60],"type":"HArmor2x2","dir":0},{"pos":[-70,-10],"type":"Wing1x1Round","dir":0},{"pos":[-70,60],"type":"HArmor1x2","dir":0},{"pos":[0,-50],"type":"HArmor2x1","dir":0},{"pos":[-50,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-50],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-40,20],"type":"AutoTurret","dir":0},{"pos":[0,20],"type":"AutoTurret","dir":0},{"pos":[0,60],"type":"AutoTurret","dir":0},{"pos":[40,20],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",500,7],["@attackTypes enemy within #m","Attack",1000],["Stay in #m range of slot # units",500,1],["Avoid over #damage shots",50],["Avoid #dps danger areas",5],["Try to field # every # seconds",1,90]]},{"parts":[{"pos":[-70,30],"type":"ShieldGen1x1","dir":0},{"pos":[-110,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-60,-40],"type":"HArmor2x2","dir":0},{"pos":[40,-40],"type":"HArmor2x2","dir":0},{"pos":[-80,0],"type":"HArmor2x2","dir":0},{"pos":[-40,0],"type":"HArmor2x2","dir":0},{"pos":[-40,40],"type":"HArmor2x2","dir":0},{"pos":[80,0],"type":"HArmor2x2","dir":0},{"pos":[40,0],"type":"HArmor2x2","dir":0},{"pos":[0,40],"type":"HArmor2x2","dir":0},{"pos":[40,40],"type":"HArmor2x2","dir":0},{"pos":[-30,-30],"type":"Reactor1x1","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[-90,-50],"type":"ShieldGen1x1","dir":0},{"pos":[-90,-30],"type":"ShieldGen1x1","dir":0},{"pos":[70,-50],"type":"ShieldGen1x1","dir":0},{"pos":[90,-30],"type":"ShieldGen1x1","dir":0},{"pos":[70,-30],"type":"ShieldGen1x1","dir":0},{"pos":[-110,-30],"type":"ShieldGen1x1","dir":0},{"pos":[-90,30],"type":"ShieldGen1x1","dir":0},{"pos":[-110,10],"type":"ShieldGen1x1","dir":0},{"pos":[-110,30],"type":"ShieldGen1x1","dir":0},{"pos":[-70,50],"type":"ShieldGen1x1","dir":0},{"pos":[-70,70],"type":"ShieldGen1x1","dir":0},{"pos":[-50,70],"type":"ShieldGen1x1","dir":0},{"pos":[-30,70],"type":"ShieldGen1x1","dir":0},{"pos":[-10,70],"type":"ShieldGen1x1","dir":0},{"pos":[10,70],"type":"ShieldGen1x1","dir":0},{"pos":[30,70],"type":"ShieldGen1x1","dir":0},{"pos":[50,70],"type":"ShieldGen1x1","dir":0},{"pos":[70,70],"type":"ShieldGen1x1","dir":0},{"pos":[70,50],"type":"ShieldGen1x1","dir":0},{"pos":[70,30],"type":"ShieldGen1x1","dir":0},{"pos":[90,30],"type":"ShieldGen1x1","dir":0},{"pos":[110,30],"type":"ShieldGen1x1","dir":0},{"pos":[110,10],"type":"ShieldGen1x1","dir":0},{"pos":[110,-10],"type":"ShieldGen1x1","dir":0},{"pos":[110,-30],"type":"ShieldGen1x1","dir":0},{"pos":[-10,-10],"type":"Engine02","dir":0},{"pos":[10,-10],"type":"Engine02","dir":0},{"pos":[-50,-70],"type":"Wing1x1Round","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,1,6,1],["Stay in #m range of slot # units",1000,6],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More Range",1005,800],["When Shields down to #%, flee",10],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More Range",900,3000],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More Range",500,3000],["@capTypes Command Points within #m","Capture",10000]]},{"parts":[],"name":"","aiRules":[]},"",""];
ais.all.Tank = [{"parts":[{"pos":[-50,20],"type":"HArmor1x2","dir":0},{"pos":[30,0],"type":"Engine04","dir":0},{"pos":[-20,40],"type":"Mount90","dir":0},{"pos":[-50,50],"type":"Wing1x1Round","dir":0},{"pos":[50,50],"type":"Wing1x1Round","dir":0},{"pos":[20,50],"type":"Reactor2x1","dir":0},{"pos":[50,20],"type":"HArmor1x2","dir":0},{"pos":[10,0],"type":"Engine04","dir":0},{"pos":[-20,0],"type":"Mount90","dir":0},{"pos":[10,30],"type":"Battery1x1","dir":0},{"pos":[30,30],"type":"Battery1x1","dir":0},{"pos":[-20,40],"type":"LightBeamTurret","dir":0},{"pos":[-20,0],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","Slower",850],["@attackTypes enemy within #m","Attack",750],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",2],["Try to field # every # seconds",1,25],["Try to field # every # seconds",1,60]]},{"parts":[{"pos":[-60,0],"type":"HArmor2x2Angle","dir":0},{"pos":[-70,-40],"type":"HArmor1x2","dir":0},{"pos":[-30,0],"type":"HArmor1x2","dir":0},{"pos":[60,0],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,40],"type":"HArmor2x2Angle","dir":0},{"pos":[40,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-100,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[30,0],"type":"HArmor1x2","dir":0},{"pos":[100,-20],"type":"HArmor2x2Angle","dir":0},{"pos":[0,20],"type":"Mount90","dir":0},{"pos":[-10,60],"type":"HArmor1x2","dir":0},{"pos":[30,70],"type":"Wing1x1Round","dir":0},{"pos":[-30,70],"type":"Wing1x1Round","dir":0},{"pos":[-40,-40],"type":"Mount90","dir":0},{"pos":[40,-40],"type":"Mount90","dir":0},{"pos":[70,-40],"type":"HArmor1x2","dir":0},{"pos":[10,60],"type":"HArmor1x2","dir":0},{"pos":[0,-10],"type":"Reactor2x1","dir":0},{"pos":[0,-30],"type":"Reactor2x1","dir":0},{"pos":[-30,-80],"type":"Engine04","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[30,-80],"type":"Engine04","dir":0},{"pos":[-100,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-60,-80],"type":"HArmor2x2AngleBack","dir":0},{"pos":[60,-80],"type":"HArmor2x2AngleBack","dir":0},{"pos":[100,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-90,10],"type":"Wing1x1Round","dir":0},{"pos":[90,10],"type":"Wing1x1Round","dir":0},{"pos":[40,-40],"type":"LightBeamTurret","dir":0},{"pos":[-40,-40],"type":"LightBeamTurret","dir":0},{"pos":[0,20],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",600],["@capTypes Command Points within #m","Capture",10000],["Field # at start",1],["Try to field # every # seconds",1,30]]},"",{"parts":[],"name":"","aiRules":[]},"","","","",{"parts":[],"name":"","aiRules":[]},""];
ais.all.Targets = [{"parts":[{"pos":[30,0],"type":"HArmor1x2","dir":0},{"pos":[10,-40],"type":"Engine04","dir":0},{"pos":[20,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[-30,0],"type":"HArmor1x2","dir":0},{"pos":[-20,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[50,-10],"type":"Wing1x1Notch","dir":0},{"pos":[-50,-10],"type":"Wing1x1Notch","dir":0},{"pos":[0,0],"type":"Battery2x2","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Spread to",10000],["Field # at start",2],["Try to field # every # seconds",2,40]]},{},{},{},{},{},{},{},{},{}];
ais.all.Tempest = [{"parts":[{"pos":[100,-60],"type":"TargetingMod","dir":0},{"pos":[-100,-60],"type":"TargetingMod","dir":0},{"pos":[40,0],"type":"Reactor2x2","dir":0},{"pos":[0,40],"type":"Reactor2x2","dir":0},{"pos":[0,-40],"type":"Reactor2x2","dir":0},{"pos":[-40,0],"type":"Reactor2x2","dir":0},{"pos":[40,-40],"type":"Reactor2x2","dir":0},{"pos":[40,40],"type":"Reactor2x2","dir":0},{"pos":[-40,-40],"type":"Reactor2x2","dir":0},{"pos":[-40,40],"type":"Reactor2x2","dir":0},{"pos":[0,80],"type":"Reactor2x2","dir":0},{"pos":[0,-80],"type":"Reactor2x2","dir":0},{"pos":[-80,0],"type":"Reactor2x2","dir":0},{"pos":[80,0],"type":"Reactor2x2","dir":0},{"pos":[0,0],"type":"ShieldGen2x2","dir":0},{"pos":[-70,30],"type":"ShieldGen1x1","dir":0},{"pos":[-70,50],"type":"ShieldGen1x1","dir":0},{"pos":[-70,70],"type":"ShieldGen1x1","dir":0},{"pos":[30,70],"type":"ShieldGen1x1","dir":0},{"pos":[-50,70],"type":"ShieldGen1x1","dir":0},{"pos":[-30,70],"type":"ShieldGen1x1","dir":0},{"pos":[50,70],"type":"ShieldGen1x1","dir":0},{"pos":[70,70],"type":"ShieldGen1x1","dir":0},{"pos":[70,50],"type":"ShieldGen1x1","dir":0},{"pos":[70,30],"type":"ShieldGen1x1","dir":0},{"pos":[70,-30],"type":"ShieldGen1x1","dir":0},{"pos":[50,-70],"type":"ShieldGen1x1","dir":0},{"pos":[70,-50],"type":"ShieldGen1x1","dir":0},{"pos":[70,-70],"type":"ShieldGen1x1","dir":0},{"pos":[30,-70],"type":"ShieldGen1x1","dir":0},{"pos":[-30,-70],"type":"ShieldGen1x1","dir":0},{"pos":[-50,-70],"type":"ShieldGen1x1","dir":0},{"pos":[-70,-70],"type":"ShieldGen1x1","dir":0},{"pos":[-70,-50],"type":"ShieldGen1x1","dir":0},{"pos":[-70,-30],"type":"ShieldGen1x1","dir":0},{"pos":[-100,60],"type":"DamageMod","dir":0},{"pos":[-140,60],"type":"DamageMod","dir":0},{"pos":[-120,100],"type":"Mount360","dir":0},{"pos":[100,60],"type":"DamageMod","dir":0},{"pos":[140,60],"type":"DamageMod","dir":0},{"pos":[120,100],"type":"Mount360","dir":0},{"pos":[120,-100],"type":"Mount360","dir":0},{"pos":[-140,140],"type":"TargetingMod","dir":0},{"pos":[-120,-100],"type":"Mount360","dir":0},{"pos":[100,140],"type":"TargetingMod","dir":0},{"pos":[-160,100],"type":"TargetingMod","dir":0},{"pos":[-100,140],"type":"TargetingMod","dir":0},{"pos":[-140,-140],"type":"DamageMod","dir":0},{"pos":[140,140],"type":"TargetingMod","dir":0},{"pos":[160,100],"type":"TargetingMod","dir":0},{"pos":[-100,-140],"type":"DamageMod","dir":0},{"pos":[100,-140],"type":"DamageMod","dir":0},{"pos":[140,-140],"type":"DamageMod","dir":0},{"pos":[160,-100],"type":"TargetingMod","dir":0},{"pos":[140,-60],"type":"TargetingMod","dir":0},{"pos":[-140,-60],"type":"TargetingMod","dir":0},{"pos":[-160,-100],"type":"TargetingMod","dir":0},{"pos":[-50,-110],"type":"Engine01","dir":0},{"pos":[-30,-110],"type":"Engine01","dir":0},{"pos":[-10,-130],"type":"Engine01","dir":0},{"pos":[30,-110],"type":"Engine01","dir":0},{"pos":[50,-110],"type":"Engine01","dir":0},{"pos":[10,-130],"type":"Engine01","dir":0},{"pos":[-80,-100],"type":"ReloaderMod","dir":0},{"pos":[80,-100],"type":"ReloaderMod","dir":0},{"pos":[80,100],"type":"ReloaderMod","dir":0},{"pos":[-80,100],"type":"ReloaderMod","dir":0},{"pos":[-120,0],"type":"Mount360","dir":0},{"pos":[120,0],"type":"Mount360","dir":0},{"pos":[-160,0],"type":"Mount360","dir":0},{"pos":[160,0],"type":"Mount360","dir":0},{"pos":[-70,-150],"type":"Engine01","dir":0},{"pos":[70,-150],"type":"Engine01","dir":0},{"pos":[-30,100],"type":"Wing1x2","dir":0},{"pos":[-50,100],"type":"Wing1x2","dir":0},{"pos":[30,100],"type":"Wing1x2","dir":0},{"pos":[50,100],"type":"Wing1x2","dir":0},{"pos":[-10,120],"type":"Wing1x2","dir":0},{"pos":[10,120],"type":"Wing1x2","dir":0},{"pos":[170,140],"type":"Wing1x2","dir":0},{"pos":[-170,140],"type":"Wing1x2","dir":0},{"pos":[-170,-60],"type":"Wing1x2","dir":0},{"pos":[170,-60],"type":"Wing1x2","dir":0},{"pos":[-90,30],"type":"Wing1x1Angle","dir":0},{"pos":[-110,30],"type":"Wing1x1Angle","dir":0},{"pos":[-130,30],"type":"Wing1x1Angle","dir":0},{"pos":[-150,30],"type":"Wing1x1Angle","dir":0},{"pos":[90,30],"type":"Wing1x1Angle","dir":0},{"pos":[110,30],"type":"Wing1x1Angle","dir":0},{"pos":[130,30],"type":"Wing1x1Angle","dir":0},{"pos":[150,30],"type":"Wing1x1Angle","dir":0},{"pos":[150,-30],"type":"Wing1x1Angle","dir":0},{"pos":[130,-30],"type":"Wing1x1Angle","dir":0},{"pos":[110,-30],"type":"Wing1x1Angle","dir":0},{"pos":[90,-30],"type":"Wing1x1Angle","dir":0},{"pos":[-90,-30],"type":"Wing1x1Angle","dir":0},{"pos":[-110,-30],"type":"Wing1x1Angle","dir":0},{"pos":[-130,-30],"type":"Wing1x1Angle","dir":0},{"pos":[-150,-30],"type":"Wing1x1Angle","dir":0},{"pos":[-170,30],"type":"Wing1x1Angle","dir":0},{"pos":[170,30],"type":"Wing1x1Angle","dir":0},{"pos":[120,0],"type":"FlackTurret","dir":0},{"pos":[-160,0],"type":"FlackTurret","dir":0},{"pos":[160,0],"type":"FlackTurret","dir":0},{"pos":[-120,0],"type":"FlackTurret","dir":0},{"pos":[-120,-100],"type":"PlasmaTurret","dir":0},{"pos":[-120,100],"type":"PlasmaTurret","dir":0},{"pos":[120,100],"type":"PlasmaTurret","dir":0},{"pos":[120,-100],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",80],["When #% of energy, @chargeTypes",50,"Rest"],["@attackTypes enemy that is @absoluteTypes then # within #m","Kite","More expensive",400,1500],["Goto @locationTypes","Friendly Army Middle"],["@capTypes Command Points within #m","Capture",10000]]},{"parts":[{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[30,10],"type":"HArmor1x1Angle","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[10,-30],"type":"Reactor1x1","dir":0},{"pos":[30,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-10,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[0,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",300],["@capTypes Command Points within #m","Capture",1000],["Avoid over #damage shots",20],["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",20,30]]},{"parts":[{"pos":[40,40],"type":"HArmor2x2","dir":0},{"pos":[40,0],"type":"HArmor2x2","dir":0},{"pos":[-10,-10],"type":"Battery1x1","dir":0},{"pos":[10,-10],"type":"Engine02","dir":0},{"pos":[-40,0],"type":"HArmor2x2","dir":0},{"pos":[0,40],"type":"Mount30","dir":0},{"pos":[-10,10],"type":"Reactor1x1","dir":0},{"pos":[-40,40],"type":"HArmor2x2","dir":0},{"pos":[0,70],"type":"HArmor2x1","dir":0},{"pos":[-30,70],"type":"Wing1x1Round","dir":0},{"pos":[30,70],"type":"Wing1x1Round","dir":0},{"pos":[0,40],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",1500,1],["@attackTypes enemy within #m","Attack",2000],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",4],["Try to field # every # seconds",5,50]]},{"parts":[],"name":"","aiRules":[]},{},{},{},{"parts":[],"name":"","aiRules":[]},{},{}];
ais.all.ThePounder = [{"parts":[{"pos":[70,-10],"type":"Battery1x1","dir":0},{"pos":[40,90],"type":"Wing2x1","dir":0},{"pos":[0,20],"type":"Mount360","dir":0},{"pos":[-40,70],"type":"Battery2x1","dir":0},{"pos":[40,70],"type":"Battery2x1","dir":0},{"pos":[-40,0],"type":"ReloaderMod","dir":0},{"pos":[-40,-40],"type":"Battery2x2","dir":0},{"pos":[40,-40],"type":"Battery2x2","dir":0},{"pos":[-40,90],"type":"Wing2x1","dir":0},{"pos":[-70,20],"type":"Battery1x2","dir":0},{"pos":[70,60],"type":"Wing1x2","dir":0},{"pos":[-70,60],"type":"Wing1x2","dir":0},{"pos":[-70,-10],"type":"Battery1x1","dir":0},{"pos":[70,20],"type":"Battery1x2","dir":0},{"pos":[0,-60],"type":"Engine07","dir":0},{"pos":[0,-20],"type":"ReloaderMod","dir":0},{"pos":[0,90],"type":"Battery2x1","dir":0},{"pos":[40,0],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"DamageMod","dir":0},{"pos":[0,60],"type":"ReloaderMod","dir":0},{"pos":[-70,-40],"type":"UArmor1x2","dir":0},{"pos":[70,-40],"type":"UArmor1x2","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[0,20],"type":"HeavyBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",40,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","Less HP",400,300],["Avoid over #damage shots",100],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","Less HP",400,700],["Avoid over #damage shots",50],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Slower","More Brawling Value",1100],["Stay in #m range of slot # units",5000,4],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","Slower",1200],["@capTypes Command Points within #m","Capture",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Slower","Less Brawling Value",2000],["@capTypes Command Points within #m","Capture",2000],["@capTypes Command Points within #m","Protect",3000],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,2,7,1],["Field # for # of ship in slot # at priority #",2,3,7,1]]},{"parts":[{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[-10,10],"type":"Wing1x1Notch","dir":0},{"pos":[30,10],"type":"Wing1x1Notch","dir":0},{"pos":[10,10],"type":"Reactor1x1","dir":0}],"name":"","aiRules":[["Field # at start",1],["@attackTypes enemy within #m","Flee",500],["@attackTypes enemy within #m","Flee",800],["@attackTypes enemy within #m","Flee",1000],["@attackTypes enemy within #m","Flee",1600],["Avoid over #damage shots",5],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",2,2],["Field # at priority #",2,4],["Try to field # every # seconds",1,44]]},{"parts":[{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[30,10],"type":"Wing1x1Angle","dir":0},{"pos":[30,-10],"type":"Battery1x1","dir":0},{"pos":[10,-30],"type":"UArmor1x1","dir":0},{"pos":[-10,-30],"type":"UArmor1x1AngleBack","dir":0},{"pos":[0,0],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Ram",250],["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",25,"Find recharger"],["@attackTypes enemy within #m","Flee",750],["@attackTypes enemy within #m","Kite",1000],["@capTypes Command Points within #m","Guard",2000],["@capTypes Command Points within #m","Spread to",2000],["@attackTypes enemy within #m","Backstab",2000],["Stay in #m range of slot # units",600,8],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",5,2,5,4]]},{"parts":[{"pos":[110,30],"type":"Engine02","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[-70,-10],"type":"Battery1x1","dir":0},{"pos":[80,80],"type":"Mount30","dir":0},{"pos":[90,0],"type":"HArmor1x2","dir":0},{"pos":[40,120],"type":"Mount30","dir":0},{"pos":[-40,120],"type":"Mount30","dir":0},{"pos":[-40,80],"type":"Mount30","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[-80,80],"type":"Mount30","dir":0},{"pos":[-80,120],"type":"Mount30","dir":0},{"pos":[80,120],"type":"Mount30","dir":0},{"pos":[40,80],"type":"Mount30","dir":0},{"pos":[-10,130],"type":"Wing1x1Round","dir":0},{"pos":[-70,10],"type":"Battery1x1","dir":0},{"pos":[-110,80],"type":"Wing1x2","dir":0},{"pos":[10,130],"type":"Wing1x1Round","dir":0},{"pos":[70,0],"type":"Reactor1x2","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[80,40],"type":"Mount30","dir":0},{"pos":[10,90],"type":"HArmor1x1","dir":0},{"pos":[10,110],"type":"OverKillAi","dir":0},{"pos":[-30,40],"type":"HArmor1x2","dir":0},{"pos":[-10,100],"type":"HArmor1x2","dir":0},{"pos":[-50,40],"type":"HArmor1x2","dir":0},{"pos":[50,40],"type":"HArmor1x2","dir":0},{"pos":[-80,40],"type":"Mount30","dir":0},{"pos":[80,-40],"type":"Mount30","dir":0},{"pos":[-110,30],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[30,40],"type":"HArmor1x2","dir":0},{"pos":[-40,-20],"type":"ReloaderMod","dir":0},{"pos":[-40,10],"type":"Reactor2x1","dir":0},{"pos":[0,-20],"type":"Mount270","dir":0},{"pos":[40,-20],"type":"ReloaderMod","dir":0},{"pos":[50,10],"type":"Battery1x1","dir":0},{"pos":[30,10],"type":"HArmor1x1","dir":0},{"pos":[10,70],"type":"HArmor1x1","dir":0},{"pos":[-10,70],"type":"HArmor1x1","dir":0},{"pos":[0,20],"type":"Mount180","dir":0},{"pos":[110,80],"type":"Wing1x2","dir":0},{"pos":[0,50],"type":"Battery2x1","dir":0},{"pos":[0,-60],"type":"Mount30","dir":0},{"pos":[-80,-40],"type":"Reactor2x2","dir":0},{"pos":[-90,0],"type":"HArmor1x2","dir":0},{"pos":[0,-20],"type":"PDTurret","dir":0},{"pos":[0,-60],"type":"LightBeamTurret","dir":0},{"pos":[-80,40],"type":"TorpTurret","dir":0},{"pos":[-80,80],"type":"TorpTurret","dir":0},{"pos":[80,40],"type":"TorpTurret","dir":0},{"pos":[-40,80],"type":"TorpTurret","dir":0},{"pos":[-40,120],"type":"TorpTurret","dir":0},{"pos":[-80,120],"type":"TorpTurret","dir":0},{"pos":[40,80],"type":"TorpTurret","dir":0},{"pos":[80,80],"type":"TorpTurret","dir":0},{"pos":[80,120],"type":"TorpTurret","dir":0},{"pos":[80,-40],"type":"TorpTurret","dir":0},{"pos":[0,20],"type":"FlackTurret","dir":0},{"pos":[40,120],"type":"BombGun","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",400],["Avoid over #damage shots",150],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More expensive",300,650],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","Slower",180,900],["Avoid over #damage shots",50],["When #% of energy, @chargeTypes",20,"Rest"],["@capTypes Command Points within #m","Capture",1200],["@attackTypes enemy @unitTypes within #m","Ram","Carrier",1600],["@attackTypes enemy @unitTypes within #m","Ram","Battleship",1600],["@attackTypes enemy @unitTypes within #m","Ram","Cruiser",1600],["@attackTypes enemy @unitTypes within #m","Ram","Destroyer",1600],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",300,1600],["@capTypes Command Points within #m","Capture",750],["Stay in #m range of slot # units",600,4],["Stay in #m range of slot # units",1200,8],["@capTypes Command Points within #m","Capture",3000],["When #% of energy, @chargeTypes",40,"Rest"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","---",1800],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","---","More expensive",1800],["@capTypes Command Points within #m","Capture",90000],["Field # at start",2],["Field # at priority #",1,1],["Field # at priority #",2,3],["Field # at priority #",3,6],["Field # at priority #",2,7],["Field # at priority #",2,8]]},{"parts":[{"pos":[10,10],"type":"Battery1x1","dir":0},{"pos":[-10,10],"type":"Wing1x1Round","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[10,-50],"type":"Battery1x1","dir":0},{"pos":[30,-10],"type":"Wing1x1Notch","dir":0},{"pos":[30,-30],"type":"UArmor1x1","dir":0},{"pos":[30,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[0,-20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy within #m","Attack",350],["Avoid #dps danger areas",50],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",800],["@attackTypes enemy @unitTypes within #m","Attack","Bomber",800],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",800],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","More Range",1000],["@attackTypes enemy @unitTypes within #m","Attack","Interceptor",800],["@attackTypes enemy @unitTypes within #m","Attack","Scout",800],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",800],["@capTypes Command Points within #m","Spread to",1500],["@capTypes Command Points within #m","Protect",2500],["Stay in #m range of slot # units",500,4],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",2000],["@attackTypes enemy @unitTypes within #m","Attack","Bomber",2000],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",2000],["@attackTypes enemy @unitTypes within #m","Attack","Interceptor",2000],["@attackTypes enemy @unitTypes within #m","Attack","Scout",2000],["@capTypes Command Points within #m","Spread to",10000],["Try to field # every # seconds",1,44],["Try to field # every # seconds",1,54]]},{"parts":[{"pos":[0,-20],"type":"Mount30","dir":0},{"pos":[10,-50],"type":"Battery1x1","dir":0},{"pos":[-10,-60],"type":"Engine03","dir":0},{"pos":[-10,10],"type":"UArmor1x1","dir":0},{"pos":[10,10],"type":"Wing1x1Notch","dir":0},{"pos":[-30,-50],"type":"Wing1x1Notch","dir":0},{"pos":[0,-20],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",260],["Avoid over #damage shots",20],["Stay in #m range of friendly units",2500],["When #% of energy, @chargeTypes",15,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","More Brawling Value","---",1700],["@capTypes Command Points within #m","Protect",2500],["@attackTypes enemy @unitTypes within #m","Attack","Scout",3000],["@attackTypes enemy @unitTypes within #m","Attack","Swarmer",3000],["@attackTypes enemy @unitTypes within #m","Attack","Fighter",3000],["@attackTypes enemy @unitTypes within #m","Attack","Interceptor",3000],["@attackTypes enemy @unitTypes within #m","Attack","Bomber",3000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Faster","---",3000],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,1,8,4],["Field # for # of ship in slot # at priority #",1,2,5,7],["Field # at start",1]]},{"parts":[{"pos":[-20,20],"type":"Mount30","dir":0},{"pos":[-10,-10],"type":"Battery1x1","dir":0},{"pos":[-30,50],"type":"Wing1x1Round","dir":0},{"pos":[-10,50],"type":"Battery1x1","dir":0},{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[10,-10],"type":"Wing1x1Notch","dir":0},{"pos":[-20,20],"type":"RingTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Ram",350],["Avoid over #damage shots",22],["Stay in #m range of slot # units",4000,4],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","---",750],["@attackTypes enemy @unitTypes within #m","Ram","Carrier",1000],["@attackTypes enemy @unitTypes within #m","Ram","Battleship",1000],["@attackTypes enemy @unitTypes within #m","Ram","Cruiser",1000],["@attackTypes enemy @unitTypes within #m","Ram","Destroyer",1000],["@attackTypes enemy within #m","Ram",750],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","---","More expensive",3000],["@attackTypes enemy within #m","Backstab",3000],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",4,2,5,4]]},{"parts":[{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[80,-20],"type":"Reactor2x2","dir":0},{"pos":[0,0],"type":"Mount270","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[-70,-60],"type":"HArmor1x2","dir":0},{"pos":[-40,-20],"type":"TargetingMod","dir":0},{"pos":[-30,60],"type":"Wing1x2","dir":0},{"pos":[40,20],"type":"DamageMod","dir":0},{"pos":[-80,-20],"type":"Reactor2x2","dir":0},{"pos":[50,50],"type":"Wing1x1Angle","dir":0},{"pos":[-50,50],"type":"Wing1x1Round","dir":0},{"pos":[30,-70],"type":"Engine01","dir":0},{"pos":[0,80],"type":"EnergyTransfer","dir":0},{"pos":[40,-20],"type":"TargetingMod","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[0,40],"type":"BulletSpeedMod","dir":0},{"pos":[-40,20],"type":"ReloaderMod","dir":0},{"pos":[0,0],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",100],["@attackTypes enemy within #m","Ram",350],["Stay in #m range of slot # units",800,4],["@attackTypes enemy within #m","Flee",1200],["Avoid over #damage shots",50],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More expensive",300,1200],["Avoid over #damage shots",21],["@capTypes Command Points within #m","Capture",1000],["@capTypes Command Points within #m","Protect",1000],["Stay in #m range of slot # units",400,4],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Faster",200,2000],["@capTypes Command Points within #m","Guard",1000],["Goto @locationTypes","Friendly Spawn"],["Field # at priority #",1,2],["Field # at priority #",2,7]]},{"parts":[{"pos":[10,-20],"type":"Engine04","dir":0},{"pos":[-10,10],"type":"Wing1x1Notch","dir":0},{"pos":[30,10],"type":"Wing1x1Notch","dir":0},{"pos":[10,10],"type":"Reactor1x1","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",5],["@attackTypes enemy within #m","Flee",600],["Avoid #dps danger areas",5],["@attackTypes enemy within #m","Flee",860],["Stay in #m range of slot # units",1000,4],["@attackTypes enemy within #m","Flee",1300],["Stayaway in #m range from slot # units",200,9],["@attackTypes enemy that is @absoluteTypes then # within #m","Circle","More Range",1000,1400],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More Range",1000,5000],["@attackTypes enemy within #m","Flee",1600],["@capTypes Command Points within #m","Spread to",1000],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,1,8,2],["Field # for # of ship in slot # at priority #",2,2,4,5],["Field # for # of ship in slot # at priority #",1,1,1,5]]},""];
ais.all.TorpMan = [{"parts":[{"pos":[0,80],"type":"Mount270","dir":0},{"pos":[-70,0],"type":"Wing1x2","dir":0},{"pos":[0,20],"type":"Mount270","dir":0},{"pos":[-40,-20],"type":"Mount270","dir":0},{"pos":[40,-20],"type":"Mount270","dir":0},{"pos":[-30,20],"type":"Reactor1x2","dir":0},{"pos":[30,60],"type":"Wing1x2","dir":0},{"pos":[30,20],"type":"Reactor1x2","dir":0},{"pos":[-30,60],"type":"Wing1x2","dir":0},{"pos":[70,0],"type":"Wing1x2","dir":0},{"pos":[0,50],"type":"HArmor2x1","dir":0},{"pos":[0,-10],"type":"HArmor2x1","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[0,-30],"type":"Reactor2x1","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[-70,-60],"type":"Engine04","dir":0},{"pos":[70,-60],"type":"Engine04","dir":0},{"pos":[-70,-30],"type":"HArmor1x1","dir":0},{"pos":[70,-30],"type":"HArmor1x1","dir":0},{"pos":[-40,-20],"type":"TorpTurret","dir":0},{"pos":[40,-20],"type":"TorpTurret","dir":0},{"pos":[0,20],"type":"TorpTurret","dir":0},{"pos":[0,80],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Field # at priority #",100,2],["@attackTypes enemy that is @absoluteTypes then # within #m","Flee","Slower",100,600],["@capTypes Command Points within #m","Capture",200],["@attackTypes enemy within #m","Circle",1100],["@capTypes Command Points within #m","Capture",10000]]},"",{"parts":[],"name":"","aiRules":[]},"","","","","","",""];
ais.all.TorpSupport = [{"parts":[{"pos":[0,-10],"type":"Reactor2x1","dir":0},{"pos":[-50,-10],"type":"Wing1x1Round","dir":0},{"pos":[0,20],"type":"Mount90","dir":0},{"pos":[40,20],"type":"Mount90","dir":0},{"pos":[-30,-30],"type":"Engine02","dir":0},{"pos":[-40,20],"type":"Mount90","dir":0},{"pos":[30,-30],"type":"Engine02","dir":0},{"pos":[50,-10],"type":"Wing1x1Round","dir":0},{"pos":[-10,-30],"type":"Battery1x1","dir":0},{"pos":[10,-30],"type":"Battery1x1","dir":0},{"pos":[-40,20],"type":"TorpTurret","dir":0},{"pos":[0,20],"type":"TorpTurret","dir":0},{"pos":[40,20],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Field # at start",2],["Try to field # every # seconds",1,15],["Avoid #dps danger areas",5],["@attackTypes enemy within #m","Flee",500],["Stay in #m range of friendly units",500],["@attackTypes enemy within #m","Attack",1800],["Goto @locationTypes","Friendly Army Middle"]]},"","","","","","","","",""];
ais.all.TorpSwarm = [{"parts":[{"pos":[0,-40],"type":"Mount30","dir":0},{"pos":[-30,-30],"type":"UArmor1x1Angle","dir":0},{"pos":[-30,-50],"type":"Battery1x1","dir":0},{"pos":[30,-60],"type":"Engine04","dir":0},{"pos":[30,-30],"type":"Wing1x1Round","dir":0},{"pos":[0,-40],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid over #damage shots",20],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Run-by","Faster","---",500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","No PD","Less Range",900],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Backstab","Has PD","Less Range",1500],["@attackTypes enemy within #m","Stay at range",900],["@attackTypes enemy within #m","Kite",1100],["@capTypes Command Points within #m","Capture",1600],["Stay in #m range of slot # units",1500,3],["@capTypes Command Points within #m","Capture",10000],["Field # at start",8],["Field # at priority #",100,3]]},{"parts":[{"pos":[-20,-20],"type":"Mount180","dir":0},{"pos":[10,30],"type":"Wing1x1Round","dir":0},{"pos":[-60,-20],"type":"BulletSpeedMod","dir":0},{"pos":[-20,-50],"type":"Battery2x1","dir":0},{"pos":[-50,30],"type":"Wing1x1Round","dir":0},{"pos":[-30,-80],"type":"Engine03","dir":0},{"pos":[20,-20],"type":"BulletSpeedMod","dir":0},{"pos":[-10,-80],"type":"Engine03","dir":0},{"pos":[-20,20],"type":"DamageMod","dir":0},{"pos":[-70,-50],"type":"Battery1x1","dir":0},{"pos":[30,-50],"type":"Reactor1x1","dir":0},{"pos":[10,-60],"type":"Engine03","dir":0},{"pos":[-50,-60],"type":"Engine03","dir":0},{"pos":[-20,-20],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy within #m","Stay at range",850],["@capTypes Command Points within #m","Spread to",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Kite","Slower","Less HP",4000],["When #% of energy, @chargeTypes",80,"Find recharger"],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",1],["Try to field # every # seconds",1,60],["Field # at priority #",1,2]]},{"parts":[{"pos":[40,10],"type":"Battery2x1","dir":0},{"pos":[0,30],"type":"Battery2x1","dir":0},{"pos":[70,70],"type":"Wing1x1Round","dir":0},{"pos":[70,40],"type":"HArmor1x2","dir":0},{"pos":[40,-20],"type":"Mount360Micro","dir":0},{"pos":[0,0],"type":"Mount360","dir":0},{"pos":[40,40],"type":"DamageMod","dir":0},{"pos":[0,60],"type":"Mount360","dir":0},{"pos":[-40,10],"type":"Battery2x1","dir":0},{"pos":[40,80],"type":"Reactor2x2","dir":0},{"pos":[0,-40],"type":"EnergyTransfer","dir":0},{"pos":[-40,-20],"type":"Mount360Micro","dir":0},{"pos":[-70,40],"type":"HArmor1x2","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[-70,70],"type":"Wing1x1Round","dir":0},{"pos":[-50,-60],"type":"Wing1x2","dir":0},{"pos":[0,90],"type":"HArmor2x1","dir":0},{"pos":[-40,80],"type":"Reactor2x2","dir":0},{"pos":[-40,40],"type":"BulletSpeedMod","dir":0},{"pos":[-70,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[70,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[70,0],"type":"HArmor1x2","dir":0},{"pos":[0,0],"type":"PDTurret","dir":0},{"pos":[40,-20],"type":"TorpTurret","dir":0},{"pos":[-40,-20],"type":"TorpTurret","dir":0},{"pos":[0,60],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["Avoid everything"],["Avoid over #damage shots",40],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","---","Stronger",1000],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",1,7,1,1],["Field # at start",1]]},"","","","","","",""];
ais.all.TurtleFence = [{"parts":[{"pos":[-70,50],"type":"ShieldGen1x1","dir":0},{"pos":[140,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,80],"type":"HArmor2x2Angle","dir":0},{"pos":[-120,60],"type":"HArmor2x2Angle","dir":0},{"pos":[-90,50],"type":"ShieldGen1x1","dir":0},{"pos":[60,80],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,100],"type":"HArmor2x2Angle","dir":0},{"pos":[20,100],"type":"HArmor2x2Angle","dir":0},{"pos":[-10,30],"type":"Engine02","dir":0},{"pos":[50,50],"type":"ShieldGen1x1","dir":0},{"pos":[-30,30],"type":"Wing1x1Round","dir":0},{"pos":[-10,80],"type":"Reactor1x2","dir":0},{"pos":[10,30],"type":"Wing1x1Round","dir":0},{"pos":[-190,10],"type":"Wing1x1Round","dir":0},{"pos":[-160,40],"type":"HArmor2x2Angle","dir":0},{"pos":[100,60],"type":"HArmor2x2Angle","dir":0},{"pos":[70,50],"type":"ShieldGen1x1","dir":0},{"pos":[170,10],"type":"Wing1x1Round","dir":0},{"pos":[110,10],"type":"Engine02","dir":0},{"pos":[-130,10],"type":"Engine02","dir":0},{"pos":[30,70],"type":"ShieldGen1x1","dir":0},{"pos":[10,70],"type":"ShieldGen1x1","dir":0},{"pos":[-30,70],"type":"ShieldGen1x1","dir":0},{"pos":[-50,70],"type":"ShieldGen1x1","dir":0},{"pos":[-50,50],"type":"ShieldGen1x1","dir":0},{"pos":[-30,50],"type":"ShieldGen1x1","dir":0},{"pos":[10,50],"type":"ShieldGen1x1","dir":0},{"pos":[30,50],"type":"ShieldGen1x1","dir":0},{"pos":[90,30],"type":"ShieldGen1x1","dir":0},{"pos":[90,10],"type":"ShieldGen1x1","dir":0},{"pos":[-110,10],"type":"ShieldGen1x1","dir":0},{"pos":[-110,30],"type":"ShieldGen1x1","dir":0},{"pos":[-90,30],"type":"ShieldGen1x1","dir":0},{"pos":[70,30],"type":"ShieldGen1x1","dir":0},{"pos":[-170,10],"type":"ShieldGen1x1","dir":0},{"pos":[150,10],"type":"ShieldGen1x1","dir":0},{"pos":[-150,10],"type":"ShieldGen1x1","dir":0},{"pos":[130,10],"type":"ShieldGen1x1","dir":0}],"name":"","aiRules":[["When Shields down to #%, flee",30],["Avoid over #damage shots",150],["Stay in #m range of slot # units",600,2],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","More DPS",10,700],["@capTypes Command Points within #m","Capture",1000],["@capTypes Command Points within #m","Capture",10000],["Goto @locationTypes","Enemy Army Middle"],["Field # at priority #",1,2]]},{"parts":[{"pos":[-30,50],"type":"Wing1x1Round","dir":0},{"pos":[30,50],"type":"Wing1x1Round","dir":0},{"pos":[70,-30],"type":"Engine02","dir":0},{"pos":[70,10],"type":"Wing1x1Round","dir":0},{"pos":[0,0],"type":"Mount270","dir":0},{"pos":[0,40],"type":"Mount270","dir":0},{"pos":[-70,-30],"type":"Engine02","dir":0},{"pos":[0,-30],"type":"ShieldGen2x1","dir":0},{"pos":[-70,10],"type":"Wing1x1Round","dir":0},{"pos":[40,-20],"type":"Mount90","dir":0},{"pos":[-40,-20],"type":"Mount90","dir":0},{"pos":[-40,20],"type":"Reactor2x2","dir":0},{"pos":[40,20],"type":"Reactor2x2","dir":0},{"pos":[0,40],"type":"TorpTurret","dir":0},{"pos":[0,0],"type":"TorpTurret","dir":0},{"pos":[40,-20],"type":"TorpTurret","dir":0},{"pos":[-40,-20],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["When Shields down to #%, flee",30],["Stay in #m range of slot # units",500,1],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Faster",150,400],["@attackTypes enemy that is @absoluteTypes then # within #m","Stay at range","Slower",150,800],["@attackTypes enemy within #m","Attack",1200],["@capTypes Command Points within #m","Capture",1000],["Field # at priority #",3,3]]},{"parts":[{"pos":[-10,10],"type":"Reactor1x1","dir":0},{"pos":[-10,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0}],"name":"","aiRules":[["When Shields down to #%, flee",30],["Avoid over #damage shots",20],["Avoid #dps danger areas",400],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",2]]},{"parts":[{"pos":[-30,50],"type":"Wing1x1Round","dir":0},{"pos":[10,-10],"type":"Engine02","dir":0},{"pos":[0,30],"type":"ShieldGen2x1","dir":0},{"pos":[0,50],"type":"Reactor2x1","dir":0},{"pos":[-10,-10],"type":"Engine02","dir":0},{"pos":[40,20],"type":"Mount270","dir":0},{"pos":[-40,20],"type":"Mount270","dir":0},{"pos":[30,50],"type":"Wing1x1Round","dir":0},{"pos":[-30,-10],"type":"ShieldGen1x1","dir":0},{"pos":[30,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-40,20],"type":"TorpTurret","dir":0},{"pos":[40,20],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["When Shields down to #%, flee",30],["Avoid over #damage shots",20],["When #% of energy, @chargeTypes",20,"Flee enemies"],["@attackTypes enemy that is @absoluteTypes then # within #m","Circle","Faster",200,600],["@attackTypes enemy that is @absoluteTypes then # within #m","Stay at range","Slower",170,900],["@attackTypes enemy that is @absoluteTypes then # within #m","Circle","Slower",200,1100],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",200,1300],["When #% of energy, @chargeTypes",20,"Rest"],["@capTypes Command Points within #m","Spread to",10000],["Field # at priority #",10,4]]},"","","","","",""];
ais.all.WaveMotion = [{"parts":[{"pos":[-40,0],"type":"BulletSpeedMod","dir":0},{"pos":[-10,-80],"type":"Engine03","dir":0},{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[-30,-80],"type":"Engine04","dir":0},{"pos":[30,-80],"type":"Engine04","dir":0},{"pos":[50,-80],"type":"Engine04","dir":0},{"pos":[20,-40],"type":"Mount360Micro","dir":0},{"pos":[-20,-40],"type":"Mount90","dir":0},{"pos":[40,0],"type":"Mount360Micro","dir":0},{"pos":[10,-80],"type":"Engine03","dir":0},{"pos":[-50,-40],"type":"Battery1x2","dir":0},{"pos":[70,-70],"type":"Wing1x1Round","dir":0},{"pos":[50,-40],"type":"VArmor1x2IBeam","dir":0},{"pos":[70,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-70,-40],"type":"VArmor1x1CornerBack","dir":0},{"pos":[-50,-70],"type":"Wing1x1Round","dir":0},{"pos":[0,30],"type":"Battery2x1","dir":0},{"pos":[40,0],"type":"LightBeamTurret","dir":0},{"pos":[-20,-40],"type":"LightBeamTurret","dir":0},{"pos":[0,0],"type":"WavePullTurret","dir":0},{"pos":[20,-40],"type":"WavePullTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",30,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Weaker",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Run-by","---","Less Brawling Value",1000],["Avoid over #damage shots",20],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","Less Arc",180,1800],["@capTypes Command Points within #m","Capture",10000],["Try to field # every # seconds",1,25],["Field # for # of ship in slot # at priority #",1,10,2,5]]},{"parts":[{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0},{"pos":[20,0],"type":"Mount30","dir":0},{"pos":[-30,-10],"type":"VArmor1x1Corner1","dir":0},{"pos":[10,-30],"type":"VArmor1x1Corner1","dir":0},{"pos":[20,0],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",350],["When #% of energy, @chargeTypes",35,"Find recharger"],["@capTypes Command Points within #m","Capture",300],["Stay in #m range of slot # units",500,1],["Avoid everything"],["@capTypes Command Points within #m","Spread to",10000],["Field # when money over # at priority #",6,1000,1],["Try to field # every # seconds",8,40],["Field # at start",6]]},{"parts":[{"pos":[-20,10],"type":"Reactor2x1","dir":0},{"pos":[0,-40],"type":"EnergyTransfer","dir":0},{"pos":[-60,0],"type":"Mount30","dir":0},{"pos":[0,40],"type":"Mount270","dir":0},{"pos":[20,80],"type":"TargetingMod","dir":0},{"pos":[-80,40],"type":"Mount360Micro","dir":0},{"pos":[80,40],"type":"Mount360Micro","dir":0},{"pos":[60,0],"type":"Mount30","dir":0},{"pos":[-40,40],"type":"Mount90","dir":0},{"pos":[-60,-40],"type":"Wing2x2","dir":0},{"pos":[60,-40],"type":"Wing2x2","dir":0},{"pos":[-20,80],"type":"TargetingMod","dir":0},{"pos":[40,40],"type":"Mount90","dir":0},{"pos":[20,10],"type":"Reactor2x1","dir":0},{"pos":[0,-10],"type":"Reactor2x1","dir":0},{"pos":[30,-30],"type":"Engine01","dir":0},{"pos":[-30,-30],"type":"Engine01","dir":0},{"pos":[60,0],"type":"WavePushTurret","dir":0},{"pos":[-40,40],"type":"WavePushTurret","dir":0},{"pos":[-60,0],"type":"WavePushTurret","dir":0},{"pos":[0,40],"type":"WavePushTurret","dir":0},{"pos":[40,40],"type":"WavePushTurret","dir":0},{"pos":[-80,40],"type":"PDTurret","dir":0},{"pos":[80,40],"type":"PDTurret","dir":0}],"name":"","aiRules":[["Avoid #dps danger areas",20],["Avoid over #damage shots",25],["Find units that are out of energy"],["Field # for # of ship in slot # at priority #",1,2,1,1],["Field # for # of ship in slot # at priority #",1,6,2,1]]},{"parts":[{"pos":[0,-40],"type":"Mount30","dir":0},{"pos":[-30,-60],"type":"Engine04","dir":0},{"pos":[-30,-30],"type":"Battery1x1","dir":0},{"pos":[-30,-10],"type":"Wing1x1Notch","dir":0},{"pos":[0,0],"type":"Mount90","dir":0},{"pos":[0,0],"type":"WavePushTurret","dir":0},{"pos":[0,-40],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",1000,3],["@attackTypes enemy within #m","Attack",700],["@attackTypes enemy within #m","Ram",1200],["Stay in #m range of slot # units",500,3],["Field # for # of ship in slot # at priority #",4,1,3,5],["Try to field # every # seconds",1,35]]},"","","","","",""];
ais.all.Waxon = [{"parts":[{"pos":[40,-20],"type":"VArmor2x2","dir":0},{"pos":[-20,80],"type":"VArmor2x2Angle","dir":0},{"pos":[-20,20],"type":"Mount90","dir":0},{"pos":[0,50],"type":"ShieldGen2x1","dir":0},{"pos":[30,50],"type":"ShieldGen1x1","dir":0},{"pos":[40,20],"type":"Mount90","dir":0},{"pos":[50,50],"type":"ShieldGen1x1","dir":0},{"pos":[-30,50],"type":"ShieldGen1x1","dir":0},{"pos":[-20,-20],"type":"VArmor2x2","dir":0},{"pos":[10,70],"type":"Battery1x1","dir":0},{"pos":[40,80],"type":"VArmor2x2Angle","dir":0},{"pos":[70,40],"type":"Wing1x2","dir":0},{"pos":[-50,40],"type":"Wing1x2","dir":0},{"pos":[10,90],"type":"Solar1x1","dir":0},{"pos":[-50,10],"type":"Solar1x1","dir":0},{"pos":[70,10],"type":"Solar1x1","dir":0},{"pos":[10,-10],"type":"Engine01","dir":0},{"pos":[10,30],"type":"Solar1x1","dir":0},{"pos":[-50,-10],"type":"Solar1x1","dir":0},{"pos":[70,-10],"type":"Solar1x1","dir":0},{"pos":[-20,20],"type":"AutoTurret","dir":0},{"pos":[40,20],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",75,"Find recharger"],["Avoid over #damage shots",20],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Less Brawling Value",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Slower","Weaker",1000],["@capTypes Command Points within #m","Capture",10000],["Field # at start",2],["Field # at priority #",1,2],["Try to field # every # seconds",1,20]]},{"parts":[{"pos":[-10,-20],"type":"Engine04","dir":0},{"pos":[-10,10],"type":"Battery1x1","dir":0},{"pos":[20,0],"type":"Mount360Micro","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0},{"pos":[-30,-10],"type":"HArmor1x1","dir":0},{"pos":[10,-30],"type":"HArmor1x1AngleBack","dir":0},{"pos":[20,0],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",35,"Find recharger"],["Stay in #m range of slot # units",300,1],["Stayaway in #m range from slot # units",200,2],["@attackTypes enemy within #m","Kite",1000],["Field # at start",2],["Field # for # of ship in slot # at priority #",1,1,1,2],["Try to field # every # seconds",2,35]]},{"parts":[{"pos":[-30,-20],"type":"Reactor1x2","dir":0},{"pos":[0,0],"type":"DamageMod","dir":0},{"pos":[50,-30],"type":"ShieldGen1x1","dir":0},{"pos":[80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[-80,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[80,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[0,80],"type":"DamageMod","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[-30,-70],"type":"Engine02","dir":0},{"pos":[-40,60],"type":"TargetingMod","dir":0},{"pos":[-40,20],"type":"Reactor2x2","dir":0},{"pos":[40,20],"type":"Reactor2x2","dir":0},{"pos":[40,60],"type":"TargetingMod","dir":0},{"pos":[-50,-30],"type":"ShieldGen1x1","dir":0},{"pos":[30,-20],"type":"Reactor1x2","dir":0},{"pos":[0,-40],"type":"EnergyTransfer","dir":0},{"pos":[-80,0],"type":"HArmor2x2","dir":0},{"pos":[80,0],"type":"HArmor2x2","dir":0},{"pos":[-80,-30],"type":"HArmor2x1","dir":0},{"pos":[80,-30],"type":"HArmor2x1","dir":0},{"pos":[-50,-10],"type":"ShieldGen1x1","dir":0},{"pos":[50,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-50,-70],"type":"Engine02","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[-30,100],"type":"Wing1x2","dir":0},{"pos":[30,100],"type":"Wing1x2","dir":0},{"pos":[0,110],"type":"Reactor2x1","dir":0},{"pos":[0,-70],"type":"ShieldGen2x1","dir":0},{"pos":[0,40],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid #dps danger areas",40],["Stay in #m range of friendly units",1000],["@attackTypes enemy within #m","Kite",1200],["Field # for # of ship in slot # at priority #",1,3,1,1],["Field # for # of ship in slot # at priority #",1,2,4,2],["Goto @locationTypes","Friendly Army Middle"],["Field # at start",1]]},{"parts":[{"pos":[40,-30],"type":"Battery2x1","dir":0},{"pos":[-20,40],"type":"Mount90","dir":0},{"pos":[20,40],"type":"Mount90","dir":0},{"pos":[30,10],"type":"ShieldGen1x1","dir":0},{"pos":[-30,10],"type":"ShieldGen1x1","dir":0},{"pos":[0,80],"type":"Mount90","dir":0},{"pos":[-30,-10],"type":"ShieldGen1x1","dir":0},{"pos":[30,-10],"type":"ShieldGen1x1","dir":0},{"pos":[-50,40],"type":"Wing1x2","dir":0},{"pos":[50,0],"type":"Battery1x2","dir":0},{"pos":[-50,0],"type":"Battery1x2","dir":0},{"pos":[50,40],"type":"Wing1x2","dir":0},{"pos":[-40,-30],"type":"Battery2x1","dir":0},{"pos":[0,-20],"type":"Engine07","dir":0},{"pos":[0,10],"type":"ShieldGen2x1","dir":0},{"pos":[-30,70],"type":"Battery1x1","dir":0},{"pos":[30,70],"type":"Battery1x1","dir":0},{"pos":[-30,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[30,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[50,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-50,-50],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-20,40],"type":"LightBeamTurret","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0},{"pos":[0,80],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",300],["When #% of energy, @chargeTypes",50,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","Weaker",3000],["Stay in #m range of slot # units",700,3],["Try to field # every # seconds",1,40],["Field # for # of ship in slot # at priority #",1,1,3,5]]},{"parts":[{"pos":[-10,-10],"type":"Battery1x1","dir":0},{"pos":[-10,-40],"type":"Engine04","dir":0},{"pos":[10,-30],"type":"Wing1x1Notch","dir":0}],"name":"","aiRules":[["Avoid #dps danger areas",5],["When #% of energy, @chargeTypes",20,"Find recharger"],["@capTypes Command Points within #m","Capture",525],["Stay in #m range of slot # units",300,1],["Stayaway in #m range from slot # units",400,1],["Field # for # of ship in slot # at priority #",1,3,1,2],["Field # at start",2],["Try to field # every # seconds",1,45]]},"","",{"parts":[{"pos":[-30,-50],"type":"Engine02","dir":0},{"pos":[-70,0],"type":"Wing1x2","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[10,-70],"type":"Engine02","dir":0},{"pos":[-10,-70],"type":"Engine02","dir":0},{"pos":[0,-30],"type":"ShieldGen2x1","dir":0},{"pos":[-50,-30],"type":"ShieldGen1x1","dir":0},{"pos":[50,-30],"type":"ShieldGen1x1","dir":0},{"pos":[-60,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[60,-60],"type":"HArmor2x2AngleBack","dir":0},{"pos":[-40,0],"type":"Reactor2x2","dir":0},{"pos":[40,0],"type":"Reactor2x2","dir":0},{"pos":[70,0],"type":"Wing1x2","dir":0},{"pos":[0,0],"type":"EnergyTransfer","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-80,40],"type":"HArmor2x2Angle","dir":0},{"pos":[-40,40],"type":"TargetingMod","dir":0},{"pos":[40,40],"type":"TargetingMod","dir":0},{"pos":[20,80],"type":"DamageMod","dir":0},{"pos":[-20,80],"type":"DamageMod","dir":0},{"pos":[0,40],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[]},{"parts":[{"pos":[-50,30],"type":"Battery1x1","dir":0},{"pos":[-50,50],"type":"ShieldGen1x1","dir":0},{"pos":[30,10],"type":"Reactor1x1","dir":0},{"pos":[-30,10],"type":"Reactor1x1","dir":0},{"pos":[-30,-20],"type":"Wing1x2","dir":0},{"pos":[30,-20],"type":"Wing1x2","dir":0},{"pos":[0,0],"type":"Battery2x2","dir":0},{"pos":[0,-40],"type":"Engine07","dir":0},{"pos":[-30,70],"type":"ShieldGen1x1","dir":0},{"pos":[30,70],"type":"ShieldGen1x1","dir":0},{"pos":[50,50],"type":"ShieldGen1x1","dir":0},{"pos":[50,30],"type":"Battery1x1","dir":0},{"pos":[50,10],"type":"Battery1x1","dir":0},{"pos":[-50,10],"type":"Battery1x1","dir":0},{"pos":[-20,40],"type":"Mount90","dir":0},{"pos":[20,40],"type":"Mount90","dir":0},{"pos":[0,80],"type":"Mount90","dir":0},{"pos":[-20,40],"type":"LightBeamTurret","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0},{"pos":[0,80],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[]},{"parts":[{"pos":[40,20],"type":"Mount90","dir":0},{"pos":[-30,-20],"type":"HArmor1x2","dir":0},{"pos":[30,-30],"type":"Engine02","dir":0},{"pos":[10,10],"type":"Reactor1x1","dir":0},{"pos":[10,30],"type":"Battery1x1","dir":0},{"pos":[10,-30],"type":"Engine02","dir":0},{"pos":[-20,20],"type":"Mount90","dir":0},{"pos":[-10,-30],"type":"Engine02","dir":0},{"pos":[50,-20],"type":"HArmor1x2","dir":0},{"pos":[0,50],"type":"ShieldGen2x1","dir":0},{"pos":[30,50],"type":"ShieldGen1x1","dir":0},{"pos":[50,50],"type":"ShieldGen1x1","dir":0},{"pos":[-30,50],"type":"ShieldGen1x1","dir":0},{"pos":[-50,20],"type":"Wing1x2","dir":0},{"pos":[70,20],"type":"Wing1x2","dir":0},{"pos":[-20,20],"type":"AutoTurret","dir":0},{"pos":[40,20],"type":"AutoTurret","dir":0}],"name":"","aiRules":[]}];
ais.all.Yarki = [{"parts":[{"pos":[30,40],"type":"VArmor1x2Corner4","dir":0},{"pos":[-30,40],"type":"VArmor1x2Corner4","dir":0},{"pos":[0,0],"type":"Mount270","dir":0},{"pos":[-20,-40],"type":"Mount90","dir":0},{"pos":[50,-40],"type":"Wing1x2","dir":0},{"pos":[-50,-40],"type":"Wing1x2","dir":0},{"pos":[-30,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[20,-40],"type":"Mount90","dir":0},{"pos":[30,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[-70,-50],"type":"VArmor1x1Corner2","dir":0},{"pos":[70,-50],"type":"VArmor1x1Corner2","dir":0},{"pos":[-10,40],"type":"Reactor1x2","dir":0},{"pos":[10,40],"type":"Battery1x2","dir":0},{"pos":[-30,-80],"type":"Engine04","dir":0},{"pos":[-10,-80],"type":"Engine04","dir":0},{"pos":[10,-80],"type":"Engine04","dir":0},{"pos":[30,-80],"type":"Engine04","dir":0},{"pos":[-20,-40],"type":"TorpTurret","dir":0},{"pos":[20,-40],"type":"TorpTurret","dir":0},{"pos":[0,0],"type":"MissileTurret","dir":0}],"name":"","aiRules":[["@attackTypes enemy within #m","Attack",1150],["@capTypes command points within #m","Spread to",10000],["Field # at priority #",5,1],["Try to field # every # seconds",2,30]]},{"parts":[{"pos":[-30,40],"type":"VArmor1x2IBeam","dir":0},{"pos":[-50,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[0,50],"type":"Reactor2x1","dir":0},{"pos":[0,70],"type":"Battery2x1","dir":0},{"pos":[-30,-10],"type":"Engine02","dir":0},{"pos":[0,20],"type":"Mount90","dir":0},{"pos":[30,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[0,-20],"type":"Mount270","dir":0},{"pos":[50,0],"type":"VArmor1x2IBeam","dir":0},{"pos":[30,40],"type":"VArmor1x2IBeam","dir":0},{"pos":[-50,40],"type":"VArmor1x2Corner4","dir":0},{"pos":[-30,80],"type":"VArmor1x2Corner4","dir":0},{"pos":[30,80],"type":"VArmor1x2Corner4","dir":0},{"pos":[50,40],"type":"VArmor1x2Corner4","dir":0},{"pos":[70,0],"type":"VArmor1x2Corner4","dir":0},{"pos":[-70,0],"type":"VArmor1x2Corner4","dir":0},{"pos":[10,90],"type":"Wing1x1Angle","dir":0},{"pos":[-10,90],"type":"Wing1x1Angle","dir":0},{"pos":[0,20],"type":"AutoTurret","dir":0},{"pos":[0,-20],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["@capTypes command points within #m","Spread to",10000],["Field # at start",5],["Field # at priority #",5,2],["Try to field # every # seconds",2,30]]},{"parts":[],"name":"","aiRules":[]},"","","",{"parts":[],"name":"","aiRules":[]},"","",""];
ais.all.Zeus = [{"parts":[{"pos":[160,-120],"type":"ShieldGen2x2","dir":0},{"pos":[-10,110],"type":"ShieldGen1x1","dir":0},{"pos":[-60,-80],"type":"TargetingMod","dir":0},{"pos":[-100,-80],"type":"TargetingMod","dir":0},{"pos":[-60,0],"type":"TargetingMod","dir":0},{"pos":[-100,0],"type":"TargetingMod","dir":0},{"pos":[-100,80],"type":"TargetingMod","dir":0},{"pos":[-60,80],"type":"TargetingMod","dir":0},{"pos":[60,-80],"type":"TargetingMod","dir":0},{"pos":[100,-80],"type":"TargetingMod","dir":0},{"pos":[60,0],"type":"TargetingMod","dir":0},{"pos":[100,0],"type":"TargetingMod","dir":0},{"pos":[60,80],"type":"TargetingMod","dir":0},{"pos":[100,80],"type":"TargetingMod","dir":0},{"pos":[-80,40],"type":"Mount270","dir":0},{"pos":[-80,-40],"type":"Mount270","dir":0},{"pos":[-80,-120],"type":"Mount270","dir":0},{"pos":[80,-120],"type":"Mount270","dir":0},{"pos":[80,-40],"type":"Mount270","dir":0},{"pos":[80,40],"type":"Mount270","dir":0},{"pos":[-120,120],"type":"TargetingMod","dir":0},{"pos":[-40,120],"type":"TargetingMod","dir":0},{"pos":[120,120],"type":"TargetingMod","dir":0},{"pos":[-60,160],"type":"ReloaderMod","dir":0},{"pos":[40,120],"type":"TargetingMod","dir":0},{"pos":[60,160],"type":"ReloaderMod","dir":0},{"pos":[-100,160],"type":"ReloaderMod","dir":0},{"pos":[-80,120],"type":"Mount270","dir":0},{"pos":[80,120],"type":"Mount270","dir":0},{"pos":[100,160],"type":"ReloaderMod","dir":0},{"pos":[-120,40],"type":"DamageMod","dir":0},{"pos":[-40,40],"type":"DamageMod","dir":0},{"pos":[40,40],"type":"DamageMod","dir":0},{"pos":[120,40],"type":"DamageMod","dir":0},{"pos":[120,-40],"type":"DamageMod","dir":0},{"pos":[40,-40],"type":"DamageMod","dir":0},{"pos":[40,-120],"type":"DamageMod","dir":0},{"pos":[120,-120],"type":"DamageMod","dir":0},{"pos":[-40,-120],"type":"DamageMod","dir":0},{"pos":[-120,-120],"type":"DamageMod","dir":0},{"pos":[-120,-40],"type":"DamageMod","dir":0},{"pos":[-40,-40],"type":"DamageMod","dir":0},{"pos":[60,-160],"type":"DamageMod","dir":0},{"pos":[-100,-160],"type":"DamageMod","dir":0},{"pos":[30,80],"type":"Reactor1x2","dir":0},{"pos":[10,80],"type":"Reactor1x2","dir":0},{"pos":[100,-160],"type":"DamageMod","dir":0},{"pos":[-60,-160],"type":"DamageMod","dir":0},{"pos":[-10,80],"type":"Reactor1x2","dir":0},{"pos":[-30,80],"type":"Reactor1x2","dir":0},{"pos":[-30,0],"type":"Reactor1x2","dir":0},{"pos":[-10,0],"type":"Reactor1x2","dir":0},{"pos":[10,0],"type":"Reactor1x2","dir":0},{"pos":[30,0],"type":"Reactor1x2","dir":0},{"pos":[30,-80],"type":"Reactor1x2","dir":0},{"pos":[10,-80],"type":"Reactor1x2","dir":0},{"pos":[-10,-80],"type":"Reactor1x2","dir":0},{"pos":[-30,-80],"type":"Reactor1x2","dir":0},{"pos":[0,-50],"type":"Reactor2x1","dir":0},{"pos":[0,-30],"type":"Reactor2x1","dir":0},{"pos":[0,30],"type":"Reactor2x1","dir":0},{"pos":[0,50],"type":"Reactor2x1","dir":0},{"pos":[0,-120],"type":"Battery2x2","dir":0},{"pos":[-30,-170],"type":"Engine01","dir":0},{"pos":[-10,-170],"type":"Engine01","dir":0},{"pos":[10,-170],"type":"Engine01","dir":0},{"pos":[150,-170],"type":"Engine01","dir":0},{"pos":[-130,-170],"type":"Engine01","dir":0},{"pos":[130,-170],"type":"Engine01","dir":0},{"pos":[30,-170],"type":"Engine01","dir":0},{"pos":[170,-170],"type":"Engine01","dir":0},{"pos":[190,-170],"type":"Engine01","dir":0},{"pos":[-150,-170],"type":"Engine01","dir":0},{"pos":[-190,-170],"type":"Engine01","dir":0},{"pos":[140,-80],"type":"ShieldGen2x2","dir":0},{"pos":[10,110],"type":"ShieldGen1x1","dir":0},{"pos":[-170,-170],"type":"Engine01","dir":0},{"pos":[10,130],"type":"ShieldGen1x1","dir":0},{"pos":[-10,130],"type":"ShieldGen1x1","dir":0},{"pos":[-10,150],"type":"ShieldGen1x1","dir":0},{"pos":[10,150],"type":"ShieldGen1x1","dir":0},{"pos":[30,150],"type":"ShieldGen1x1","dir":0},{"pos":[30,170],"type":"ShieldGen1x1","dir":0},{"pos":[10,170],"type":"ShieldGen1x1","dir":0},{"pos":[-10,170],"type":"ShieldGen1x1","dir":0},{"pos":[-30,170],"type":"ShieldGen1x1","dir":0},{"pos":[-30,150],"type":"ShieldGen1x1","dir":0},{"pos":[-130,90],"type":"ShieldGen1x1","dir":0},{"pos":[-130,70],"type":"ShieldGen1x1","dir":0},{"pos":[-130,10],"type":"ShieldGen1x1","dir":0},{"pos":[-130,-10],"type":"ShieldGen1x1","dir":0},{"pos":[130,-10],"type":"ShieldGen1x1","dir":0},{"pos":[130,10],"type":"ShieldGen1x1","dir":0},{"pos":[130,70],"type":"ShieldGen1x1","dir":0},{"pos":[130,90],"type":"ShieldGen1x1","dir":0},{"pos":[-130,160],"type":"Wing1x2","dir":0},{"pos":[130,160],"type":"Wing1x2","dir":0},{"pos":[-160,150],"type":"Wing2x1","dir":0},{"pos":[180,-10],"type":"Wing2x1","dir":0},{"pos":[180,10],"type":"Wing2x1","dir":0},{"pos":[180,30],"type":"Wing2x1","dir":0},{"pos":[180,50],"type":"Wing2x1","dir":0},{"pos":[180,70],"type":"Wing2x1","dir":0},{"pos":[180,90],"type":"Wing2x1","dir":0},{"pos":[180,110],"type":"Wing2x1","dir":0},{"pos":[180,130],"type":"Wing2x1","dir":0},{"pos":[160,150],"type":"Wing2x1","dir":0},{"pos":[-180,130],"type":"Wing2x1","dir":0},{"pos":[-180,110],"type":"Wing2x1","dir":0},{"pos":[-180,90],"type":"Wing2x1","dir":0},{"pos":[-180,70],"type":"Wing2x1","dir":0},{"pos":[-180,50],"type":"Wing2x1","dir":0},{"pos":[-180,30],"type":"Wing2x1","dir":0},{"pos":[-180,10],"type":"Wing2x1","dir":0},{"pos":[-180,-10],"type":"Wing2x1","dir":0},{"pos":[-150,120],"type":"UArmor1x2","dir":0},{"pos":[-150,40],"type":"UArmor1x2","dir":0},{"pos":[150,40],"type":"UArmor1x2","dir":0},{"pos":[150,120],"type":"UArmor1x2","dir":0},{"pos":[210,-120],"type":"Wing1x2","dir":0},{"pos":[190,-80],"type":"Wing1x2","dir":0},{"pos":[200,-50],"type":"Wing2x1","dir":0},{"pos":[170,-40],"type":"Wing1x2","dir":0},{"pos":[-210,-120],"type":"Wing1x2","dir":0},{"pos":[-190,-80],"type":"Wing1x2","dir":0},{"pos":[-200,-50],"type":"Wing2x1","dir":0},{"pos":[-170,-40],"type":"Wing1x2","dir":0},{"pos":[-150,-40],"type":"UArmor1x2","dir":0},{"pos":[-170,-80],"type":"UArmor1x2","dir":0},{"pos":[-190,-120],"type":"UArmor1x2","dir":0},{"pos":[190,-120],"type":"UArmor1x2","dir":0},{"pos":[170,-80],"type":"UArmor1x2","dir":0},{"pos":[150,-40],"type":"UArmor1x2","dir":0},{"pos":[210,-150],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-210,-150],"type":"UArmor1x1AngleBack","dir":0},{"pos":[-20,190],"type":"UArmor2x1","dir":0},{"pos":[20,190],"type":"UArmor2x1","dir":0},{"pos":[-50,190],"type":"UArmor1x1Angle","dir":0},{"pos":[50,190],"type":"UArmor1x1Angle","dir":0},{"pos":[150,0],"type":"UArmor1x2","dir":0},{"pos":[150,80],"type":"UArmor1x2","dir":0},{"pos":[-150,80],"type":"UArmor1x2","dir":0},{"pos":[-150,0],"type":"UArmor1x2","dir":0},{"pos":[-160,-120],"type":"ShieldGen2x2","dir":0},{"pos":[-140,-80],"type":"ShieldGen2x2","dir":0},{"pos":[-80,120],"type":"TeslaTurret","dir":0},{"pos":[80,120],"type":"TeslaTurret","dir":0},{"pos":[-80,-40],"type":"TeslaTurret","dir":0},{"pos":[-80,40],"type":"TeslaTurret","dir":0},{"pos":[80,40],"type":"TeslaTurret","dir":0},{"pos":[80,-40],"type":"TeslaTurret","dir":0},{"pos":[-80,-120],"type":"TeslaTurret","dir":0},{"pos":[80,-120],"type":"TeslaTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",40,"Return to Spawn"],["Avoid over #damage shots",100],["When Shields down to #%, flee",25],["Stay in #m range of slot # units",400,7],["@attackTypes enemy that is @absoluteTypes then # within #m","Attack","Slower",120,5000],["@attackTypes enemy within #m","Attack",2000],["@capTypes Command Points within #m","Capture",10000],["Avoid over #damage shots",20],["Stay in #m range of friendly units",500]]},{"parts":[{"pos":[0,90],"type":"ShieldGen2x1","dir":0},{"pos":[10,-10],"type":"Reactor1x1","dir":0},{"pos":[40,40],"type":"Mount360","dir":0},{"pos":[0,20],"type":"DamageMod","dir":0},{"pos":[0,60],"type":"DamageMod","dir":0},{"pos":[40,0],"type":"DamageMod","dir":0},{"pos":[-40,0],"type":"DamageMod","dir":0},{"pos":[-80,60],"type":"DamageMod","dir":0},{"pos":[-80,20],"type":"DamageMod","dir":0},{"pos":[80,60],"type":"DamageMod","dir":0},{"pos":[80,20],"type":"DamageMod","dir":0},{"pos":[-40,80],"type":"DamageMod","dir":0},{"pos":[40,80],"type":"DamageMod","dir":0},{"pos":[-110,-20],"type":"Engine04","dir":0},{"pos":[-50,-40],"type":"Engine04","dir":0},{"pos":[-40,40],"type":"Mount360","dir":0},{"pos":[50,-40],"type":"Engine04","dir":0},{"pos":[-10,-10],"type":"Battery1x1","dir":0},{"pos":[-80,90],"type":"Battery2x1","dir":0},{"pos":[80,90],"type":"Battery2x1","dir":0},{"pos":[10,-60],"type":"Engine04","dir":0},{"pos":[-10,-60],"type":"Engine04","dir":0},{"pos":[30,-60],"type":"Engine04","dir":0},{"pos":[-30,-60],"type":"Engine04","dir":0},{"pos":[20,-30],"type":"UArmor2x1","dir":0},{"pos":[-20,-30],"type":"UArmor2x1","dir":0},{"pos":[20,110],"type":"Wing2x1","dir":0},{"pos":[-20,110],"type":"Wing2x1","dir":0},{"pos":[-70,-40],"type":"Engine04","dir":0},{"pos":[70,-40],"type":"Engine04","dir":0},{"pos":[90,-40],"type":"Engine04","dir":0},{"pos":[110,-20],"type":"Engine04","dir":0},{"pos":[-90,-40],"type":"Engine04","dir":0},{"pos":[110,20],"type":"Wing1x2","dir":0},{"pos":[-110,20],"type":"Wing1x2","dir":0},{"pos":[-80,-10],"type":"Battery2x1","dir":0},{"pos":[80,-10],"type":"Battery2x1","dir":0},{"pos":[-40,40],"type":"AutoTurret","dir":0},{"pos":[40,40],"type":"AutoTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",15,"Find recharger"],["Avoid over #damage shots",45],["Avoid #dps danger areas",25],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Weaker","Less Brawling Value",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Less Brawling Value","More expensive",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Weaker","---",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Bomb","Less Brawling Value","Weaker",10000],["Find units that are out of energy"],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",1,1,5,3],["Field # for # of ship in slot # at priority #",1,2,6,1]]},{"parts":[{"pos":[-20,0],"type":"EnergyTransfer","dir":0},{"pos":[20,0],"type":"Reactor2x2","dir":0},{"pos":[-20,30],"type":"Wing2x1","dir":0},{"pos":[-20,-30],"type":"Reactor2x1","dir":0},{"pos":[-50,-10],"type":"Engine02","dir":0},{"pos":[10,-30],"type":"HArmor1x1","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",300,7],["Stayaway in #m range from slot # units",250,3],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Stronger","More expensive",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","---","---",1000],["Field # for # of ship in slot # at priority #",1,3,7,1],["Field # for # of ship in slot # at priority #",1,1,7,5],["Field # for # of ship in slot # at priority #",1,8,7,2],["Field # for # of ship in slot # at priority #",1,1,5,1],["Field # for # of ship in slot # at priority #",1,1,1,2]]},{"parts":[{"pos":[-190,40],"type":"Wing1x2","dir":0},{"pos":[180,0],"type":"Mount30","dir":0},{"pos":[-80,40],"type":"Mount30","dir":0},{"pos":[80,40],"type":"Mount30","dir":0},{"pos":[40,40],"type":"Mount30","dir":0},{"pos":[-40,40],"type":"Mount30","dir":0},{"pos":[0,40],"type":"Mount30","dir":0},{"pos":[-160,40],"type":"Mount30","dir":0},{"pos":[-120,40],"type":"Mount30","dir":0},{"pos":[160,40],"type":"Mount30","dir":0},{"pos":[120,40],"type":"Mount30","dir":0},{"pos":[-180,0],"type":"Mount30","dir":0},{"pos":[190,40],"type":"Wing1x2","dir":0},{"pos":[30,0],"type":"Battery1x2","dir":0},{"pos":[10,-10],"type":"Engine02","dir":0},{"pos":[-10,0],"type":"Battery1x2","dir":0},{"pos":[-160,40],"type":"TorpTurret","dir":0},{"pos":[0,40],"type":"TorpTurret","dir":0},{"pos":[-40,40],"type":"TorpTurret","dir":0},{"pos":[40,40],"type":"TorpTurret","dir":0},{"pos":[-80,40],"type":"TorpTurret","dir":0},{"pos":[80,40],"type":"TorpTurret","dir":0},{"pos":[180,0],"type":"TorpTurret","dir":0},{"pos":[-120,40],"type":"TorpTurret","dir":0},{"pos":[120,40],"type":"TorpTurret","dir":0},{"pos":[160,40],"type":"TorpTurret","dir":0},{"pos":[-180,0],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",300,7],["@attackTypes enemy within #m","Attack",1500],["Goto @locationTypes","Enemy Army Middle"],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",1,4,3,3],["Field # for # of ship in slot # at priority #",1,7,7,2]]},"",{"parts":[{"pos":[0,-30],"type":"Reactor2x1","dir":0},{"pos":[0,110],"type":"ShieldGen2x1","dir":0},{"pos":[20,0],"type":"ReloaderMod","dir":0},{"pos":[-40,-40],"type":"Engine07","dir":0},{"pos":[40,110],"type":"Wing2x1","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[-20,80],"type":"DamageMod","dir":0},{"pos":[40,-40],"type":"Engine07","dir":0},{"pos":[-40,110],"type":"Wing2x1","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[50,80],"type":"Battery1x2","dir":0},{"pos":[-50,80],"type":"Battery1x2","dir":0},{"pos":[-20,0],"type":"ReloaderMod","dir":0},{"pos":[20,80],"type":"DamageMod","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[50,0],"type":"UArmor1x2","dir":0},{"pos":[-50,0],"type":"UArmor1x2","dir":0},{"pos":[70,40],"type":"Wing1x2","dir":0},{"pos":[-70,40],"type":"Wing1x2","dir":0},{"pos":[-70,10],"type":"Battery1x1","dir":0},{"pos":[70,10],"type":"Battery1x1","dir":0},{"pos":[0,40],"type":"RingTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",45,"Find recharger"],["Avoid over #damage shots",25],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Slower","More HP",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Less Brawling Value","---",1000],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Weaker","More Range",1000],["When #% of energy, @chargeTypes",100,"Find recharger"],["Goto @locationTypes","Enemy Spawn"],["Field # for # of ship in slot # at priority #",1,5,7,3]]},{"parts":[{"pos":[-40,0],"type":"EnergyTransfer","dir":0},{"pos":[-10,0],"type":"Battery1x2","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[-110,10],"type":"Wing1x1Round","dir":0},{"pos":[-90,-10],"type":"Engine02","dir":0},{"pos":[-40,30],"type":"HArmor1x2Front2","dir":0},{"pos":[-40,60],"type":"HArmor2x2Front1","dir":0},{"pos":[-40,-30],"type":"HArmor1x2Back2","dir":0},{"pos":[-40,-60],"type":"HArmor2x2Back1","dir":0}],"name":"","aiRules":[["@capTypes Command Points within #m","Capture",700],["Avoid #dps danger areas",10],["Stayaway in #m range from slot # units",250,7],["Stay in #m range of slot # units",2000,1],["Find units that are out of energy"],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","More expensive","---",1000],["Field # at priority #",1,1],["Field # at priority #",1,3],["Field # at priority #",1,4],["Try to field # every # seconds",1,35],["Try to field # every # seconds",1,50],["Try to field # every # seconds",1,80],["Try to field # every # seconds",1,110],["Try to field # every # seconds",1,95],["Field # at priority #",1,5],["@capTypes Command Points within #m","Capture",10000]]},{"parts":[{"pos":[-40,-60],"type":"HArmor2x2Back1","dir":0},{"pos":[-90,-10],"type":"Engine02","dir":0},{"pos":[-70,0],"type":"HArmor1x2","dir":0},{"pos":[-60,40],"type":"DamageMod","dir":0},{"pos":[-20,40],"type":"DamageMod","dir":0},{"pos":[-40,-30],"type":"HArmor1x2Back2","dir":0},{"pos":[-90,30],"type":"Wing1x1Round","dir":0},{"pos":[10,30],"type":"Battery1x1","dir":0},{"pos":[0,0],"type":"TargetingMod","dir":0},{"pos":[-40,0],"type":"Mount90","dir":0},{"pos":[-40,0],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",800,7],["@attackTypes enemy within #m","Attack",1000],["Stay in #m range of slot # units",400,10],["Stayaway in #m range from slot # units",400,7],["When #% of energy, @chargeTypes",50,"Find recharger"],["Field # for # of ship in slot # at priority #",1,3,7,4],["Field # for # of ship in slot # at priority #",1,3,7,5],["Field # for # of ship in slot # at priority #",1,3,7,6]]},{"parts":[{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[0,10],"type":"Battery2x1","dir":0},{"pos":[-20,40],"type":"Mount90","dir":0},{"pos":[20,40],"type":"Mount90","dir":0},{"pos":[30,-20],"type":"Engine03","dir":0},{"pos":[-30,10],"type":"Wing1x1Notch","dir":0},{"pos":[30,10],"type":"Wing1x1Notch","dir":0},{"pos":[-20,40],"type":"LightBeamTurret","dir":0},{"pos":[20,40],"type":"LightBeamTurret","dir":0}],"name":"","aiRules":[["When #% of energy, @chargeTypes",20,"Find recharger"],["Avoid over #damage shots",30],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Slower","Cloaked",600],["Stay in #m range of slot # units",600,1],["@attackTypes enemy that is @absoluteTypes then # within #m","Backstab","Less Arc",100,500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Stay at range","Stronger","More Brawling Value",1500],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","Weaker","Less Brawling Value",1000],["@capTypes Command Points within #m","Spread to",10000],["Field # for # of ship in slot # at priority #",3,4,7,2]]},{}];
ais.all.Zyro = [{"parts":[{"pos":[50,0],"type":"UArmor1x2","dir":0},{"pos":[0,60],"type":"DamageMod","dir":0},{"pos":[30,70],"type":"Wing1x1Notch","dir":0},{"pos":[0,20],"type":"Mount90","dir":0},{"pos":[-30,70],"type":"Wing1x1Notch","dir":0},{"pos":[-40,40],"type":"BulletSpeedMod","dir":0},{"pos":[-50,0],"type":"UArmor1x2","dir":0},{"pos":[40,40],"type":"BulletSpeedMod","dir":0},{"pos":[-30,10],"type":"Reactor1x1","dir":0},{"pos":[30,10],"type":"Battery1x1","dir":0},{"pos":[30,-20],"type":"Engine03","dir":0},{"pos":[-30,-20],"type":"Engine03","dir":0},{"pos":[0,-20],"type":"BulletSpeedMod","dir":0},{"pos":[0,20],"type":"TorpTurret","dir":0}],"name":"","aiRules":[["Avoid everything"],["When #% of energy, @chargeTypes",20,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Attack","less range","weaker",3000],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",4],["Try to field # every # seconds",2,30]]},{"parts":[{"pos":[70,-50],"type":"UArmor1x1","dir":0},{"pos":[100,-80],"type":"Mount30","dir":0},{"pos":[-50,80],"type":"Wing1x2","dir":0},{"pos":[40,40],"type":"ReloaderMod","dir":0},{"pos":[-20,0],"type":"DamageMod","dir":0},{"pos":[50,80],"type":"Wing1x2","dir":0},{"pos":[-40,40],"type":"ReloaderMod","dir":0},{"pos":[20,80],"type":"BulletSpeedMod","dir":0},{"pos":[-20,80],"type":"BulletSpeedMod","dir":0},{"pos":[-70,-90],"type":"Engine01","dir":0},{"pos":[0,40],"type":"Mount360","dir":0},{"pos":[-100,-50],"type":"Battery2x1","dir":0},{"pos":[-70,-50],"type":"UArmor1x1","dir":0},{"pos":[-110,-20],"type":"Wing1x2","dir":0},{"pos":[-80,-20],"type":"Mount30","dir":0},{"pos":[-100,-80],"type":"Mount30","dir":0},{"pos":[70,-90],"type":"Engine01","dir":0},{"pos":[100,-50],"type":"Battery2x1","dir":0},{"pos":[80,-20],"type":"Mount30","dir":0},{"pos":[110,-20],"type":"Wing1x2","dir":0},{"pos":[20,0],"type":"DamageMod","dir":0},{"pos":[0,-80],"type":"Engine07","dir":0},{"pos":[-40,-40],"type":"Reactor2x2","dir":0},{"pos":[40,-40],"type":"Reactor2x2","dir":0},{"pos":[0,-40],"type":"Reactor2x2","dir":0},{"pos":[-50,0],"type":"UArmor1x2","dir":0},{"pos":[50,0],"type":"UArmor1x2","dir":0},{"pos":[-40,-70],"type":"UArmor2x1","dir":0},{"pos":[40,-70],"type":"UArmor2x1","dir":0},{"pos":[-100,-80],"type":"TorpTurret","dir":0},{"pos":[-80,-20],"type":"TorpTurret","dir":0},{"pos":[100,-80],"type":"TorpTurret","dir":0},{"pos":[80,-20],"type":"TorpTurret","dir":0},{"pos":[0,40],"type":"PlasmaTurret","dir":0}],"name":"","aiRules":[["Avoid over #damage shots",40],["@attackTypes enemy within #m","Attack",1000],["@capTypes Command Points within #m","Capture",10000],["Field # at start",2],["Try to field # every # seconds",1,30]]},{"parts":[{"pos":[-30,-40],"type":"Engine04","dir":0},{"pos":[-40,30],"type":"Wing2x1","dir":0},{"pos":[30,-40],"type":"Engine04","dir":0},{"pos":[50,-40],"type":"Engine04","dir":0},{"pos":[-50,-40],"type":"Engine04","dir":0},{"pos":[40,30],"type":"Wing2x1","dir":0},{"pos":[0,20],"type":"EnergyTransfer","dir":0},{"pos":[0,-20],"type":"Reactor2x2","dir":0},{"pos":[40,0],"type":"Battery2x2","dir":0},{"pos":[-40,0],"type":"Battery2x2","dir":0}],"name":"","aiRules":[["Field # for # of ship in slot # at priority #",1,1,2,5],["Stay in #m range of slot # units",500,2]]},"","","","","","",""];
ais.all.nulitor = [{"parts":[{"pos":[0,0],"type":"Mount30","dir":0},{"pos":[-10,-30],"type":"Battery1x1","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[0,0],"type":"RingTurret","dir":0}],"name":"Ring","aiRules":[["When #% of energy, @chargeTypes",50,"Find recharger"],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Cloaked","Cloaked",1000],["@attackTypes enemy within #m","Attack",1000],["@capTypes Command Points within #m","Spread to",10000],["Field # at start",3],["Try to field # every # seconds",1,30]]},{"parts":[{"pos":[-60,0],"type":"Reactor2x2","dir":0},{"pos":[-30,-20],"type":"Engine04","dir":0},{"pos":[-10,0],"type":"Engine04","dir":0},{"pos":[-30,10],"type":"Wing1x1Notch","dir":0},{"pos":[-20,40],"type":"EnergyTransfer","dir":0},{"pos":[-60,40],"type":"CloakGenerator","dir":0},{"pos":[20,40],"type":"Reactor2x2","dir":0},{"pos":[20,0],"type":"CloakGenerator","dir":0}],"name":"","aiRules":[["Stay in #m range of slot # units",300,10],["Stay in #m range of friendly units",500],["Field # for # of ship in slot # at priority #",1,1,10,1],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Flee","Slower","Stronger",600]]},{"parts":[{"pos":[-40,30],"type":"Wing2x1","dir":0},{"pos":[-40,0],"type":"TargetingMod","dir":0},{"pos":[-40,-80],"type":"CloakGenerator","dir":0},{"pos":[40,-80],"type":"CloakGenerator","dir":0},{"pos":[0,-20],"type":"Mount10Range","dir":0},{"pos":[-40,-40],"type":"TargetingMod","dir":0},{"pos":[40,0],"type":"TargetingMod","dir":0},{"pos":[-10,-100],"type":"Engine04","dir":0},{"pos":[40,-40],"type":"TargetingMod","dir":0},{"pos":[40,30],"type":"Wing2x1","dir":0},{"pos":[0,30],"type":"HArmor2x1","dir":0},{"pos":[0,-70],"type":"Reactor2x1","dir":0},{"pos":[0,-20],"type":"TeslaTurret","dir":0}],"name":"","aiRules":[]},{"parts":[{"pos":[-180,180],"type":"Mount30","dir":0},{"pos":[-180,140],"type":"StasisField","dir":0},{"pos":[-190,100],"type":"VArmor1x2SideBar","dir":0},{"pos":[-190,60],"type":"VArmor1x2SideBar","dir":0},{"pos":[-190,20],"type":"VArmor1x2SideBar","dir":0},{"pos":[-190,-20],"type":"VArmor1x2SideBar","dir":0},{"pos":[-190,-60],"type":"VArmor1x2SideBar","dir":0},{"pos":[-190,-100],"type":"VArmor1x2SideBar","dir":0},{"pos":[-190,-140],"type":"VArmor1x2SideBar","dir":0},{"pos":[-190,-180],"type":"VArmor1x2SideBar","dir":0},{"pos":[-130,-170],"type":"VArmor1x1","dir":0},{"pos":[-130,-150],"type":"VArmor1x1","dir":0},{"pos":[-110,-150],"type":"VArmor1x1","dir":0},{"pos":[-110,-130],"type":"VArmor1x1","dir":0},{"pos":[-90,-130],"type":"VArmor1x1","dir":0},{"pos":[-90,-110],"type":"VArmor1x1","dir":0},{"pos":[-70,-110],"type":"VArmor1x1","dir":0},{"pos":[-70,-90],"type":"VArmor1x1","dir":0},{"pos":[-50,-90],"type":"VArmor1x1","dir":0},{"pos":[-50,-70],"type":"VArmor1x1","dir":0},{"pos":[-30,-70],"type":"VArmor1x1","dir":0},{"pos":[-30,-50],"type":"VArmor1x1","dir":0},{"pos":[-10,-50],"type":"VArmor1x1","dir":0},{"pos":[-10,-30],"type":"VArmor1x1","dir":0},{"pos":[10,-30],"type":"VArmor1x1","dir":0},{"pos":[30,-10],"type":"VArmor1x1","dir":0},{"pos":[10,-10],"type":"VArmor1x1","dir":0},{"pos":[30,10],"type":"VArmor1x1","dir":0},{"pos":[50,10],"type":"VArmor1x1","dir":0},{"pos":[50,30],"type":"VArmor1x1","dir":0},{"pos":[70,30],"type":"VArmor1x1","dir":0},{"pos":[70,50],"type":"VArmor1x1","dir":0},{"pos":[90,50],"type":"VArmor1x1","dir":0},{"pos":[90,70],"type":"VArmor1x1","dir":0},{"pos":[110,70],"type":"VArmor1x1","dir":0},{"pos":[110,90],"type":"VArmor1x1","dir":0},{"pos":[130,90],"type":"VArmor1x1","dir":0},{"pos":[130,110],"type":"VArmor1x1","dir":0},{"pos":[150,110],"type":"VArmor1x1","dir":0},{"pos":[150,130],"type":"VArmor1x1","dir":0},{"pos":[170,130],"type":"VArmor1x1","dir":0},{"pos":[170,150],"type":"VArmor1x1","dir":0},{"pos":[190,150],"type":"VArmor1x1","dir":0},{"pos":[190,170],"type":"VArmor1x1","dir":0},{"pos":[-170,-190],"type":"Battery1x1","dir":0},{"pos":[-150,-180],"type":"Engine04","dir":0},{"pos":[-180,180],"type":"WavePullTurret","dir":0}],"name":"","aiRules":[]},{"parts":[{"pos":[30,-10],"type":"HArmor1x1","dir":0},{"pos":[-30,-10],"type":"HArmor1x1","dir":0},{"pos":[-40,40],"type":"Mount30","dir":0},{"pos":[10,10],"type":"HArmor1x1","dir":0},{"pos":[-10,10],"type":"HArmor1x1","dir":0},{"pos":[-50,10],"type":"HArmor1x1","dir":0},{"pos":[30,10],"type":"HArmor1x1","dir":0},{"pos":[-10,40],"type":"Battery1x2","dir":0},{"pos":[20,40],"type":"Mount30","dir":0},{"pos":[-50,-10],"type":"HArmor1x1","dir":0},{"pos":[30,-30],"type":"Wing1x1Round","dir":0},{"pos":[-10,-30],"type":"Engine02","dir":0},{"pos":[10,-30],"type":"HArmor1x1","dir":0},{"pos":[10,-10],"type":"HArmor1x1","dir":0},{"pos":[-30,-30],"type":"Wing1x1Round","dir":0},{"pos":[-30,10],"type":"HArmor1x1","dir":0},{"pos":[20,40],"type":"AutoTurret","dir":0},{"pos":[-40,40],"type":"BombGun","dir":0}],"name":"Probably an egg too","aiRules":[["Stay in #m range of slot # units",600,10],["When #% of energy, @chargeTypes",30,"Find recharger"],["Stayaway in #m range from slot # units",140,5],["Stayaway in #m range from slot # units",140,6],["Stay in #m range of friendly units",1000],["Avoid over #damage shots",50],["@attackTypes enemy within #m","Attack",3000],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",1,1,6,3]]},{"parts":[{"pos":[-30,-10],"type":"HArmor1x1","dir":0},{"pos":[10,-30],"type":"HArmor1x1","dir":0},{"pos":[50,30],"type":"HArmor1x1","dir":0},{"pos":[50,10],"type":"HArmor1x1","dir":0},{"pos":[-30,10],"type":"Wing1x1Round","dir":0},{"pos":[50,50],"type":"HArmor1x1","dir":0},{"pos":[20,-10],"type":"Battery2x1","dir":0},{"pos":[20,60],"type":"Mount10Range","dir":0},{"pos":[30,10],"type":"HArmor1x1","dir":0},{"pos":[10,10],"type":"HArmor1x1","dir":0},{"pos":[-20,60],"type":"Mount30","dir":0},{"pos":[-10,30],"type":"HArmor1x1","dir":0},{"pos":[-10,-10],"type":"Engine02","dir":0},{"pos":[-30,30],"type":"HArmor1x1","dir":0},{"pos":[50,-10],"type":"HArmor1x1","dir":0},{"pos":[-50,10],"type":"Wing1x1Round","dir":0},{"pos":[-20,60],"type":"RingTurret","dir":0},{"pos":[20,60],"type":"BombGun","dir":0}],"name":"Probably an egg","aiRules":[["When #% of energy, @chargeTypes",30,"Find recharger"],["@attackTypes enemy that is @absoluteTypes then # within #m","Ram","More expensive",300,1450],["@attackTypes enemy that is @relativeTypes and @relativeTypes within #m","Ram","Cloaked","Cloaked",600],["Stay in #m range of slot # units",1400,10],["@attackTypes enemy within #m","Attack",1300],["Stay in #m range of slot # units",600,10],["Stayaway in #m range from slot # units",140,6],["Stayaway in #m range from slot # units",140,5],["Stay in #m range of friendly units",1000],["@attackTypes enemy within #m","Attack",3000],["@capTypes Command Points within #m","Capture",10000],["Field # for # of ship in slot # at priority #",5,1,10,4]]},{"parts":[{"pos":[50,0],"type":"Wing1x2","dir":0},{"pos":[-80,40],"type":"Reactor2x2","dir":0},{"pos":[-70,-50],"type":"Engine02","dir":0},{"pos":[30,-50],"type":"Engine02","dir":0},{"pos":[-60,0],"type":"ReloaderMod","dir":0},{"pos":[-20,0],"type":"Mount360","dir":0},{"pos":[-40,-40],"type":"ReloaderMod","dir":0},{"pos":[0,-40],"type":"ReloaderMod","dir":0},{"pos":[20,0],"type":"ReloaderMod","dir":0},{"pos":[-40,40],"type":"TargetingMod","dir":0},{"pos":[0,40],"type":"TargetingMod","dir":0},{"pos":[30,40],"type":"Battery1x2","dir":0},{"pos":[-20,0],"type":"PDTurret","dir":0}],"name":"Point defense?","aiRules":[["Stay in #m range of slot # units",50,10],["Stay in #m range of friendly units",200],["Field # for # of @needTypes at priority #",1,20,"Point Defense Need",20]]},{"parts":[{"pos":[80,60],"type":"CloakGenerator","dir":0},{"pos":[40,40],"type":"DamageMod","dir":0},{"pos":[40,80],"type":"DamageMod","dir":0},{"pos":[80,20],"type":"Battery2x2","dir":0},{"pos":[30,0],"type":"Engine03","dir":0},{"pos":[-30,0],"type":"Engine03","dir":0},{"pos":[0,60],"type":"Mount30","dir":0},{"pos":[50,0],"type":"Engine03","dir":0},{"pos":[80,100],"type":"CloakGenerator","dir":0},{"pos":[50,110],"type":"Wing1x1Round","dir":0},{"pos":[-40,40],"type":"DamageMod","dir":0},{"pos":[0,20],"type":"DamageMod","dir":0},{"pos":[-40,80],"type":"DamageMod","dir":0},{"pos":[0,100],"type":"DamageMod","dir":0},{"pos":[0,60],"type":"RingTurret","dir":0}],"name":"","aiRules":[]},{"parts":[{"pos":[50,-90],"type":"Engine02","dir":0,"ghostCopy":true},{"pos":[110,-90],"type":"Engine02","dir":0,"ghostCopy":true},{"pos":[40,90],"type":"Wing2x1","dir":0,"ghostCopy":true},{"pos":[110,40],"type":"Wing1x2","dir":0,"ghostCopy":true},{"pos":[-130,-40],"type":"HArmor1x2","dir":0,"ghostCopy":true},{"pos":[110,0],"type":"HArmor1x2","dir":0,"ghostCopy":true},{"pos":[110,-40],"type":"HArmor1x2","dir":0,"ghostCopy":true},{"pos":[-40,20],"type":"Mount360","dir":0,"ghostCopy":true},{"pos":[-80,-40],"type":"Reactor2x2","dir":0,"ghostCopy":true},{"pos":[0,70],"type":"Battery2x1","dir":0,"ghostCopy":true},{"pos":[40,20],"type":"Mount360","dir":0,"ghostCopy":true},{"pos":[80,-40],"type":"Reactor2x2","dir":0,"ghostCopy":true},{"pos":[40,-50],"type":"HArmor2x1","dir":0,"ghostCopy":true},{"pos":[-130,30],"type":"HArmor1x1Angle","dir":0,"ghostCopy":true},{"pos":[130,-40],"type":"HArmor1x2","dir":0,"ghostCopy":true},{"pos":[-40,90],"type":"Wing2x1","dir":0,"ghostCopy":true},{"pos":[0,-40],"type":"Mount360","dir":0,"ghostCopy":true},{"pos":[-110,40],"type":"Wing1x2","dir":0,"ghostCopy":true},{"pos":[130,30],"type":"HArmor1x1Angle","dir":0,"ghostCopy":true},{"pos":[-40,-50],"type":"HArmor2x1","dir":0,"ghostCopy":true},{"pos":[-110,0],"type":"HArmor1x2","dir":0,"ghostCopy":true},{"pos":[40,-20],"type":"ReloaderMod","dir":0,"ghostCopy":true},{"pos":[-130,0],"type":"HArmor1x2","dir":0,"ghostCopy":true},{"pos":[130,0],"type":"HArmor1x2","dir":0,"ghostCopy":true},{"pos":[80,70],"type":"Wing2x1","dir":0,"ghostCopy":true},{"pos":[-80,70],"type":"Wing2x1","dir":0,"ghostCopy":true},{"pos":[-110,-40],"type":"HArmor1x2","dir":0,"ghostCopy":true},{"pos":[-130,-90],"type":"HArmor1x1AngleBack","dir":0,"ghostCopy":true},{"pos":[130,-90],"type":"HArmor1x1AngleBack","dir":0,"ghostCopy":true},{"pos":[130,-70],"type":"HArmor1x1","dir":0,"ghostCopy":true},{"pos":[-80,0],"type":"ReloaderMod","dir":0,"ghostCopy":true},{"pos":[-40,-20],"type":"ReloaderMod","dir":0,"ghostCopy":true},{"pos":[-50,-90],"type":"Engine02","dir":0,"ghostCopy":true},{"pos":[-130,-70],"type":"HArmor1x1","dir":0,"ghostCopy":true},{"pos":[30,-110],"type":"Engine02","dir":0,"ghostCopy":true},{"pos":[-30,-110],"type":"Engine02","dir":0,"ghostCopy":true},{"pos":[-110,-90],"type":"Engine02","dir":0,"ghostCopy":true},{"pos":[-20,-70],"type":"HArmor2x1","dir":0,"ghostCopy":true},{"pos":[20,-70],"type":"HArmor2x1","dir":0,"ghostCopy":true},{"pos":[-80,-80],"type":"HArmor2x2","dir":0,"ghostCopy":true},{"pos":[80,-80],"type":"HArmor2x2","dir":0,"ghostCopy":true},{"pos":[0,90],"type":"HArmor2x1","dir":0,"ghostCopy":true},{"pos":[-70,-110],"type":"HArmor1x1AngleBack","dir":0,"ghostCopy":true},{"pos":[70,-110],"type":"HArmor1x1AngleBack","dir":0,"ghostCopy":true},{"pos":[0,-100],"type":"EnergyTransfer","dir":0,"ghostCopy":true},{"pos":[80,0],"type":"ReloaderMod","dir":0,"ghostCopy":true},{"pos":[-80,40],"type":"ReloaderMod","dir":0,"ghostCopy":true},{"pos":[0,40],"type":"BulletSpeedMod","dir":0,"ghostCopy":true},{"pos":[40,60],"type":"BulletSpeedMod","dir":0,"ghostCopy":true},{"pos":[0,0],"type":"ReloaderMod","dir":0,"ghostCopy":true},{"pos":[-40,60],"type":"BulletSpeedMod","dir":0,"ghostCopy":true},{"pos":[80,40],"type":"BulletSpeedMod","dir":0,"ghostCopy":true},{"pos":[0,-40],"type":"PDTurret","dir":0,"ghostCopy":true},{"pos":[-40,20],"type":"ArtilleryTurret","dir":0,"ghostCopy":true},{"pos":[40,20],"type":"ArtilleryTurret","dir":0,"ghostCopy":true}],"name":"Heavy Cruiser Tesla Missile","aiRules":[]},{"parts":[{"pos":[-10,-70],"type":"Engine02","dir":0},{"pos":[50,-70],"type":"Engine02","dir":0},{"pos":[40,0],"type":"Mount10Range","dir":0},{"pos":[120,0],"type":"Mount10Range","dir":0},{"pos":[-160,-20],"type":"TargetingMod","dir":0},{"pos":[-160,20],"type":"TargetingMod","dir":0},{"pos":[-80,20],"type":"TargetingMod","dir":0},{"pos":[-80,-20],"type":"TargetingMod","dir":0},{"pos":[0,-20],"type":"TargetingMod","dir":0},{"pos":[0,20],"type":"TargetingMod","dir":0},{"pos":[80,20],"type":"TargetingMod","dir":0},{"pos":[80,-20],"type":"TargetingMod","dir":0},{"pos":[160,-20],"type":"TargetingMod","dir":0},{"pos":[110,-70],"type":"Engine02","dir":0},{"pos":[130,-70],"type":"Engine02","dir":0},{"pos":[-40,-60],"type":"HArmor2x2","dir":0},{"pos":[80,-60],"type":"HArmor2x2","dir":0},{"pos":[80,60],"type":"HArmor2x2","dir":0},{"pos":[40,60],"type":"HArmor2x2","dir":0},{"pos":[-40,60],"type":"HArmor2x2","dir":0},{"pos":[-40,0],"type":"Mount10Range","dir":0},{"pos":[-120,0],"type":"Mount10Range","dir":0},{"pos":[30,-70],"type":"Engine02","dir":0},{"pos":[10,-70],"type":"Engine02","dir":0},{"pos":[-120,-60],"type":"Reactor2x2","dir":0},{"pos":[-40,-100],"type":"HArmor2x2","dir":0},{"pos":[80,100],"type":"Wing2x2","dir":0},{"pos":[-80,-100],"type":"HArmor2x2","dir":0},{"pos":[-80,-60],"type":"HArmor2x2","dir":0},{"pos":[-80,60],"type":"HArmor2x2","dir":0},{"pos":[-120,60],"type":"HArmor2x2","dir":0},{"pos":[-80,100],"type":"Reactor2x2","dir":0},{"pos":[80,-100],"type":"HArmor2x2","dir":0},{"pos":[120,60],"type":"HArmor2x2","dir":0},{"pos":[160,20],"type":"TargetingMod","dir":0},{"pos":[0,60],"type":"HArmor2x2","dir":0},{"pos":[40,100],"type":"Battery2x2","dir":0},{"pos":[80,-140],"type":"Wing2x2","dir":0},{"pos":[0,100],"type":"Mount90","dir":0},{"pos":[-40,100],"type":"Mount90","dir":0},{"pos":[-40,-140],"type":"HArmor2x2","dir":0},{"pos":[10,130],"type":"HArmor1x1","dir":0},{"pos":[-10,130],"type":"HArmor1x1","dir":0},{"pos":[-30,130],"type":"HArmor1x1","dir":0},{"pos":[30,130],"type":"HArmor1x1","dir":0},{"pos":[50,130],"type":"HArmor1x1","dir":0},{"pos":[-70,-130],"type":"HArmor1x1","dir":0},{"pos":[-40,100],"type":"PDTurret","dir":0},{"pos":[-120,0],"type":"TeslaTurret","dir":0},{"pos":[-40,0],"type":"TeslaTurret","dir":0},{"pos":[40,0],"type":"TeslaTurret","dir":0},{"pos":[120,0],"type":"TeslaTurret","dir":0},{"pos":[0,100],"type":"HeavyPDTurret","dir":0}],"name":"Plasma hovertank","aiRules":[["@attackTypes enemy within #m","Attack",2000],["@capTypes Command Points within #m","Capture",10000],["Field # when money over # at priority #",1,1000,71]]}];
;


//from src/grid.js
// Generated by CoffeeScript 1.10.0
(function() {
  var NxN, SIZE, offset, partSize,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  NxN = 24;

  SIZE = 20;

  window.validSpec = function(player, spec) {
    var issue;
    issue = hasIssue(player, spec);
    return issue === null;
  };

  window.hasIssue = function(player, spec) {
    var badParts, check, e, error, grid, hasPart, j, len, part, ref, ref1, size, unit, x, y;
    try {
      unit = new types.Unit(spec);
      if (unit.parts.length === 0) {
        return "No parts, drag parts from the left.";
      }
      if (unit.cost > sim.costLimit + unit.limitBonus) {
        return "Ship too big, cost can't be over $" + (sim.costLimit + unit.limitBonus) + ".";
      }
      if (unit.parts.length > 800) {
        return "Too many parts";
      }
      if (unit.name.length > 50) {
        return "Name too long";
      }
      ref = unit.parts;
      for (j = 0, len = ref.length; j < len; j++) {
        part = ref[j];
        size = partSize(part);
        x = part.pos[0] / SIZE + NxN / 2 - size[0] / 2;
        y = part.pos[1] / SIZE + NxN / 2 - size[1] / 2;
        if ((modulo(x, 1) > 0.0001 && modulo(x, 1) < 0.9999) || (modulo(y, 1) > 0.0001 && modulo(y, 1) < 0.9999)) {
          return "Invalid part placement";
        }
        if (part.disable) {
          return "Has parts that have been discontinued.";
        }
        if (part.ghostCopy) {
          return "Has parts from a copied ship.";
        }
        if (!part.dir < 0 || part.dir > 3 || modulo(part.dir, 1) !== 0) {
          return "Invalid part rotation";
        }
        if (!(part.dir === 0 || part.canRotate)) {
          return "Part cannot rotate";
        }
        if (!player.ai) {
          if (!(typeof account !== "undefined" && account !== null ? account.hasDLC(part.dlc) : void 0)) {
            return "Please support us by getting " + part.dlc + " DLC and unlock " + part.name + ".";
          }
          if (!(typeof account !== "undefined" && account !== null ? account.hasDLCBonus() : void 0) && part.dir && part.dir !== 0) {
            return "Part rotation is currently only available to <a href='http://store.steampowered.com/app/472490' target='_blank'>supporters who get a DLC</a>.";
          }
        }
      }
      hasPart = function(name) {
        var k, len1, ref1;
        ref1 = unit.parts;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          part = ref1[k];
          if (part.constructor.name === name) {
            return true;
          }
        }
        return false;
      };
      ref1 = computeGrid(player, unit), grid = ref1[0], badParts = ref1[1];
      if (badParts.length > 0) {
        return "Ship has parts outside the build area.";
      }
      check = function(fn) {
        var k, l, ref2, ref3, t;
        for (x = k = 0, ref2 = NxN; 0 <= ref2 ? k < ref2 : k > ref2; x = 0 <= ref2 ? ++k : --k) {
          for (y = l = 0, ref3 = NxN; 0 <= ref3 ? l < ref3 : l > ref3; y = 0 <= ref3 ? ++l : --l) {
            t = grid[x][y];
            if (fn(t)) {
              return true;
            }
          }
        }
        return false;
      };
      if (!player.ai) {
        if (check(function(t) {
          return t.locked;
        })) {
          return "Has parts that have not been unlocked.";
        }
      }
      if (check(function(t) {
        return t.overlap;
      })) {
        return "Parts should not overlap.";
      }
      if (check(function(t) {
        return t.exhaust && t.solid;
      })) {
        return "Engine exhaust must not hit another part.";
      }
      if (check(function(t) {
        return t.solid && !t.fill;
      })) {
        return "All ship parts must be connected.";
      }
      if (check(function(t) {
        return t.bad && t.gimble;
      })) {
        return "Weapons must be placed on a mount.";
      }
      if (check(function(t) {
        return t.noTurret;
      })) {
        return "Mount has no turret attached.";
      }
      if (check(function(t) {
        return t.noEffect;
      })) {
        return "Part needs to be next to a weapon.";
      }
      if (check(function(t) {
        return t.cantPaint;
      })) {
        return "Decal can't be placed like this. Decals go on armor or batteries.";
      }
      if (check(function(t) {
        return t.overPaint;
      })) {
        return "Decal overlaps with another decal.";
      }
      if (check(function(t) {
        return t.bad;
      })) {
        return "Improperly placed part.";
      }
      if (unit.storeEnergy === 0) {
        return "No energy storage, add battery or reactor.";
      }
      if (unit.maxSpeed === 0) {
        return "Can't move, add engines.";
      }
      if (unit.jumpDistance > 0 && unit.jumpDistance < unit.minJump) {
        return "Insufficient jump power for mass. Add more jump drives.";
      }
      return null;
    } catch (error) {
      e = error;
      console.log("exception e", e);
      return "Part parse error... thats odd?";
    }
  };

  window.genBuildPic = function(spec) {};

  offset = function(part) {
    var xoff, yoff;
    if (part.size[0] % 2 === 1) {
      xoff = 1;
    } else {
      xoff = 0;
    }
    if (part.size[1] % 2 === 1) {
      yoff = 1;
    } else {
      yoff = 0;
    }
    if (part.dir % 2 === 0) {
      return [xoff, yoff];
    } else {
      return [yoff, xoff];
    }
  };

  partSize = function(part) {
    var xsize, ysize;
    xsize = part.size[0];
    ysize = part.size[1];
    if (part.dir % 2 === 0) {
      return [xsize, ysize];
    } else {
      return [ysize, xsize];
    }
  };

  window.computeGrid = function(player, unit, removCb) {
    var ax, ay, badParts, ey, getXY, grid, i, j, k, l, len, len1, len2, m, n, newSet, o, openSet, p, part, parts, px, py, q, r, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref4, ref5, ref6, ref7, ref8, ref9, root, s, size, t, u, ws, x, y;
    parts = unit.parts;
    getXY = function(part) {
      var size, x, y;
      size = partSize(part);
      x = Math.round(part.pos[0] / SIZE + NxN / 2 - size[0] / 2);
      y = Math.round(part.pos[1] / SIZE + NxN / 2 - size[1] / 2);
      return [x, y];
    };
    grid = [];
    badParts = [];
    for (i = j = 0, ref = NxN; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      grid.push((function() {
        var k, ref1, results;
        results = [];
        for (n = k = 0, ref1 = NxN; 0 <= ref1 ? k < ref1 : k > ref1; n = 0 <= ref1 ? ++k : --k) {
          results.push({});
        }
        return results;
      })());
    }
    if (parts.length === 0) {
      return [grid, badParts];
    }
    root = parts[0];
    for (k = 0, len = parts.length; k < len; k++) {
      part = parts[k];
      size = partSize(part);
      for (px = l = 0, ref1 = size[0]; 0 <= ref1 ? l < ref1 : l > ref1; px = 0 <= ref1 ? ++l : --l) {
        for (py = m = 0, ref2 = size[1]; 0 <= ref2 ? m < ref2 : m > ref2; py = 0 <= ref2 ? ++m : --m) {
          ref3 = getXY(part, px, py), x = ref3[0], y = ref3[1];
          x += px;
          y += py;
          t = (ref4 = grid[x]) != null ? ref4[y] : void 0;
          if (t === void 0) {
            badParts.push(part);
            continue;
          }
          if (!player.ai) {
            if (part.dlc) {
              if (!account.hasDLC(part.dlc)) {
                t.bad = true;
                t.locked = true;
              }
            }
            if (!account.hasDLCBonus() && part.dir && part.dir !== 0) {
              t.bad = true;
              t.locked = true;
            }
          }
          if (sim.galaxyStar && player.id === commander.id && !galaxyMode.unlockedParts[part.constructor.name]) {
            t.bad = true;
            t.locked = true;
          }
          if (part.paintable) {
            t.paintable = true;
          }
          if (part.decal) {
            if (!t.paintable) {
              t.cantPaint = true;
              t.bad = true;
            } else if (t.painted) {
              t.overPaint = true;
              t.bad = true;
            } else {
              t.painted = true;
            }
            continue;
          }
          if (part.gimble) {
            if (!t.mount) {
              t.bad = true;
              t.gimble = true;
            }
          } else {
            if (t.solid === true) {
              t.overlap = true;
              t.bad = true;
            }
            t.solid = true;
          }
          if (part.attach) {
            if ((ref5 = grid[x]) != null) {
              if ((ref6 = ref5[y]) != null) {
                ref6.struct = true;
              }
            }
          }
          if (part.mount && (px === (size[0] / 2) || px === (size[0] / 2 - 1)) && (py === (size[1] / 2) || py === (size[1] / 2 - 1))) {
            if ((ref7 = grid[x]) != null) {
              if ((ref8 = ref7[y]) != null) {
                ref8.mount = true;
              }
            }
            if (!part.turret) {
              if ((ref9 = grid[x]) != null) {
                if ((ref10 = ref9[y]) != null) {
                  ref10.noTurret = true;
                }
              }
              if ((ref11 = grid[x]) != null) {
                if ((ref12 = ref11[y]) != null) {
                  ref12.bad = true;
                }
              }
            }
          }
          if (part.gimble) {
            if ((ref13 = grid[x]) != null) {
              if ((ref14 = ref13[y]) != null) {
                ref14.mount = false;
              }
            }
          }
          if (part.exhaust) {
            if (py === 0) {
              if ((ref15 = grid[x]) != null) {
                if ((ref16 = ref15[y]) != null) {
                  ref16.struct = false;
                }
              }
              for (ey = o = ref17 = y - 1; ref17 <= -1 ? o < -1 : o > -1; ey = ref17 <= -1 ? ++o : --o) {
                if ((ref18 = grid[x]) != null) {
                  if ((ref19 = ref18[ey]) != null) {
                    ref19.exhaust = true;
                  }
                }
              }
            }
          }
          if (part.effected_weapons) {
            ws = part.effected_weapons();
            if (ws.length === 0) {
              if ((ref20 = grid[x]) != null) {
                if ((ref21 = ref20[y]) != null) {
                  ref21.noEffect = true;
                }
              }
              if ((ref22 = grid[x]) != null) {
                if ((ref23 = ref22[y]) != null) {
                  ref23.bad = true;
                }
              }
            }
          }
        }
      }
    }
    ref24 = getXY(root), x = ref24[0], y = ref24[1];
    if (grid[x] === void 0 || grid[x][y] === void 0) {
      return [grid, badParts];
    }
    grid[x][y].fill = true;
    openSet = [];
    openSet.push([x, y]);
    for (i = p = 0; p < 1000; i = ++p) {
      newSet = [];
      for (q = 0, len1 = openSet.length; q < len1; q++) {
        ref25 = openSet[q], x = ref25[0], y = ref25[1];
        ref26 = [[-1, 0], [1, 0], [0, -1], [0, 1]];
        for (r = 0, len2 = ref26.length; r < len2; r++) {
          ref27 = ref26[r], ax = ref27[0], ay = ref27[1];
          t = (ref28 = grid[x + ax]) != null ? ref28[y + ay] : void 0;
          if (t && t.solid && !t.fill) {
            t.fill = true;
            newSet.push([x + ax, y + ay]);
          }
        }
      }
      if (newSet.length === 0) {
        break;
      }
      openSet = newSet;
    }
    for (x = s = 0, ref29 = NxN; 0 <= ref29 ? s < ref29 : s > ref29; x = 0 <= ref29 ? ++s : --s) {
      for (y = u = 0, ref30 = NxN; 0 <= ref30 ? u < ref30 : u > ref30; y = 0 <= ref30 ? ++u : --u) {
        t = grid[x][y];
        if (t.exhaust && t.solid) {
          t.bad = true;
        }
        if (t.solid && !t.fill) {
          t.bad = true;
        }
      }
    }
    return [grid, badParts];
  };

}).call(this);
;

// set ts=2 sw=2
